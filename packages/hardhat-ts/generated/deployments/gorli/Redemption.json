{
  "address": "0x45a9972D93Ae4f60a1aAa3B18c139Dd709d03A91",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "addressBDAMM",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "addressDAMM",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "addressUSDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressTreasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_redemptionUSDCPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redemptionFee",
          "type": "uint256"
        }
      ],
      "name": "BdammRedemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "RedemptionUSDCPriceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redemptionFee",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionUSDCPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRedemptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUSDCFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redemptionUSDCPrice",
          "type": "uint256"
        }
      ],
      "name": "updateRedemptionUSDCPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDAMM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25d3cf1d9b4dff6ed0c4e8ae88743d9d6f6ba375afff1d68ec931cdc641cb37d",
  "receipt": {
    "to": null,
    "from": "0xc8693923643D93877A8E5609EE119C6De6cb4F8A",
    "contractAddress": "0x45a9972D93Ae4f60a1aAa3B18c139Dd709d03A91",
    "transactionIndex": 34,
    "gasUsed": "1049217",
    "logsBloom": "0x
    "blockHash": "0x4602c3d3c55c6ddeb96158e7bdf0d723204434ed5053338d8b4aad5c6fc9aa59",
    "transactionHash": "0x25d3cf1d9b4dff6ed0c4e8ae88743d9d6f6ba375afff1d68ec931cdc641cb37d",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 7886182,
        "transactionHash": "0x25d3cf1d9b4dff6ed0c4e8ae88743d9d6f6ba375afff1d68ec931cdc641cb37d",
        "address": "0x45a9972D93Ae4f60a1aAa3B18c139Dd709d03A91",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c8693923643d93877a8e5609ee119c6de6cb4f8a"
        ],
        "data": "0x",
        "logIndex": 247,
        "blockHash": "0x4602c3d3c55c6ddeb96158e7bdf0d723204434ed5053338d8b4aad5c6fc9aa59"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7886182,
        "transactionHash": "0x25d3cf1d9b4dff6ed0c4e8ae88743d9d6f6ba375afff1d68ec931cdc641cb37d",
        "address": "0x45a9972D93Ae4f60a1aAa3B18c139Dd709d03A91",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c8693923643d93877a8e5609ee119c6de6cb4f8a",
          "0x000000000000000000000000c8693923643d93877a8e5609ee119c6de6cb4f8a"
        ],
        "data": "0x",
        "logIndex": 248,
        "blockHash": "0x4602c3d3c55c6ddeb96158e7bdf0d723204434ed5053338d8b4aad5c6fc9aa59"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 7886182,
        "transactionHash": "0x25d3cf1d9b4dff6ed0c4e8ae88743d9d6f6ba375afff1d68ec931cdc641cb37d",
        "address": "0x45a9972D93Ae4f60a1aAa3B18c139Dd709d03A91",
        "topics": [
          "0x9c672c9f53cab91e279ccc66bc5055930e38b33d1c84ae0cc8cf0e3a1cb20376"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000493e0",
        "logIndex": 249,
        "blockHash": "0x4602c3d3c55c6ddeb96158e7bdf0d723204434ed5053338d8b4aad5c6fc9aa59"
      }
    ],
    "blockNumber": 7886182,
    "cumulativeGasUsed": "26250604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf9e126C5E047a0Af0aA8EBa426103c1656b6386f",
    "0x7770d4bd31387Cd5dCb5B45d7Bd2930e62a57A32",
    "0x8623C22c571F6fe9494Fe80277848a4901aDD8ba",
    "0xc8693923643D93877A8E5609EE119C6De6cb4F8A",
    "0xc8693923643D93877A8E5609EE119C6De6cb4F8A",
    "300000"
  ],
  "numDeployments": 2,
  "solcInputHash": "204bada24e4f10b0e00898134bfbecae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"addressBDAMM\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"addressDAMM\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"addressUSDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redemptionUSDCPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"}],\"name\":\"BdammRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"RedemptionUSDCPriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFee\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionUSDCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRedemptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDCFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionUSDCPrice\",\"type\":\"uint256\"}],\"name\":\"updateRedemptionUSDCPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAMM/Redemption.sol\":\"Redemption\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"contracts/DAMM/Redemption.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../openzeppelin/Ownable.sol\\\";\\nimport \\\"../openzeppelin/ERC20.sol\\\";\\nimport \\\"../openzeppelin/ReentrancyGuard.sol\\\";\\n\\ncontract Redemption is Ownable, ReentrancyGuard {\\n\\n    event BdammRedemption(\\n        address indexed from,\\n        uint256 amount,\\n        uint256 redemptionFee\\n    );\\n    event RedemptionUSDCPriceUpdated(\\n        uint256 oldPrice,\\n        uint256 newPrice\\n    );\\n\\n    ERC20 BDAMM;\\n    ERC20 DAMM;\\n    ERC20 USDC;\\n\\n    address public treasury;\\n    uint256 public redemptionUSDCPrice;\\n    uint256 public totalRedemptions;\\n    uint256 public totalUSDCFees;\\n\\n    constructor(\\n        ERC20 addressBDAMM,      // 0xfa372fF1547fa1a283B5112a4685F1358CE5574d\\n        ERC20 addressDAMM,       // 0xb3207935FF56120f3499e8aD08461Dd403bF16b8\\n        ERC20 addressUSDC,       // 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n        address addressOwner,    // multisig address\\n        address addressTreasury, \\n        uint256 _redemptionUSDCPrice\\n    ) {\\n        BDAMM = addressBDAMM;\\n        DAMM = addressDAMM;\\n        USDC = addressUSDC;\\n        Ownable._transferOwnership(addressOwner);\\n        treasury = addressTreasury;\\n        _updateRedemptionUSDCPrice(_redemptionUSDCPrice);\\n    }\\n\\n    function _updateRedemptionUSDCPrice(uint256 _redemptionUSDCPrice) internal {\\n        emit RedemptionUSDCPriceUpdated(redemptionUSDCPrice, _redemptionUSDCPrice);\\n        redemptionUSDCPrice = _redemptionUSDCPrice;\\n    }\\n    /* \\n      amount is the amount of BDAMM to swap to DAMM 1:1 (18 decimals)\\n      redemptionFee is the amount of USDC to send with the redemption (6 decimals)\\n    */\\n    function redeem(uint256 amount, uint256 redemptionFee) nonReentrant external {\\n        address user = msg.sender;\\n        uint256 allowanceBDAMM = BDAMM.allowance(user, address(this));\\n        require(amount <= allowanceBDAMM, \\\"User has not given swap contract spend approval for BDAMM\\\");\\n        uint256 requiredRedemptionFee = amount * redemptionUSDCPrice;\\n        require(redemptionFee * 1e18 == requiredRedemptionFee, \\\"Incorrect USDC redemption fee sent\\\");\\n        uint256 allowanceUSDC = USDC.allowance(user, address(this));\\n        require(redemptionFee <= allowanceUSDC, \\\"User has not given swap contract spend approval for USDC\\\");\\n        uint256 selfBalanceDAMM = DAMM.balanceOf(address(this));\\n        require(amount <= selfBalanceDAMM, \\\"Not enough DAMM liquidity\\\");\\n        totalUSDCFees += redemptionFee;\\n        totalRedemptions += amount;\\n        emit BdammRedemption(user, amount, redemptionFee);\\n        require(BDAMM.transferFrom(user, treasury, amount), \\\"Could not transfer user's BDAMM to treasury\\\");\\n        require(USDC.transferFrom(user, treasury, redemptionFee), \\\"Could not transfer user's USDC to treasury\\\");\\n        require(DAMM.transfer(user, amount), \\\"Swap contract could not transfer DAMM to user\\\");\\n    }\\n\\n    function withdrawDAMM() onlyOwner external {\\n        uint256 balance = DAMM.balanceOf(address(this));\\n        require(DAMM.transfer(this.owner(), balance), \\\"Admin could not withdraw DAMM\\\");\\n    }\\n\\n    function sweepToken(ERC20 token) onlyOwner external {\\n      uint256 balance = token.balanceOf(address(this));\\n      require(token.transfer(this.owner(), balance), \\\"Admin could not withdraw token\\\");\\n    }\\n\\n    function updateRedemptionUSDCPrice(uint256 _redemptionUSDCPrice) onlyOwner external {\\n      _updateRedemptionUSDCPrice(_redemptionUSDCPrice);\\n    }\\n\\n    function renounceOwnership() override public virtual onlyOwner {\\n        revert(\\\"Owner cannot renounce ownership\\\");\\n    }\\n\\n    function transferOwnership(address newOwner) override public virtual onlyOwner {\\n        // unused:\\n        newOwner;\\n        revert(\\\"Owner cannot transfer ownership\\\");\\n    }\\n}\",\"keccak256\":\"0xdac461ec24700c91df1329fe6a02e57c2dcc2be2ca47f72921ce91943b5b3b9d\",\"license\":\"MIT\"},\"contracts/openzeppelin/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x197651ff7207345936e19940e36235967fe866449caa294e19642b6c6aaa62f8\",\"license\":\"MIT\"},\"contracts/openzeppelin/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 totalSupply_,\\n    address account\\n  ) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _totalSupply = totalSupply_;\\n    _balances[account] = uint256(totalSupply_);\\n    emit Transfer(address(0), account, totalSupply_);\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * NOTE: Does not update the allowance if the current allowance\\n   * is the maximum `uint256`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` and `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``from``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = allowance(owner, spender);\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, amount);\\n\\n    uint256 fromBalance = _balances[from];\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n      _balances[from] = fromBalance - amount;\\n    }\\n    _balances[to] += amount;\\n\\n    emit Transfer(from, to, amount);\\n\\n    _afterTokenTransfer(from, to, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n   *\\n   * Does not update the allowance amount in case of infinite allowance.\\n   * Revert if not enough allowance is available.\\n   *\\n   * Might emit an {Approval} event.\\n   */\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x432b1db9e18e31125507e49178ee7374a1d0116bd275a2f98d4d7786fa5d0db4\",\"license\":\"MIT\"},\"contracts/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7ca2d5577acfd1fcf805ceaf7aee063b62e7373d1cf2bcdabd7ee0674b994a08\",\"license\":\"MIT\"},\"contracts/openzeppelin/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa0c6e7df0fb28748aa10a6d4d7d1633071bc2c53ab54d084b82339993602788f\",\"license\":\"MIT\"},\"contracts/openzeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xb463f86793c9092e8a0aa6f51ea273853950dd750be7bb2d3746515677e75ae4\",\"license\":\"MIT\"},\"contracts/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0xd29d3ea88157ac9005430d38c36abbd86ab628fb5cb3c4c3fb91d2a5a09bff51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101255780637cbc23731461012d57806381064b251461014057806387169bd8146101495780638da5cb5b14610152578063f2fde38b1461016357600080fd5b8063080affa4146100ae5780631be19560146100b857806355c6df69146100cb57806359e6771d146100e757806361d027b3146100fa575b600080fd5b6100b6610176565b005b6100b66100c6366004610d84565b61035e565b6100d460065481565b6040519081526020015b60405180910390f35b6100b66100f5366004610da8565b610527565b60055461010d906001600160a01b031681565b6040516001600160a01b0390911681526020016100de565b6100b661055a565b6100b661013b366004610dc1565b6105cc565b6100d460075481565b6100d460085481565b6000546001600160a01b031661010d565b6100b6610171366004610d84565b610c5f565b6000546001600160a01b031633146101a95760405162461bcd60e51b81526004016101a090610de3565b60405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610e18565b9050600360009054906101000a90046001600160a01b03166001600160a01b031663a9059cbb306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610e31565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610e4e565b61035b5760405162461bcd60e51b815260206004820152601d60248201527f41646d696e20636f756c64206e6f742077697468647261772044414d4d00000060448201526064016101a0565b50565b6000546001600160a01b031633146103885760405162461bcd60e51b81526004016101a090610de3565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f39190610e18565b9050816001600160a01b031663a9059cbb306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190610e31565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190610e4e565b6105235760405162461bcd60e51b815260206004820152601e60248201527f41646d696e20636f756c64206e6f7420776974686472617720746f6b656e000060448201526064016101a0565b5050565b6000546001600160a01b031633146105515760405162461bcd60e51b81526004016101a090610de3565b61035b81610d2e565b6000546001600160a01b031633146105845760405162461bcd60e51b81526004016101a090610de3565b60405162461bcd60e51b815260206004820152601f60248201527f4f776e65722063616e6e6f742072656e6f756e6365206f776e6572736869700060448201526064016101a0565b60026001540361061e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101a0565b6002600181905554604051636eb1769f60e11b81523360048201819052306024830152916000916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190610e18565b9050808411156107135760405162461bcd60e51b815260206004820152603960248201527f5573657220686173206e6f7420676976656e207377617020636f6e747261637460448201527f207370656e6420617070726f76616c20666f72204244414d4d0000000000000060648201526084016101a0565b6000600654856107239190610e86565b90508061073885670de0b6b3a7640000610e86565b146107905760405162461bcd60e51b815260206004820152602260248201527f496e636f7272656374205553444320726564656d7074696f6e206665652073656044820152611b9d60f21b60648201526084016101a0565b60048054604051636eb1769f60e11b81526001600160a01b03868116938201939093523060248201526000929091169063dd62ed3e90604401602060405180830381865afa1580156107e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080a9190610e18565b9050808511156108825760405162461bcd60e51b815260206004820152603860248201527f5573657220686173206e6f7420676976656e207377617020636f6e747261637460448201527f207370656e6420617070726f76616c20666f722055534443000000000000000060648201526084016101a0565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef9190610e18565b9050808711156109415760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f7567682044414d4d206c69717569646974790000000000000060448201526064016101a0565b85600860008282546109539190610ea5565b92505081905550866007600082825461096c9190610ea5565b909155505060408051888152602081018890526001600160a01b038716917ff881854744b013d3410b97d9445b11ee090315c4a2eda6183feef5130d77aa48910160405180910390a26002546005546040516323b872dd60e01b81526001600160a01b0388811660048301529182166024820152604481018a90529116906323b872dd906064016020604051808303816000875af1158015610a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a369190610e4e565b610a965760405162461bcd60e51b815260206004820152602b60248201527f436f756c64206e6f74207472616e7366657220757365722773204244414d4d2060448201526a746f20747265617375727960a81b60648201526084016101a0565b600480546005546040516323b872dd60e01b81526001600160a01b03898116948201949094529083166024820152604481018990529116906323b872dd906064016020604051808303816000875af1158015610af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1a9190610e4e565b610b795760405162461bcd60e51b815260206004820152602a60248201527f436f756c64206e6f74207472616e7366657220757365722773205553444320746044820152696f20747265617375727960b01b60648201526084016101a0565b60035460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018a90529091169063a9059cbb906044016020604051808303816000875af1158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190610e4e565b610c525760405162461bcd60e51b815260206004820152602d60248201527f5377617020636f6e747261637420636f756c64206e6f74207472616e7366657260448201526c102220a6a6903a37903ab9b2b960991b60648201526084016101a0565b5050600180555050505050565b6000546001600160a01b03163314610c895760405162461bcd60e51b81526004016101a090610de3565b60405162461bcd60e51b815260206004820152601f60248201527f4f776e65722063616e6e6f74207472616e73666572206f776e6572736869700060448201526064016101a0565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60065460408051918252602082018390527f9c672c9f53cab91e279ccc66bc5055930e38b33d1c84ae0cc8cf0e3a1cb20376910160405180910390a1600655565b6001600160a01b038116811461035b57600080fd5b600060208284031215610d9657600080fd5b8135610da181610d6f565b9392505050565b600060208284031215610dba57600080fd5b5035919050565b60008060408385031215610dd457600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215610e2a57600080fd5b5051919050565b600060208284031215610e4357600080fd5b8151610da181610d6f565b600060208284031215610e6057600080fd5b81518015158114610da157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610ea057610ea0610e70565b500290565b60008219821115610eb857610eb8610e70565b50019056fea2646970667358221220bf49514cf6d8cfd71604eb22623bddcede566803d6ae541a6e5e046193b4faac64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20082,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20298,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10252,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "BDAMM",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)19173"
      },
      {
        "astId": 10255,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "DAMM",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)19173"
      },
      {
        "astId": 10258,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "USDC",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20)19173"
      },
      {
        "astId": 10260,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10262,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "redemptionUSDCPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10264,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "totalRedemptions",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10266,
        "contract": "contracts/DAMM/Redemption.sol:Redemption",
        "label": "totalUSDCFees",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)19173": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}