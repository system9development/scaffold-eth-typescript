{
  "address": "0x55c0181621eA76dB27a8c0b05085b96699Da8D30",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AcceptAdminPendingAdminCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualAddAmount",
          "type": "uint256"
        }
      ],
      "name": "AddReservesFactorFreshCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowCashNotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "BorrowComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateAccrueBorrowInterestFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateAccrueCollateralInterestFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCloseAmountIsUintMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCloseAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCollateralFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateLiquidatorIsBorrower",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRepayBorrowFreshFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateSeizeComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateSeizeLiquidatorIsBorrower",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "MintComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RedeemComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemTransferOutNotPossible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesAdminCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesCashNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesCashValidation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesFreshCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrowComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RepayBorrowFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetComptrollerOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetInterestRateModelFreshCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetInterestRateModelOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetPendingAdminOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorAdminCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorBoundsCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorFreshCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "TransferComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferTooMuch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NO_ERROR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "_addReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "compLikeDelegatee",
          "type": "address"
        }
      ],
      "name": "_delegateCompLikeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        }
      ],
      "name": "_reduceReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resignImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "_setComptroller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "_setInterestRateModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract CTokenInterface",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract EIP20NonStandardInterface",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sweepToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowsCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65de5a2319a2b0358473e0131b8fba22ad0adac5884e6094438046ea2fae7e82",
  "receipt": {
    "to": null,
    "from": "0xc8693923643D93877A8E5609EE119C6De6cb4F8A",
    "contractAddress": "0x55c0181621eA76dB27a8c0b05085b96699Da8D30",
    "transactionIndex": 93,
    "gasUsed": "3382132",
    "logsBloom": "0x
    "blockHash": "0xd296238131033bd0ae0180b6b2dce36f5218c3a7ddf497ecbc1a391795bc6485",
    "transactionHash": "0x65de5a2319a2b0358473e0131b8fba22ad0adac5884e6094438046ea2fae7e82",
    "logs": [],
    "blockNumber": 7674105,
    "cumulativeGasUsed": "21114334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7c055324d5fa21e6624c337957dc0210",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AcceptAdminPendingAdminCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAddAmount\",\"type\":\"uint256\"}],\"name\":\"AddReservesFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"BorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueBorrowInterestFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueCollateralInterestFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsUintMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCollateralFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateRepayBorrowFreshFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateSeizeComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateSeizeLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"MintComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RedeemComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTransferOutNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashValidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepayBorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayBorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetComptrollerOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetPendingAdminOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorBoundsCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"TransferComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferTooMuch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_ERROR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"_addReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"compLikeDelegatee\",\"type\":\"address\"}],\"name\":\"_delegateCompLikeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract EIP20NonStandardInterface\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_addReserves(uint256)\":{\"params\":{\"addAmount\":\"The amount fo underlying token to add as reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}},\"_delegateCompLikeTo(address)\":{\"details\":\"CTokens whose underlying are not CompLike should revert here\",\"params\":{\"compLikeDelegatee\":\"The address to delegate votes to\"}},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (uint256.max means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The number of tokens owned by `owner`\"}},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The amount of underlying owned by `owner`\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowRatePerBlock()\":{\"returns\":{\"_0\":\"The borrow interest rate per block, scaled by 1e18\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"returns\":{\"_0\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay, or -1 for the full outstanding amount\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay, or -1 for the full outstanding amount\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"supplyRatePerBlock()\":{\"returns\":{\"_0\":\"The supply interest rate per block, scaled by 1e18\"}},\"sweepToken(address)\":{\"params\":{\"token\":\"The address of the ERC-20 token to sweep\"}},\"totalBorrowsCurrent()\":{\"returns\":{\"_0\":\"The total borrows with interest\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"title\":\"Compound's CErc20Delegate Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewComptroller(address,address)\":{\"notice\":\"Event emitted when comptroller is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_addReserves(uint256)\":{\"notice\":\"The sender adds to reserves.\"},\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_delegateCompLikeTo(address)\":{\"notice\":\"Admin call to delegate the votes of the COMP-like underlying\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"constructor\":{\"notice\":\"Construct an empty delegate\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"implementation()\":{\"notice\":\"Implementation address for this contract\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"isCToken()\":{\"notice\":\"Indicator that this is a CToken contract (for inspection)\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"protocolSeizeShareMantissa()\":{\"notice\":\"Share of seized collateral that is added to reserves\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"sweepToken(address)\":{\"notice\":\"A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are delegated to\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CErc20Delegate.sol\":\"CErc20Delegate\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"contracts/CErc20.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ninterface CompLike {\\n  function delegate(address delegatee) external;\\n}\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ncontract CErc20 is CToken, CErc20Interface {\\n  /**\\n   * @notice Initialize the new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   * @param decimals_ ERC-20 decimal precision of this token\\n   */\\n  function initialize(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    // CToken initialize does the bulk of the work\\n    super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n    // Set underlying and sanity check it\\n    underlying = underlying_;\\n    EIP20Interface(underlying).totalSupply();\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint256 mintAmount) external override returns (uint256) {\\n    mintInternal(mintAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint256 redeemTokens) external override returns (uint256) {\\n    redeemInternal(redeemTokens);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint256 redeemAmount) external override returns (uint256) {\\n    redeemUnderlyingInternal(redeemAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint256 borrowAmount) external override returns (uint256) {\\n    borrowInternal(borrowAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint256 repayAmount) external override returns (uint256) {\\n    repayBorrowInternal(repayAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override returns (uint256) {\\n    repayBorrowBehalfInternal(borrower, repayAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external override returns (uint256) {\\n    liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\\n   * @param token The address of the ERC-20 token to sweep\\n   */\\n  function sweepToken(EIP20NonStandardInterface token) external override {\\n    require(msg.sender == admin, \\\"CErc20::sweepToken: only admin can sweep tokens\\\");\\n    require(address(token) != underlying, \\\"CErc20::sweepToken: can not sweep underlying token\\\");\\n    uint256 balance = token.balanceOf(address(this));\\n    token.transfer(admin, balance);\\n  }\\n\\n  /**\\n   * @notice The sender adds to reserves.\\n   * @param addAmount The amount fo underlying token to add as reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReserves(uint256 addAmount) external override returns (uint256) {\\n    return _addReservesInternal(addAmount);\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashPrior() internal view virtual override returns (uint256) {\\n    EIP20Interface token = EIP20Interface(underlying);\\n    return token.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual override returns (uint256) {\\n    // Read from storage once\\n    address underlying_ = underlying;\\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying_);\\n    uint256 balanceBefore = EIP20Interface(underlying_).balanceOf(address(this));\\n    token.transferFrom(from, address(this), amount);\\n\\n    bool success;\\n    assembly {\\n      switch returndatasize()\\n      case 0 {\\n        // This is a non-standard ERC-20\\n        success := not(0) // set success to true\\n      }\\n      case 32 {\\n        // This is a compliant ERC-20\\n        returndatacopy(0, 0, 32)\\n        success := mload(0) // Set `success = returndata` of override external call\\n      }\\n      default {\\n        // This is an excessively non-compliant ERC-20, revert.\\n        revert(0, 0)\\n      }\\n    }\\n    require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint256 balanceAfter = EIP20Interface(underlying_).balanceOf(address(this));\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address payable to, uint256 amount) internal virtual override {\\n    EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n    token.transfer(to, amount);\\n\\n    bool success;\\n    assembly {\\n      switch returndatasize()\\n      case 0 {\\n        // This is a non-standard ERC-20\\n        success := not(0) // set success to true\\n      }\\n      case 32 {\\n        // This is a compliant ERC-20\\n        returndatacopy(0, 0, 32)\\n        success := mload(0) // Set `success = returndata` of override external call\\n      }\\n      default {\\n        // This is an excessively non-compliant ERC-20, revert.\\n        revert(0, 0)\\n      }\\n    }\\n    require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\n  }\\n\\n  /**\\n   * @notice Admin call to delegate the votes of the COMP-like underlying\\n   * @param compLikeDelegatee The address to delegate votes to\\n   * @dev CTokens whose underlying are not CompLike should revert here\\n   */\\n  function _delegateCompLikeTo(address compLikeDelegatee) external {\\n    require(msg.sender == admin, \\\"only the admin may set the comp-like delegate\\\");\\n    CompLike(underlying).delegate(compLikeDelegatee);\\n  }\\n}\\n\",\"keccak256\":\"0x416dc361add9cebe26ecbd9b5121a1ca8ae9d58f5329ca205db05c84fd64e1ad\",\"license\":\"BSD-3-Clause\"},\"contracts/CErc20Delegate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CErc20.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Compound\\n */\\ncontract CErc20Delegate is CErc20, CDelegateInterface {\\n  /**\\n   * @notice Construct an empty delegate\\n   */\\n  constructor() {}\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) public virtual override {\\n    // Shh -- currently unused\\n    data;\\n\\n    // Shh -- we don't ever want this hook to be marked pure\\n    if (false) {\\n      implementation = address(0);\\n    }\\n\\n    require(msg.sender == admin, \\\"only the admin may call _becomeImplementation\\\");\\n  }\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() public virtual override {\\n    // Shh -- we don't ever want this hook to be marked pure\\n    if (false) {\\n      implementation = address(0);\\n    }\\n\\n    require(msg.sender == admin, \\\"only the admin may call _resignImplementation\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6c25d160b69e7c95ba8dc3a3885ec2245e665be74e1036ea768b74f3feb91bc9\",\"license\":\"BSD-3-Clause\"},\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, ExponentialNoError, TokenErrorReporter {\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return 0 if the transfer succeeded, else revert\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0 && spender != admin) {\\n      revert TransferComptrollerRejection(allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      revert TransferNotAllowed();\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src || spender == admin) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    uint256 allowanceNew = startingAllowance - tokens;\\n    uint256 srcTokensNew = accountTokens[src] - tokens;\\n    uint256 dstTokensNew = accountTokens[dst] + tokens;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (uint256.max means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (NO_ERROR, accountTokens[account], borrowBalanceStoredInternal(account), exchangeRateStoredInternal());\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view virtual returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    return borrowBalanceStoredInternal(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return 0;\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n    return principalTimesIndex / borrowSnapshot.interestIndex;\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    return exchangeRateStoredInternal();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStoredInternal() internal view virtual returns (uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n      uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) / _totalSupply;\\n\\n      return exchangeRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n    uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumberPrior == currentBlockNumber) {\\n      return NO_ERROR;\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n    uint256 borrowsPrior = totalBorrows;\\n    uint256 reservesPrior = totalReserves;\\n    uint256 borrowIndexPrior = borrowIndex;\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n    uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(Exp({ mantissa: reserveFactorMantissa }), interestAccumulated, reservesPrior);\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant {\\n    accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      revert MintComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert MintFreshnessCheck();\\n    }\\n\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     * And write them into storage\\n     */\\n    totalSupply = totalSupply + mintTokens;\\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, actualMintAmount, mintTokens);\\n    emit Transfer(address(this), minter, mintTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   */\\n  function redeemFresh(\\n    address payable redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      redeemTokens = redeemTokensIn;\\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\\n      redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n    if (allowed != 0) {\\n      revert RedeemComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RedeemFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < redeemAmount) {\\n      revert RedeemTransferOutNotPossible();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We write the previously calculated values into storage.\\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n     */\\n    totalSupply = totalSupply - redeemTokens;\\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), redeemTokens);\\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\n    accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    borrowFresh(payable(msg.sender), borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowFresh(address payable borrower, uint256 borrowAmount) internal {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      revert BorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert BorrowFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    if (getCashPrior() < borrowAmount) {\\n      revert BorrowCashNotAvailable();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowNew = accountBorrow + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n    uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n    uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n   * @return (uint) the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert RepayBorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RepayBorrowFreshnessCheck();\\n    }\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    uint256 repayAmountFinal = repayAmount == type(uint256).max ? accountBorrowsPrev : repayAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n    uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n    return actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant {\\n    require(msg.sender == admin, \\\"only dAMM Foundation can liquidate borrowers\\\");\\n    accrueInterest();\\n    uint256 error = cTokenCollateral.accrueInterest();\\n    if (error != NO_ERROR) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      revert LiquidateAccrueCollateralInterestFailed(error);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The lender of this cToken to be liquidated, in the case of dAMM\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert LiquidateComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert LiquidateFreshnessCheck();\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      revert LiquidateCollateralFreshnessCheck();\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateLiquidatorIsBorrower();\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      revert LiquidateCloseAmountIsZero();\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      revert LiquidateCloseAmountIsUintMax();\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    uint256 actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n    require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      require(cTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n    }\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant returns (uint256) {\\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      revert LiquidateSeizeComptrollerRejection(allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateSeizeLiquidatorIsBorrower();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    uint256 protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n    uint256 protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n    uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the calculated values into storage */\\n    totalReserves = totalReservesNew;\\n    totalSupply = totalSupply - protocolSeizeTokens;\\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint256) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      revert SetPendingAdminOwnerCheck();\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() external override returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      revert AcceptAdminPendingAdminCheck();\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = payable(address(0));\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Admin function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetComptrollerOwnerCheck();\\n    }\\n\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetReserveFactorAdminCheck();\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetReserveFactorFreshCheck();\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n      revert SetReserveFactorBoundsCheck();\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n   * @param addAmount Amount of addition to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReservesInternal(uint256 addAmount) internal nonReentrant returns (uint256) {\\n    accrueInterest();\\n\\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n    _addReservesFresh(addAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Add reserves by transferring from caller\\n   * @dev Requires fresh interest accrual\\n   * @param addAmount Amount of addition to reserves\\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n   */\\n  function _addReservesFresh(uint256 addAmount) internal returns (uint256, uint256) {\\n    // totalReserves + actualAddAmount\\n    uint256 totalReservesNew;\\n    uint256 actualAddAmount;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert AddReservesFactorFreshCheck(actualAddAmount);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the caller and the addAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional addAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *  it returns the amount actually transferred, in case of a fee.\\n     */\\n\\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n    totalReservesNew = totalReserves + actualAddAmount;\\n\\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\\n    totalReserves = totalReservesNew;\\n\\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n    /* Return (NO_ERROR, actualAddAmount) */\\n    return (NO_ERROR, actualAddAmount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert ReduceReservesAdminCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert ReduceReservesFreshCheck();\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      revert ReduceReservesCashNotAvailable();\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      revert ReduceReservesCashValidation();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    totalReservesNew = totalReserves - reduceAmount;\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(admin, reduceAmount);\\n\\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    accrueInterest();\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetInterestRateModelOwnerCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetInterestRateModelFreshCheck();\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant() {\\n    require(_notEntered, \\\"re-entered\\\");\\n    _notEntered = false;\\n    _;\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0xd52e153aa531b02c88ee513e472ad49bee4e89bcc2613f8da7b830fe6eecab32\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  // Maximum borrow rate that can ever be applied (.0005% / block)\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  // Maximum fraction of interest that can be set aside for reserves\\n  uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address payable public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address payable public pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint256) internal accountTokens;\\n\\n  // Approved token transfer amounts on behalf of others\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  // Mapping of account addresses to outstanding borrow balances\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /**\\n   * @notice Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  bool public constant isCToken = true;\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() external virtual returns (uint256);\\n\\n  function exchangeRateStored() external view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() external virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint256);\\n\\n  function _acceptAdmin() external virtual returns (uint256);\\n\\n  function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint256);\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n\\n  function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external virtual returns (uint256);\\n}\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementation(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0xaa6bfcd4fe0b67279a206fcd105ac409672f790c4a72c7c3ee4b1fb8db1fb4a1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function whitelistBorrowerAdd(address borrower) virtual external returns (uint);\\n    function setBorrowerLimits(address borrower, uint256 _borrowLimit) virtual external returns (uint);\\n    function getBorrowerLimits(address borrower) virtual external returns (uint);\\n\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xf134758e3111c2a25daed5c302a0abba27a7ae8190b3e2a0dc438c0b39cac602\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x1ff5606c9d7a11d704e5c4ff1be29f55527c2f6bd44a48fc24ee1dd62e9642c4\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x522854cfa3c975d7873c7c5f677508f86ddf11e0249c40887bb059469128c03e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_IMPLEMENTATION_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    SET_BORROWER_LIMIT_CHECK\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  uint256 public constant NO_ERROR = 0; // support legacy return codes\\n\\n  error TransferComptrollerRejection(uint256 errorCode);\\n  error TransferNotAllowed();\\n  error TransferNotEnough();\\n  error TransferTooMuch();\\n\\n  error MintComptrollerRejection(uint256 errorCode);\\n  error MintFreshnessCheck();\\n\\n  error RedeemComptrollerRejection(uint256 errorCode);\\n  error RedeemFreshnessCheck();\\n  error RedeemTransferOutNotPossible();\\n\\n  error BorrowComptrollerRejection(uint256 errorCode);\\n  error BorrowFreshnessCheck();\\n  error BorrowCashNotAvailable();\\n\\n  error RepayBorrowComptrollerRejection(uint256 errorCode);\\n  error RepayBorrowFreshnessCheck();\\n\\n  error LiquidateComptrollerRejection(uint256 errorCode);\\n  error LiquidateFreshnessCheck();\\n  error LiquidateCollateralFreshnessCheck();\\n  error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n  error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n  error LiquidateLiquidatorIsBorrower();\\n  error LiquidateCloseAmountIsZero();\\n  error LiquidateCloseAmountIsUintMax();\\n  error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n  error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n  error LiquidateSeizeLiquidatorIsBorrower();\\n\\n  error AcceptAdminPendingAdminCheck();\\n\\n  error SetComptrollerOwnerCheck();\\n  error SetPendingAdminOwnerCheck();\\n\\n  error SetReserveFactorAdminCheck();\\n  error SetReserveFactorFreshCheck();\\n  error SetReserveFactorBoundsCheck();\\n\\n  error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n  error ReduceReservesAdminCheck();\\n  error ReduceReservesFreshCheck();\\n  error ReduceReservesCashNotAvailable();\\n  error ReduceReservesCashValidation();\\n\\n  error SetInterestRateModelOwnerCheck();\\n  error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0x6548acd1dce9582500263f3d877b7e73b97e3b89117f2172f46e99e65c623d52\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0x40c03bbff754258487b13f71c145ae2d8239a5368744f0ab11b0cab44717d6d6\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x43727226518030081cec4d53d9f3813bf0c74150d076beb45460de4544a66edb\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613c3b806100206000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c806370a08231116101d3578063b71d1a0c11610104578063f2b3abbd116100a2578063f851a4401161007c578063f851a44014610727578063f8f9da281461073f578063fca7820b14610747578063fe9c44ae1461075a57600080fd5b8063f2b3abbd146106ee578063f3fdb15a14610701578063f5e3c4621461071457600080fd5b8063c5ebeaec116100de578063c5ebeaec14610687578063db006a751461069a578063dd62ed3e146106ad578063e9c714f2146106e657600080fd5b8063b71d1a0c14610639578063bd6d894d1461064c578063c37f68e21461065457600080fd5b806399d8c1b411610171578063a9059cbb1161014b578063a9059cbb14610602578063aa5af0fd14610615578063ae9d70b01461061e578063b2a02ff11461062657600080fd5b806399d8c1b4146105d4578063a0712d68146105e7578063a6afed95146105fa57600080fd5b8063852a12e3116101ad578063852a12e31461059d5780638f840ddd146105b057806395d89b41146105b957806395dd9193146105c157600080fd5b806370a082311461055957806373acee98146105825780637f1e06be1461058a57600080fd5b8063313ce567116102ad5780635c60da1b1161024b5780636752e702116102255780636752e7021461052757806369ab3250146105355780636c540baf1461053d5780636f307dc31461054657600080fd5b80635c60da1b146104ee5780635fe3b56714610501578063601a0bf11461051457600080fd5b80633e941010116102875780633e941010146104ac5780634576b5db146104bf57806347bd3718146104d257806356e67728146104db57600080fd5b8063313ce567146104725780633af9e669146104915780633b1d21a2146104a457600080fd5b806318160ddd1161031a5780631be19560116102f45780631be195601461040e57806323b872dd146104215780632608f81814610434578063267822471461044757600080fd5b806318160ddd146103ea578063182df0f5146103f35780631a31d465146103fb57600080fd5b806306fdde0314610362578063095ea7b3146103805780630e752702146103a3578063153ab505146103c4578063173b9904146103ce57806317bfdfbc146103d7575b600080fd5b61036a610762565b6040516103779190613693565b60405180910390f35b61039361038e3660046136fd565b6107f0565b6040519015158152602001610377565b6103b66103b1366004613729565b61085e565b604051908152602001610377565b6103cc610871565b005b6103b660085481565b6103b66103e5366004613742565b6108ed565b6103b6600d5481565b6103b6610940565b6103cc610409366004613821565b61094f565b6103cc61041c366004613742565b6109e4565b61039361042f3660046138d7565b610bb0565b6103b66104423660046136fd565b610c00565b60045461045a906001600160a01b031681565b6040516001600160a01b039091168152602001610377565b60035461047f9060ff1681565b60405160ff9091168152602001610377565b6103b661049f366004613742565b610c15565b6103b6610c5b565b6103b66104ba366004613729565b610c65565b6103b66104cd366004613742565b610c76565b6103b6600b5481565b6103cc6104e9366004613918565b610dc8565b60125461045a906001600160a01b031681565b60055461045a906001600160a01b031681565b6103b6610522366004613729565b610e40565b6103b6666379da05b6000081565b6103b6600081565b6103b660095481565b60115461045a906001600160a01b031681565b6103b6610567366004613742565b6001600160a01b03166000908152600e602052604090205490565b6103b6610e7f565b6103cc610598366004613742565b610ec9565b6103b66105ab366004613729565b610fa0565b6103b6600c5481565b61036a610fab565b6103b66105cf366004613742565b610fb8565b6103cc6105e2366004613961565b610fc3565b6103b66105f5366004613729565b61121e565b6103b6611229565b6103936106103660046136fd565b611416565b6103b6600a5481565b6103b6611465565b6103b66106343660046138d7565b6114fd565b6103b6610647366004613742565b61154c565b6103b66115d9565b610667610662366004613742565b611629565b604080519485526020850193909352918301526060820152608001610377565b6103b6610695366004613729565b61166a565b6103b66106a8366004613729565b611675565b6103b66106bb366004613a03565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6103b6611680565b6103b66106fc366004613742565b611794565b60065461045a906001600160a01b031681565b6103b6610722366004613a3c565b6117a8565b60035461045a9061010090046001600160a01b031681565b6103b66117bf565b6103b6610755366004613729565b611812565b610393600181565b6001805461076f90613a7e565b80601f016020809104026020016040519081016040528092919081815260200182805461079b90613a7e565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061084c9087815260200190565b60405180910390a35060019392505050565b600061086982611851565b506000919050565b60035461010090046001600160a01b031633146108eb5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084015b60405180910390fd5b565b6000805460ff166109105760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610922611229565b5061092c82610fb8565b90506000805460ff19166001179055919050565b600061094a6118a2565b905090565b61095d868686868686610fc3565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190613adc565b5050505050505050565b60035461010090046001600160a01b03163314610a5b5760405162461bcd60e51b815260206004820152602f60248201527f4345726332303a3a7377656570546f6b656e3a206f6e6c792061646d696e206360448201526e616e20737765657020746f6b656e7360881b60648201526084016108e2565b6011546001600160a01b0390811690821603610ad45760405162461bcd60e51b815260206004820152603260248201527f4345726332303a3a7377656570546f6b656e3a2063616e206e6f74207377656560448201527138103ab73232b9363cb4b733903a37b5b2b760711b60648201526084016108e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190613adc565b60035460405163a9059cbb60e01b81526001600160a01b03610100909204821660048201526024810183905291925083169063a9059cbb90604401600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505050565b6000805460ff16610bd35760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19168155610be93386868661190e565b1490506000805460ff191660011790559392505050565b6000610c0c8383611b79565b50600092915050565b6000806040518060200160405280610c2b6115d9565b90526001600160a01b0384166000908152600e6020526040902054909150610c54908290611bcb565b9392505050565b600061094a611beb565b6000610c7082611c60565b92915050565b60035460009061010090046001600160a01b03163314610ca95760405163d219dc1f60e01b815260040160405180910390fd5b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd29160048083019260209291908290030181865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190613af5565b610d635760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016108e2565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a150600092915050565b60035461010090046001600160a01b03163314610e3d5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084016108e2565b50565b6000805460ff16610e635760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610e75611229565b5061092c82611cb7565b6000805460ff16610ea25760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610eb4611229565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314610f3e5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d6179207365742074686520636f6d702d60448201526c6c696b652064656c656761746560981b60648201526084016108e2565b6011546040516317066a5760e21b81526001600160a01b03838116600483015290911690635c19a95c90602401600060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b5050505050565b600061086982611dd8565b6002805461076f90613a7e565b6000610c7082611e29565b60035461010090046001600160a01b0316331461102e5760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d616044820152631c9ad95d60e21b60648201526084016108e2565b60095415801561103e5750600a54155b6110965760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b60648201526084016108e2565b6007849055836111015760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b60648201526084016108e2565b600061110c87610c76565b9050801561115c5760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c656400000000000060448201526064016108e2565b43600955670de0b6b3a7640000600a5561117586611e75565b905080156111d05760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b60648201526084016108e2565b83516111e3906001906020870190613603565b5082516111f7906002906020860190613603565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b600061086982611fea565b60095460009043908181036112415760009250505090565b600061124b611beb565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190613adc565b905065048c273950008111156113315760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c7920686967680000000060448201526064016108e2565b600061133d8789613b2d565b9050600061135960405180602001604052808581525083612029565b905060006113678288611bcb565b905060006113758883613b44565b905060006113946040518060200160405280600854815250848a61205a565b905060006113a385898a61205a565b60098e9055600a819055600b849055600c839055604080518d815260208101879052908101829052606081018590529091507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009d505050505050505050505050505090565b6000805460ff166114395760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916815561144f3380868661190e565b1490506000805460ff1916600117905592915050565b6006546000906001600160a01b031663b8168816611481611beb565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190613adc565b6000805460ff166115205760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff191690556115363385858561207b565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461157f57604051635cb56c2b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99101610db7565b6000805460ff166115fc5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561160e611229565b50611617610940565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190819061165387611e29565b61165b6118a2565b93509350935093509193509193565b6000610869826122f9565b600061086982612338565b6004546000906001600160a01b03163314158061169b575033155b156116b957604051631ba24f2960e21b815260040160405180910390fd5b60038054600480546001600160a01b0380821661010081810274ffffffffffffffffffffffffffffffffffffffff0019871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401529290917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a160009250505090565b600061179e611229565b50610c7082611e75565b60006117b5848484612379565b5060009392505050565b6006546000906001600160a01b03166315f240536117db611beb565b600b54600c546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016114bc565b6000805460ff166118355760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611847611229565b5061092c826124cb565b60005460ff166118735760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611885611229565b50611891333383612587565b50506000805460ff19166001179055565b600d546000908082036118b757505060075490565b60006118c1611beb565b90506000600c54600b54836118d69190613b44565b6118e09190613b2d565b90506000836118f7670de0b6b3a764000084613b5c565b6119019190613b7b565b95945050505050565b5090565b6005546040516317b9b84b60e31b81523060048201526001600160a01b038581166024830152848116604483015260648201849052600092839291169063bdcdc258906084016020604051808303816000875af1158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190613adc565b905080158015906119bb57506003546001600160a01b038781166101009092041614155b156119dc5760405163089d427760e11b8152600481018290526024016108e2565b836001600160a01b0316856001600160a01b031603611a0e57604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b03161480611a4257506003546001600160a01b0388811661010090920416145b15611a505750600019611a78565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b6000611a848583613b2d565b6001600160a01b0388166000908152600e602052604081205491925090611aac908790613b2d565b6001600160a01b0388166000908152600e602052604081205491925090611ad4908890613b44565b6001600160a01b03808b166000908152600e6020526040808220869055918b1681522081905590506000198414611b2e576001600160a01b03808a166000908152600f60209081526040808320938e168352929052208390555b876001600160a01b0316896001600160a01b0316600080516020613be683398151915289604051611b6191815260200190565b60405180910390a35060009998505050505050505050565b60005460ff16611b9b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611bad611229565b50611bb9338383612587565b50506000805460ff1916600117905550565b600080611bd88484612029565b9050611be381612730565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a9190613adc565b91505090565b6000805460ff16611c835760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611c95611229565b50611c9f82612748565b5050600090506000805460ff19166001179055919050565b600354600090819061010090046001600160a01b03163314611cec57604051630f7e5e6d60e41b815260040160405180910390fd5b4360095414611d0e57604051630dff50cb60e41b815260040160405180910390fd5b82611d17611beb565b1015611d3657604051633345e99960e01b815260040160405180910390fd5b600c54831115611d59576040516378d2980560e11b815260040160405180910390fd5b82600c54611d679190613b2d565b600c819055600354909150611d8a9061010090046001600160a01b0316846127e1565b600354604080516101009092046001600160a01b031682526020820185905281018290527f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e90606001610db7565b60005460ff16611dfa5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611e0c611229565b50611e19336000836128cb565b506000805460ff19166001179055565b6001600160a01b038116600090815260106020526040812080548203611e525750600092915050565b600a548154600091611e6391613b5c565b9050816001015481611be39190613b7b565b600354600090819061010090046001600160a01b03163314611eaa5760405163407fded560e01b815260040160405180910390fd5b4360095414611ecc57604051630be2a5cb60e11b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f469190613af5565b611f925760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016108e2565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269101610db7565b60005460ff1661200c5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561201e611229565b50611e193382612bb7565b6040805160208101909152600081526040518060200160405280612051856000015185612d73565b90529392505050565b6000806120678585612029565b905061190161207582612730565b84612d7f565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af11580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190613adc565b9050801561212d576040516363e00e3360e11b8152600481018290526024016108e2565b836001600160a01b0316836001600160a01b03160361215f57604051633a94626760e11b815260040160405180910390fd5b6000612180836040518060200160405280666379da05b60000815250612d8b565b9050600061218e8285613b2d565b9050600060405180602001604052806121a56118a2565b9052905060006121b58285611bcb565b9050600081600c546121c79190613b44565b600c819055600d549091506121dd908690613b2d565b600d556001600160a01b0388166000908152600e6020526040902054612204908890613b2d565b6001600160a01b03808a166000908152600e602052604080822093909355908b1681522054612234908590613b44565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a1690600080516020613be6833981519152906122769088815260200190565b60405180910390a360405185815230906001600160a01b038a1690600080516020613be68339815191529060200160405180910390a360408051308152602081018490529081018290527fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a150505050505050505050565b60005460ff1661231b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561232d611229565b50611e193382612dae565b60005460ff1661235a5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561236c611229565b50611e19338260006128cb565b60005460ff1661239b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905560035461010090046001600160a01b031633146124195760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792064414d4d20466f756e646174696f6e2063616e206c69717569646160448201526b746520626f72726f7765727360a01b60648201526084016108e2565b612421611229565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190613adc565b905080156124ac57604051633eea49b760e11b8152600481018290526024016108e2565b6124b833858585612f4d565b50506000805460ff191660011790555050565b60035460009061010090046001600160a01b031633146124fe57604051631205b57b60e11b815260040160405180910390fd5b436009541461252057604051637dfca6b760e11b815260040160405180910390fd5b670de0b6b3a76400008211156125495760405163717220f360e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f8214609101610db7565b600554604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283929116906324008a62906084016020604051808303816000875af11580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126109190613adc565b9050801561263457604051638c81362d60e01b8152600481018290526024016108e2565b43600954146126565760405163c9021e2f60e01b815260040160405180910390fd5b600061266185611e29565b9050600060001985146126745784612676565b815b905060006126848883613407565b905060006126928285613b2d565b9050600082600b546126a49190613b2d565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b8051600090610c7090670de0b6b3a764000090613b7b565b60008080804360095414612772576040516338acf79960e01b8152600481018290526024016108e2565b61277c3386613407565b905080600c5461278c9190613b44565b600c81905560408051338152602081018490529081018290529092507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a160009590945092505050565b60115460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905290911690819063a9059cbb90604401600060405180830381600087803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b5050505060003d60008114612861576020811461286b57600080fd5b6000199150612877565b60206000803e60005191505b50806128c55760405162461bcd60e51b815260206004820152601960248201527f544f4b454e5f5452414e534645525f4f55545f4641494c45440000000000000060448201526064016108e2565b50505050565b8115806128d6575080155b61293f5760405162461bcd60e51b815260206004820152603460248201527f6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416044820152736d6f756e74496e206d757374206265207a65726f60601b60648201526084016108e2565b600060405180602001604052806129546118a2565b9052905060008084156129755784915061296e8386611bcb565b9050612985565b61297f84846135de565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d91906129ba9030908b908890600401613b9d565b6020604051808303816000875af11580156129d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fd9190613adc565b90508015612a215760405163480f424760e01b8152600481018290526024016108e2565b4360095414612a43576040516397b5cfcd60e01b815260040160405180910390fd5b81612a4c611beb565b1015612a6b576040516391240a1b60e01b815260040160405180910390fd5b82600d54612a799190613b2d565b600d556001600160a01b0387166000908152600e6020526040902054612aa0908490613b2d565b6001600160a01b0388166000908152600e6020526040902055612ac387836127e1565b60405183815230906001600160a01b03891690600080516020613be68339815191529060200160405180910390a3604080516001600160a01b0389168152602081018490529081018490527fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9299060600160405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b158015612b9657600080fd5b505af1158015612baa573d6000803e3d6000fd5b5050505050505050505050565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e190612bec90309087908790600401613b9d565b6020604051808303816000875af1158015612c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2f9190613adc565b90508015612c53576040516349abd4fd60e01b8152600481018290526024016108e2565b4360095414612c75576040516338d8859760e01b815260040160405180910390fd5b60006040518060200160405280612c8a6118a2565b905290506000612c9a8585613407565b90506000612ca882846135de565b905080600d54612cb89190613b44565b600d556001600160a01b0386166000908152600e6020526040902054612cdf908290613b44565b6001600160a01b0387166000818152600e60209081526040918290209390935580519182529181018490529081018290527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9060600160405180910390a16040518181526001600160a01b038716903090600080516020613be68339815191529060200160405180910390a3505050505050565b6000610c548284613b5c565b6000610c548284613b44565b6000670de0b6b3a7640000612da4848460000151612d73565b610c549190613b7b565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c90612de390309087908790600401613b9d565b6020604051808303816000875af1158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190613adc565b90508015612e4a5760405163918db40f60e01b8152600481018290526024016108e2565b4360095414612e6c57604051630e8d8c6160e21b815260040160405180910390fd5b81612e75611beb565b1015612e94576040516348c2588160e01b815260040160405180910390fd5b6000612e9f84611e29565b90506000612ead8483613b44565b9050600084600b54612ebf9190613b44565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b8190559050612ef486866127e1565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdb9190613adc565b90508015612fff57604051630a14d17960e11b8152600481018290526024016108e2565b4360095414613021576040516380965b1b60e01b815260040160405180910390fd5b43826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190613adc565b146130a257604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b0316036130d457604051631bd1a62160e21b815260040160405180910390fd5b826000036130f55760405163d29da7ef60e01b815260040160405180910390fd5b600019830361311757604051635982c5bb60e11b815260040160405180910390fd5b6000613124868686612587565b60055460405163c488847b60e01b815291925060009182916001600160a01b03169063c488847b9061315e90309089908890600401613b9d565b6040805180830381865afa15801561317a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319e9190613bc1565b915091506000821461320e5760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b60648201526084016108e2565b6040516370a0823160e01b81526001600160a01b0388811660048301528291908716906370a0823190602401602060405180830381865afa158015613257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327b9190613adc565b10156132c95760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d554348000000000000000060448201526064016108e2565b306001600160a01b038616036132ea576132e53089898461207b565b6133a4565b60405163b2a02ff160e01b81526000906001600160a01b0387169063b2a02ff19061331d908c908c908790600401613b9d565b6020604051808303816000875af115801561333c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133609190613adc565b146133a45760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b60448201526064016108e2565b604080516001600160a01b038a811682528981166020830152818301869052871660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a15050505050505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316908190839082906370a0823190602401602060405180830381865afa158015613456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347a9190613adc565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd906134ad90899030908a90600401613b9d565b600060405180830381600087803b1580156134c757600080fd5b505af11580156134db573d6000803e3d6000fd5b5050505060003d600081146134f7576020811461350157600080fd5b600019915061350d565b60206000803e60005191505b508061355b5760405162461bcd60e51b815260206004820152601860248201527f544f4b454e5f5452414e534645525f494e5f4641494c4544000000000000000060448201526064016108e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156135a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c69190613adc565b90506135d28382613b2d565b98975050505050505050565b6000610c546135f584670de0b6b3a7640000612d73565b83516000610c548284613b7b565b82805461360f90613a7e565b90600052602060002090601f0160209004810192826136315760008555613677565b82601f1061364a57805160ff1916838001178555613677565b82800160010185558215613677579182015b8281111561367757825182559160200191906001019061365c565b5061190a9291505b8082111561190a576000815560010161367f565b600060208083528351808285015260005b818110156136c0578581018301518582016040015282016136a4565b818111156136d2576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610e3d57600080fd5b6000806040838503121561371057600080fd5b823561371b816136e8565b946020939093013593505050565b60006020828403121561373b57600080fd5b5035919050565b60006020828403121561375457600080fd5b8135610c54816136e8565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156137905761379061375f565b604051601f8501601f19908116603f011681019082821181831017156137b8576137b861375f565b816040528093508581528686860111156137d157600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126137fc57600080fd5b610c5483833560208501613775565b803560ff8116811461381c57600080fd5b919050565b600080600080600080600060e0888a03121561383c57600080fd5b8735613847816136e8565b96506020880135613857816136e8565b95506040880135613867816136e8565b945060608801359350608088013567ffffffffffffffff8082111561388b57600080fd5b6138978b838c016137eb565b945060a08a01359150808211156138ad57600080fd5b506138ba8a828b016137eb565b9250506138c960c0890161380b565b905092959891949750929550565b6000806000606084860312156138ec57600080fd5b83356138f7816136e8565b92506020840135613907816136e8565b929592945050506040919091013590565b60006020828403121561392a57600080fd5b813567ffffffffffffffff81111561394157600080fd5b8201601f8101841361395257600080fd5b611be384823560208401613775565b60008060008060008060c0878903121561397a57600080fd5b8635613985816136e8565b95506020870135613995816136e8565b945060408701359350606087013567ffffffffffffffff808211156139b957600080fd5b6139c58a838b016137eb565b945060808901359150808211156139db57600080fd5b506139e889828a016137eb565b9250506139f760a0880161380b565b90509295509295509295565b60008060408385031215613a1657600080fd5b8235613a21816136e8565b91506020830135613a31816136e8565b809150509250929050565b600080600060608486031215613a5157600080fd5b8335613a5c816136e8565b9250602084013591506040840135613a73816136e8565b809150509250925092565b600181811c90821680613a9257607f821691505b602082108103613ab257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b600060208284031215613aee57600080fd5b5051919050565b600060208284031215613b0757600080fd5b81518015158114610c5457600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613b3f57613b3f613b17565b500390565b60008219821115613b5757613b57613b17565b500190565b6000816000190483118215151615613b7657613b76613b17565b500290565b600082613b9857634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008060408385031215613bd457600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e5a911863d6fd49f0990135cc15be471834138917d0c9fccc3ef6b12386b51ce64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061035d5760003560e01c806370a08231116101d3578063b71d1a0c11610104578063f2b3abbd116100a2578063f851a4401161007c578063f851a44014610727578063f8f9da281461073f578063fca7820b14610747578063fe9c44ae1461075a57600080fd5b8063f2b3abbd146106ee578063f3fdb15a14610701578063f5e3c4621461071457600080fd5b8063c5ebeaec116100de578063c5ebeaec14610687578063db006a751461069a578063dd62ed3e146106ad578063e9c714f2146106e657600080fd5b8063b71d1a0c14610639578063bd6d894d1461064c578063c37f68e21461065457600080fd5b806399d8c1b411610171578063a9059cbb1161014b578063a9059cbb14610602578063aa5af0fd14610615578063ae9d70b01461061e578063b2a02ff11461062657600080fd5b806399d8c1b4146105d4578063a0712d68146105e7578063a6afed95146105fa57600080fd5b8063852a12e3116101ad578063852a12e31461059d5780638f840ddd146105b057806395d89b41146105b957806395dd9193146105c157600080fd5b806370a082311461055957806373acee98146105825780637f1e06be1461058a57600080fd5b8063313ce567116102ad5780635c60da1b1161024b5780636752e702116102255780636752e7021461052757806369ab3250146105355780636c540baf1461053d5780636f307dc31461054657600080fd5b80635c60da1b146104ee5780635fe3b56714610501578063601a0bf11461051457600080fd5b80633e941010116102875780633e941010146104ac5780634576b5db146104bf57806347bd3718146104d257806356e67728146104db57600080fd5b8063313ce567146104725780633af9e669146104915780633b1d21a2146104a457600080fd5b806318160ddd1161031a5780631be19560116102f45780631be195601461040e57806323b872dd146104215780632608f81814610434578063267822471461044757600080fd5b806318160ddd146103ea578063182df0f5146103f35780631a31d465146103fb57600080fd5b806306fdde0314610362578063095ea7b3146103805780630e752702146103a3578063153ab505146103c4578063173b9904146103ce57806317bfdfbc146103d7575b600080fd5b61036a610762565b6040516103779190613693565b60405180910390f35b61039361038e3660046136fd565b6107f0565b6040519015158152602001610377565b6103b66103b1366004613729565b61085e565b604051908152602001610377565b6103cc610871565b005b6103b660085481565b6103b66103e5366004613742565b6108ed565b6103b6600d5481565b6103b6610940565b6103cc610409366004613821565b61094f565b6103cc61041c366004613742565b6109e4565b61039361042f3660046138d7565b610bb0565b6103b66104423660046136fd565b610c00565b60045461045a906001600160a01b031681565b6040516001600160a01b039091168152602001610377565b60035461047f9060ff1681565b60405160ff9091168152602001610377565b6103b661049f366004613742565b610c15565b6103b6610c5b565b6103b66104ba366004613729565b610c65565b6103b66104cd366004613742565b610c76565b6103b6600b5481565b6103cc6104e9366004613918565b610dc8565b60125461045a906001600160a01b031681565b60055461045a906001600160a01b031681565b6103b6610522366004613729565b610e40565b6103b6666379da05b6000081565b6103b6600081565b6103b660095481565b60115461045a906001600160a01b031681565b6103b6610567366004613742565b6001600160a01b03166000908152600e602052604090205490565b6103b6610e7f565b6103cc610598366004613742565b610ec9565b6103b66105ab366004613729565b610fa0565b6103b6600c5481565b61036a610fab565b6103b66105cf366004613742565b610fb8565b6103cc6105e2366004613961565b610fc3565b6103b66105f5366004613729565b61121e565b6103b6611229565b6103936106103660046136fd565b611416565b6103b6600a5481565b6103b6611465565b6103b66106343660046138d7565b6114fd565b6103b6610647366004613742565b61154c565b6103b66115d9565b610667610662366004613742565b611629565b604080519485526020850193909352918301526060820152608001610377565b6103b6610695366004613729565b61166a565b6103b66106a8366004613729565b611675565b6103b66106bb366004613a03565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b6103b6611680565b6103b66106fc366004613742565b611794565b60065461045a906001600160a01b031681565b6103b6610722366004613a3c565b6117a8565b60035461045a9061010090046001600160a01b031681565b6103b66117bf565b6103b6610755366004613729565b611812565b610393600181565b6001805461076f90613a7e565b80601f016020809104026020016040519081016040528092919081815260200182805461079b90613a7e565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061084c9087815260200190565b60405180910390a35060019392505050565b600061086982611851565b506000919050565b60035461010090046001600160a01b031633146108eb5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084015b60405180910390fd5b565b6000805460ff166109105760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610922611229565b5061092c82610fb8565b90506000805460ff19166001179055919050565b600061094a6118a2565b905090565b61095d868686868686610fc3565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190613adc565b5050505050505050565b60035461010090046001600160a01b03163314610a5b5760405162461bcd60e51b815260206004820152602f60248201527f4345726332303a3a7377656570546f6b656e3a206f6e6c792061646d696e206360448201526e616e20737765657020746f6b656e7360881b60648201526084016108e2565b6011546001600160a01b0390811690821603610ad45760405162461bcd60e51b815260206004820152603260248201527f4345726332303a3a7377656570546f6b656e3a2063616e206e6f74207377656560448201527138103ab73232b9363cb4b733903a37b5b2b760711b60648201526084016108e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190613adc565b60035460405163a9059cbb60e01b81526001600160a01b03610100909204821660048201526024810183905291925083169063a9059cbb90604401600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050505050565b6000805460ff16610bd35760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19168155610be93386868661190e565b1490506000805460ff191660011790559392505050565b6000610c0c8383611b79565b50600092915050565b6000806040518060200160405280610c2b6115d9565b90526001600160a01b0384166000908152600e6020526040902054909150610c54908290611bcb565b9392505050565b600061094a611beb565b6000610c7082611c60565b92915050565b60035460009061010090046001600160a01b03163314610ca95760405163d219dc1f60e01b815260040160405180910390fd5b60055460408051623f1ee960e11b815290516001600160a01b0392831692851691627e3dd29160048083019260209291908290030181865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190613af5565b610d635760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016108e2565b600580546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d91015b60405180910390a150600092915050565b60035461010090046001600160a01b03163314610e3d5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b60648201526084016108e2565b50565b6000805460ff16610e635760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610e75611229565b5061092c82611cb7565b6000805460ff16610ea25760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055610eb4611229565b5050600b546000805460ff1916600117905590565b60035461010090046001600160a01b03163314610f3e5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d6179207365742074686520636f6d702d60448201526c6c696b652064656c656761746560981b60648201526084016108e2565b6011546040516317066a5760e21b81526001600160a01b03838116600483015290911690635c19a95c90602401600060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b5050505050565b600061086982611dd8565b6002805461076f90613a7e565b6000610c7082611e29565b60035461010090046001600160a01b0316331461102e5760405162461bcd60e51b8152602060048201526024808201527f6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d616044820152631c9ad95d60e21b60648201526084016108e2565b60095415801561103e5750600a54155b6110965760405162461bcd60e51b815260206004820152602360248201527f6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6044820152626e636560e81b60648201526084016108e2565b6007849055836111015760405162461bcd60e51b815260206004820152603060248201527f696e697469616c2065786368616e67652072617465206d75737420626520677260448201526f32b0ba32b9103a3430b7103d32b9379760811b60648201526084016108e2565b600061110c87610c76565b9050801561115c5760405162461bcd60e51b815260206004820152601a60248201527f73657474696e6720636f6d7074726f6c6c6572206661696c656400000000000060448201526064016108e2565b43600955670de0b6b3a7640000600a5561117586611e75565b905080156111d05760405162461bcd60e51b815260206004820152602260248201527f73657474696e6720696e7465726573742072617465206d6f64656c206661696c604482015261195960f21b60648201526084016108e2565b83516111e3906001906020870190613603565b5082516111f7906002906020860190613603565b50506003805460ff90921660ff199283161790556000805490911660011790555050505050565b600061086982611fea565b60095460009043908181036112415760009250505090565b600061124b611beb565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190613adc565b905065048c273950008111156113315760405162461bcd60e51b815260206004820152601c60248201527f626f72726f772072617465206973206162737572646c7920686967680000000060448201526064016108e2565b600061133d8789613b2d565b9050600061135960405180602001604052808581525083612029565b905060006113678288611bcb565b905060006113758883613b44565b905060006113946040518060200160405280600854815250848a61205a565b905060006113a385898a61205a565b60098e9055600a819055600b849055600c839055604080518d815260208101879052908101829052606081018590529091507f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009d505050505050505050505050505090565b6000805460ff166114395760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916815561144f3380868661190e565b1490506000805460ff1916600117905592915050565b6006546000906001600160a01b031663b8168816611481611beb565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190613adc565b6000805460ff166115205760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff191690556115363385858561207b565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461157f57604051635cb56c2b60e01b815260040160405180910390fd5b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99101610db7565b6000805460ff166115fc5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561160e611229565b50611617610940565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190819061165387611e29565b61165b6118a2565b93509350935093509193509193565b6000610869826122f9565b600061086982612338565b6004546000906001600160a01b03163314158061169b575033155b156116b957604051631ba24f2960e21b815260040160405180910390fd5b60038054600480546001600160a01b0380821661010081810274ffffffffffffffffffffffffffffffffffffffff0019871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401529290917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a160009250505090565b600061179e611229565b50610c7082611e75565b60006117b5848484612379565b5060009392505050565b6006546000906001600160a01b03166315f240536117db611beb565b600b54600c546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016114bc565b6000805460ff166118355760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611847611229565b5061092c826124cb565b60005460ff166118735760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611885611229565b50611891333383612587565b50506000805460ff19166001179055565b600d546000908082036118b757505060075490565b60006118c1611beb565b90506000600c54600b54836118d69190613b44565b6118e09190613b2d565b90506000836118f7670de0b6b3a764000084613b5c565b6119019190613b7b565b95945050505050565b5090565b6005546040516317b9b84b60e31b81523060048201526001600160a01b038581166024830152848116604483015260648201849052600092839291169063bdcdc258906084016020604051808303816000875af1158015611973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119979190613adc565b905080158015906119bb57506003546001600160a01b038781166101009092041614155b156119dc5760405163089d427760e11b8152600481018290526024016108e2565b836001600160a01b0316856001600160a01b031603611a0e57604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b03161480611a4257506003546001600160a01b0388811661010090920416145b15611a505750600019611a78565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b6000611a848583613b2d565b6001600160a01b0388166000908152600e602052604081205491925090611aac908790613b2d565b6001600160a01b0388166000908152600e602052604081205491925090611ad4908890613b44565b6001600160a01b03808b166000908152600e6020526040808220869055918b1681522081905590506000198414611b2e576001600160a01b03808a166000908152600f60209081526040808320938e168352929052208390555b876001600160a01b0316896001600160a01b0316600080516020613be683398151915289604051611b6191815260200190565b60405180910390a35060009998505050505050505050565b60005460ff16611b9b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611bad611229565b50611bb9338383612587565b50506000805460ff1916600117905550565b600080611bd88484612029565b9050611be381612730565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a9190613adc565b91505090565b6000805460ff16611c835760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611c95611229565b50611c9f82612748565b5050600090506000805460ff19166001179055919050565b600354600090819061010090046001600160a01b03163314611cec57604051630f7e5e6d60e41b815260040160405180910390fd5b4360095414611d0e57604051630dff50cb60e41b815260040160405180910390fd5b82611d17611beb565b1015611d3657604051633345e99960e01b815260040160405180910390fd5b600c54831115611d59576040516378d2980560e11b815260040160405180910390fd5b82600c54611d679190613b2d565b600c819055600354909150611d8a9061010090046001600160a01b0316846127e1565b600354604080516101009092046001600160a01b031682526020820185905281018290527f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e90606001610db7565b60005460ff16611dfa5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff19169055611e0c611229565b50611e19336000836128cb565b506000805460ff19166001179055565b6001600160a01b038116600090815260106020526040812080548203611e525750600092915050565b600a548154600091611e6391613b5c565b9050816001015481611be39190613b7b565b600354600090819061010090046001600160a01b03163314611eaa5760405163407fded560e01b815260040160405180910390fd5b4360095414611ecc57604051630be2a5cb60e11b815260040160405180910390fd5b600660009054906101000a90046001600160a01b03169050826001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f469190613af5565b611f925760405162461bcd60e51b815260206004820152601c60248201527f6d61726b6572206d6574686f642072657475726e65642066616c73650000000060448201526064016108e2565b600680546001600160a01b0319166001600160a01b0385811691821790925560408051928416835260208301919091527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f9269101610db7565b60005460ff1661200c5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561201e611229565b50611e193382612bb7565b6040805160208101909152600081526040518060200160405280612051856000015185612d73565b90529392505050565b6000806120678585612029565b905061190161207582612730565b84612d7f565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af11580156120e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121099190613adc565b9050801561212d576040516363e00e3360e11b8152600481018290526024016108e2565b836001600160a01b0316836001600160a01b03160361215f57604051633a94626760e11b815260040160405180910390fd5b6000612180836040518060200160405280666379da05b60000815250612d8b565b9050600061218e8285613b2d565b9050600060405180602001604052806121a56118a2565b9052905060006121b58285611bcb565b9050600081600c546121c79190613b44565b600c819055600d549091506121dd908690613b2d565b600d556001600160a01b0388166000908152600e6020526040902054612204908890613b2d565b6001600160a01b03808a166000908152600e602052604080822093909355908b1681522054612234908590613b44565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a1690600080516020613be6833981519152906122769088815260200190565b60405180910390a360405185815230906001600160a01b038a1690600080516020613be68339815191529060200160405180910390a360408051308152602081018490529081018290527fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a150505050505050505050565b60005460ff1661231b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561232d611229565b50611e193382612dae565b60005460ff1661235a5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905561236c611229565b50611e19338260006128cb565b60005460ff1661239b5760405162461bcd60e51b81526004016108e290613ab8565b6000805460ff1916905560035461010090046001600160a01b031633146124195760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792064414d4d20466f756e646174696f6e2063616e206c69717569646160448201526b746520626f72726f7765727360a01b60648201526084016108e2565b612421611229565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124889190613adc565b905080156124ac57604051633eea49b760e11b8152600481018290526024016108e2565b6124b833858585612f4d565b50506000805460ff191660011790555050565b60035460009061010090046001600160a01b031633146124fe57604051631205b57b60e11b815260040160405180910390fd5b436009541461252057604051637dfca6b760e11b815260040160405180910390fd5b670de0b6b3a76400008211156125495760405163717220f360e11b815260040160405180910390fd5b600880549083905560408051828152602081018590527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f8214609101610db7565b600554604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283929116906324008a62906084016020604051808303816000875af11580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126109190613adc565b9050801561263457604051638c81362d60e01b8152600481018290526024016108e2565b43600954146126565760405163c9021e2f60e01b815260040160405180910390fd5b600061266185611e29565b9050600060001985146126745784612676565b815b905060006126848883613407565b905060006126928285613b2d565b9050600082600b546126a49190613b2d565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b8051600090610c7090670de0b6b3a764000090613b7b565b60008080804360095414612772576040516338acf79960e01b8152600481018290526024016108e2565b61277c3386613407565b905080600c5461278c9190613b44565b600c81905560408051338152602081018490529081018290529092507fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a160009590945092505050565b60115460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905290911690819063a9059cbb90604401600060405180830381600087803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b5050505060003d60008114612861576020811461286b57600080fd5b6000199150612877565b60206000803e60005191505b50806128c55760405162461bcd60e51b815260206004820152601960248201527f544f4b454e5f5452414e534645525f4f55545f4641494c45440000000000000060448201526064016108e2565b50505050565b8115806128d6575080155b61293f5760405162461bcd60e51b815260206004820152603460248201527f6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416044820152736d6f756e74496e206d757374206265207a65726f60601b60648201526084016108e2565b600060405180602001604052806129546118a2565b9052905060008084156129755784915061296e8386611bcb565b9050612985565b61297f84846135de565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d91906129ba9030908b908890600401613b9d565b6020604051808303816000875af11580156129d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fd9190613adc565b90508015612a215760405163480f424760e01b8152600481018290526024016108e2565b4360095414612a43576040516397b5cfcd60e01b815260040160405180910390fd5b81612a4c611beb565b1015612a6b576040516391240a1b60e01b815260040160405180910390fd5b82600d54612a799190613b2d565b600d556001600160a01b0387166000908152600e6020526040902054612aa0908490613b2d565b6001600160a01b0388166000908152600e6020526040902055612ac387836127e1565b60405183815230906001600160a01b03891690600080516020613be68339815191529060200160405180910390a3604080516001600160a01b0389168152602081018490529081018490527fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a9299060600160405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b158015612b9657600080fd5b505af1158015612baa573d6000803e3d6000fd5b5050505050505050505050565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e190612bec90309087908790600401613b9d565b6020604051808303816000875af1158015612c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2f9190613adc565b90508015612c53576040516349abd4fd60e01b8152600481018290526024016108e2565b4360095414612c75576040516338d8859760e01b815260040160405180910390fd5b60006040518060200160405280612c8a6118a2565b905290506000612c9a8585613407565b90506000612ca882846135de565b905080600d54612cb89190613b44565b600d556001600160a01b0386166000908152600e6020526040902054612cdf908290613b44565b6001600160a01b0387166000818152600e60209081526040918290209390935580519182529181018490529081018290527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9060600160405180910390a16040518181526001600160a01b038716903090600080516020613be68339815191529060200160405180910390a3505050505050565b6000610c548284613b5c565b6000610c548284613b44565b6000670de0b6b3a7640000612da4848460000151612d73565b610c549190613b7b565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c90612de390309087908790600401613b9d565b6020604051808303816000875af1158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190613adc565b90508015612e4a5760405163918db40f60e01b8152600481018290526024016108e2565b4360095414612e6c57604051630e8d8c6160e21b815260040160405180910390fd5b81612e75611beb565b1015612e94576040516348c2588160e01b815260040160405180910390fd5b6000612e9f84611e29565b90506000612ead8483613b44565b9050600084600b54612ebf9190613b44565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b8190559050612ef486866127e1565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fdb9190613adc565b90508015612fff57604051630a14d17960e11b8152600481018290526024016108e2565b4360095414613021576040516380965b1b60e01b815260040160405180910390fd5b43826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190613adc565b146130a257604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b0316036130d457604051631bd1a62160e21b815260040160405180910390fd5b826000036130f55760405163d29da7ef60e01b815260040160405180910390fd5b600019830361311757604051635982c5bb60e11b815260040160405180910390fd5b6000613124868686612587565b60055460405163c488847b60e01b815291925060009182916001600160a01b03169063c488847b9061315e90309089908890600401613b9d565b6040805180830381865afa15801561317a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319e9190613bc1565b915091506000821461320e5760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b60648201526084016108e2565b6040516370a0823160e01b81526001600160a01b0388811660048301528291908716906370a0823190602401602060405180830381865afa158015613257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327b9190613adc565b10156132c95760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d554348000000000000000060448201526064016108e2565b306001600160a01b038616036132ea576132e53089898461207b565b6133a4565b60405163b2a02ff160e01b81526000906001600160a01b0387169063b2a02ff19061331d908c908c908790600401613b9d565b6020604051808303816000875af115801561333c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133609190613adc565b146133a45760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b60448201526064016108e2565b604080516001600160a01b038a811682528981166020830152818301869052871660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a15050505050505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b0316908190839082906370a0823190602401602060405180830381865afa158015613456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347a9190613adc565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd906134ad90899030908a90600401613b9d565b600060405180830381600087803b1580156134c757600080fd5b505af11580156134db573d6000803e3d6000fd5b5050505060003d600081146134f7576020811461350157600080fd5b600019915061350d565b60206000803e60005191505b508061355b5760405162461bcd60e51b815260206004820152601860248201527f544f4b454e5f5452414e534645525f494e5f4641494c4544000000000000000060448201526064016108e2565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156135a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135c69190613adc565b90506135d28382613b2d565b98975050505050505050565b6000610c546135f584670de0b6b3a7640000612d73565b83516000610c548284613b7b565b82805461360f90613a7e565b90600052602060002090601f0160209004810192826136315760008555613677565b82601f1061364a57805160ff1916838001178555613677565b82800160010185558215613677579182015b8281111561367757825182559160200191906001019061365c565b5061190a9291505b8082111561190a576000815560010161367f565b600060208083528351808285015260005b818110156136c0578581018301518582016040015282016136a4565b818111156136d2576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610e3d57600080fd5b6000806040838503121561371057600080fd5b823561371b816136e8565b946020939093013593505050565b60006020828403121561373b57600080fd5b5035919050565b60006020828403121561375457600080fd5b8135610c54816136e8565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156137905761379061375f565b604051601f8501601f19908116603f011681019082821181831017156137b8576137b861375f565b816040528093508581528686860111156137d157600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126137fc57600080fd5b610c5483833560208501613775565b803560ff8116811461381c57600080fd5b919050565b600080600080600080600060e0888a03121561383c57600080fd5b8735613847816136e8565b96506020880135613857816136e8565b95506040880135613867816136e8565b945060608801359350608088013567ffffffffffffffff8082111561388b57600080fd5b6138978b838c016137eb565b945060a08a01359150808211156138ad57600080fd5b506138ba8a828b016137eb565b9250506138c960c0890161380b565b905092959891949750929550565b6000806000606084860312156138ec57600080fd5b83356138f7816136e8565b92506020840135613907816136e8565b929592945050506040919091013590565b60006020828403121561392a57600080fd5b813567ffffffffffffffff81111561394157600080fd5b8201601f8101841361395257600080fd5b611be384823560208401613775565b60008060008060008060c0878903121561397a57600080fd5b8635613985816136e8565b95506020870135613995816136e8565b945060408701359350606087013567ffffffffffffffff808211156139b957600080fd5b6139c58a838b016137eb565b945060808901359150808211156139db57600080fd5b506139e889828a016137eb565b9250506139f760a0880161380b565b90509295509295509295565b60008060408385031215613a1657600080fd5b8235613a21816136e8565b91506020830135613a31816136e8565b809150509250929050565b600080600060608486031215613a5157600080fd5b8335613a5c816136e8565b9250602084013591506040840135613a73816136e8565b809150509250925092565b600181811c90821680613a9257607f821691505b602082108103613ab257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b600060208284031215613aee57600080fd5b5051919050565b600060208284031215613b0757600080fd5b81518015158114610c5457600080fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613b3f57613b3f613b17565b500390565b60008219821115613b5757613b57613b17565b500190565b6000816000190483118215151615613b7657613b76613b17565b500290565b600082613b9857634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60008060408385031215613bd457600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220e5a911863d6fd49f0990135cc15be471834138917d0c9fccc3ef6b12386b51ce64736f6c634300080d0033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_addReserves(uint256)": {
        "params": {
          "addAmount": "The amount fo underlying token to add as reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      },
      "_delegateCompLikeTo(address)": {
        "details": "CTokens whose underlying are not CompLike should revert here",
        "params": {
          "compLikeDelegatee": "The address to delegate votes to"
        }
      },
      "_reduceReserves(uint256)": {
        "params": {
          "reduceAmount": "Amount of reduction to reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setComptroller(address)": {
        "details": "Admin function to set a new comptroller",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setInterestRateModel(address)": {
        "details": "Admin function to accrue interest and update the interest rate model",
        "params": {
          "newInterestRateModel": "the new interest rate model to use"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setReserveFactor(uint256)": {
        "details": "Admin function to accrue interest and set a new reserve factor",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage."
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address of the account which owns the tokens to be spent",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "The number of tokens allowed to be spent (-1 means infinite)"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "amount": "The number of tokens that are approved (uint256.max means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The number of tokens owned by `owner`"
        }
      },
      "balanceOfUnderlying(address)": {
        "details": "This also accrues interest in a transaction",
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The amount of underlying owned by `owner`"
        }
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowBalanceStored(address)": {
        "params": {
          "account": "The address whose balance should be calculated"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowRatePerBlock()": {
        "returns": {
          "_0": "The borrow interest rate per block, scaled by 1e18"
        }
      },
      "exchangeRateCurrent()": {
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "exchangeRateStored()": {
        "details": "This function does not accrue interest before calculating the exchange rate",
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "getAccountSnapshot(address)": {
        "details": "This is used by comptroller to more efficiently perform liquidity checks.",
        "params": {
          "account": "Address of the account to snapshot"
        },
        "returns": {
          "_0": "(possible error, token balance, borrow balance, exchange rate mantissa)"
        }
      },
      "getCash()": {
        "returns": {
          "_0": "The quantity of underlying asset owned by this contract"
        }
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "ERC-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "ERC-20 name of this token",
          "symbol_": "ERC-20 symbol of this token",
          "underlying_": "The address of the underlying asset"
        }
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "EIP-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "EIP-20 name of this token",
          "symbol_": "EIP-20 symbol of this token"
        }
      },
      "liquidateBorrow(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower",
          "repayAmount": "The amount of the underlying borrowed asset to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "mint(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "mintAmount": "The amount of the underlying asset to supply"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrow(uint256)": {
        "params": {
          "repayAmount": "The amount to repay, or -1 for the full outstanding amount"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrowBehalf(address,uint256)": {
        "params": {
          "borrower": "the account with the debt being payed off",
          "repayAmount": "The amount to repay, or -1 for the full outstanding amount"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "supplyRatePerBlock()": {
        "returns": {
          "_0": "The supply interest rate per block, scaled by 1e18"
        }
      },
      "sweepToken(address)": {
        "params": {
          "token": "The address of the ERC-20 token to sweep"
        }
      },
      "totalBorrowsCurrent()": {
        "returns": {
          "_0": "The total borrows with interest"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "title": "Compound's CErc20Delegate Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueInterest(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when interest is accrued"
      },
      "Approval(address,address,uint256)": {
        "notice": "EIP20 Approval event"
      },
      "Borrow(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when underlying is borrowed"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewComptroller(address,address)": {
        "notice": "Event emitted when comptroller is changed"
      },
      "NewMarketInterestRateModel(address,address)": {
        "notice": "Event emitted when interestRateModel is changed"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is changed"
      },
      "NewReserveFactor(uint256,uint256)": {
        "notice": "Event emitted when the reserve factor is changed"
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are redeemed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      },
      "ReservesAdded(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are added"
      },
      "ReservesReduced(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are reduced"
      },
      "Transfer(address,address,uint256)": {
        "notice": "EIP20 Transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_addReserves(uint256)": {
        "notice": "The sender adds to reserves."
      },
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_delegateCompLikeTo(address)": {
        "notice": "Admin call to delegate the votes of the COMP-like underlying"
      },
      "_reduceReserves(uint256)": {
        "notice": "Accrues interest and reduces reserves by transferring to admin"
      },
      "_resignImplementation()": {
        "notice": "Called by the delegator on a delegate to forfeit its responsibility"
      },
      "_setComptroller(address)": {
        "notice": "Sets a new comptroller for the market"
      },
      "_setInterestRateModel(address)": {
        "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "_setReserveFactor(uint256)": {
        "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
      },
      "accrualBlockNumber()": {
        "notice": "Block number that interest was last accrued at"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allowance(address,address)": {
        "notice": "Get the current allowance from `owner` for `spender`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the token balance of the `owner`"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Get the underlying balance of the `owner`"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
      },
      "borrowBalanceStored(address)": {
        "notice": "Return the borrow balance of account based on stored data"
      },
      "borrowIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "borrowRatePerBlock()": {
        "notice": "Returns the current per-block borrow interest rate for this cToken"
      },
      "comptroller()": {
        "notice": "Contract which oversees inter-cToken operations"
      },
      "constructor": {
        "notice": "Construct an empty delegate"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "exchangeRateStored()": {
        "notice": "Calculates the exchange rate from the underlying to the CToken"
      },
      "getAccountSnapshot(address)": {
        "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "implementation()": {
        "notice": "Implementation address for this contract"
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the new money market"
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the money market"
      },
      "interestRateModel()": {
        "notice": "Model which tells what the current interest rate should be"
      },
      "isCToken()": {
        "notice": "Indicator that this is a CToken contract (for inspection)"
      },
      "liquidateBorrow(address,uint256,address)": {
        "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
      },
      "mint(uint256)": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "protocolSeizeShareMantissa()": {
        "notice": "Share of seized collateral that is added to reserves"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "repayBorrow(uint256)": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address,uint256)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "reserveFactorMantissa()": {
        "notice": "Fraction of interest currently set aside for reserves"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "supplyRatePerBlock()": {
        "notice": "Returns the current per-block supply interest rate for this cToken"
      },
      "sweepToken(address)": {
        "notice": "A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the underlying in this market"
      },
      "totalBorrowsCurrent()": {
        "notice": "Returns the current total borrows plus accrued interest"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "underlying()": {
        "notice": "Underlying asset for this CToken"
      }
    },
    "notice": "CTokens which wrap an EIP-20 underlying and are delegated to",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5462,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5465,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5468,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5471,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 5480,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "admin",
        "offset": 1,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 5483,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 5487,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "comptroller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ComptrollerInterface)10041"
      },
      {
        "astId": 5491,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(InterestRateModel)14013"
      },
      {
        "astId": 5493,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5496,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5499,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5502,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5505,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5508,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5511,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5515,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5521,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5531,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)5526_storage)"
      },
      {
        "astId": 5854,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "underlying",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5930,
        "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
        "label": "implementation",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)10041": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)14013": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)5526_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)5526_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)5526_storage": {
        "encoding": "inplace",
        "label": "struct CTokenStorage.BorrowSnapshot",
        "members": [
          {
            "astId": 5523,
            "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5525,
            "contract": "contracts/CErc20Delegate.sol:CErc20Delegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}