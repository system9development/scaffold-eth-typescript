{
  "address": "0xF6DfBbF912799E2426BaE13a918CB17f0e965c3c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "NewCompAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingImplementation",
          "type": "address"
        }
      ],
      "name": "NewPendingImplementation",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptImplementation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingImplementation",
          "type": "address"
        }
      ],
      "name": "_setPendingImplementation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8199fac11b377259fe8931402bc81c6a6b1d3c45e67b137870872fea25a4370e",
  "receipt": {
    "to": null,
    "from": "0xf2E055D3204aD73C7C51DE2668435B76C727a92f",
    "contractAddress": "0xF6DfBbF912799E2426BaE13a918CB17f0e965c3c",
    "transactionIndex": 152,
    "gasUsed": "500025",
    "logsBloom": "0x
    "blockHash": "0x3339ef5177e2ec017c6a15bb234fe09f9a2acb4de0016ec8af56f0bc8e25cfe6",
    "transactionHash": "0x8199fac11b377259fe8931402bc81c6a6b1d3c45e67b137870872fea25a4370e",
    "logs": [],
    "blockNumber": 15943631,
    "cumulativeGasUsed": "12012141",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3aebe99e088ec3fc40538238cd93407f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewCompAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`. CTokens should reference this contract as their comptroller.\",\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_acceptImplementation()\":{\"details\":\"Admin function for new implementation to accept it's role as implementation\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}}},\"title\":\"ComptrollerCore\",\"version\":1},\"userdoc\":{\"events\":{\"NewAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewCompAddress(address,address)\":{\"notice\":\"Emitted _compAddress is initially set (when accepting the first comptroller implementation)\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Emitted when pendingAdmin is changed\"},\"NewPendingImplementation(address,address)\":{\"notice\":\"Emitted when pendingComptrollerImplementation is changed\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_acceptImplementation()\":{\"notice\":\"Accepts new implementation of comptroller. msg.sender must be pendingImplementation\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dammtroller/DammtrollerProxy.sol\":\"DammtrollerProxy\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, ExponentialNoError, TokenErrorReporter {\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return 0 if the transfer succeeded, else revert\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0 && spender != admin) {\\n      revert TransferComptrollerRejection(allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      revert TransferNotAllowed();\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src || spender == admin) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    uint256 allowanceNew = startingAllowance - tokens;\\n    uint256 srcTokensNew = accountTokens[src] - tokens;\\n    uint256 dstTokensNew = accountTokens[dst] + tokens;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (uint256.max means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (NO_ERROR, accountTokens[account], borrowBalanceStoredInternal(account), exchangeRateStoredInternal());\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view virtual returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    return borrowBalanceStoredInternal(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return 0;\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n    return principalTimesIndex / borrowSnapshot.interestIndex;\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    return exchangeRateStoredInternal();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStoredInternal() internal view virtual returns (uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n      uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) / _totalSupply;\\n\\n      return exchangeRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n    uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumberPrior == currentBlockNumber) {\\n      return NO_ERROR;\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n    uint256 borrowsPrior = totalBorrows;\\n    uint256 reservesPrior = totalReserves;\\n    uint256 borrowIndexPrior = borrowIndex;\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n    uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(Exp({ mantissa: reserveFactorMantissa }), interestAccumulated, reservesPrior);\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant {\\n    accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      revert MintComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert MintFreshnessCheck();\\n    }\\n\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     * And write them into storage\\n     */\\n    totalSupply = totalSupply + mintTokens;\\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, actualMintAmount, mintTokens);\\n    emit Transfer(address(this), minter, mintTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   */\\n  function redeemFresh(\\n    address payable redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      redeemTokens = redeemTokensIn;\\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\\n      redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n    if (allowed != 0) {\\n      revert RedeemComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RedeemFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < redeemAmount) {\\n      revert RedeemTransferOutNotPossible();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We write the previously calculated values into storage.\\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n     */\\n    totalSupply = totalSupply - redeemTokens;\\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), redeemTokens);\\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\n    accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    borrowFresh(payable(msg.sender), borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowFresh(address payable borrower, uint256 borrowAmount) internal {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      revert BorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert BorrowFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    if (getCashPrior() < borrowAmount) {\\n      revert BorrowCashNotAvailable();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowNew = accountBorrow + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n    uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n    uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n   * @return (uint) the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert RepayBorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RepayBorrowFreshnessCheck();\\n    }\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    uint256 repayAmountFinal = repayAmount == type(uint256).max ? accountBorrowsPrev : repayAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n    uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n    return actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant {\\n    require(msg.sender == admin, \\\"only dAMM Foundation can liquidate borrowers\\\");\\n    accrueInterest();\\n    uint256 error = cTokenCollateral.accrueInterest();\\n    if (error != NO_ERROR) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      revert LiquidateAccrueCollateralInterestFailed(error);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The lender of this cToken to be liquidated, in the case of dAMM\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert LiquidateComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert LiquidateFreshnessCheck();\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      revert LiquidateCollateralFreshnessCheck();\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateLiquidatorIsBorrower();\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      revert LiquidateCloseAmountIsZero();\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      revert LiquidateCloseAmountIsUintMax();\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    uint256 actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n    require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      require(cTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n    }\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant returns (uint256) {\\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      revert LiquidateSeizeComptrollerRejection(allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateSeizeLiquidatorIsBorrower();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    uint256 protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n    uint256 protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n    uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the calculated values into storage */\\n    totalReserves = totalReservesNew;\\n    totalSupply = totalSupply - protocolSeizeTokens;\\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint256) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      revert SetPendingAdminOwnerCheck();\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() external override returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      revert AcceptAdminPendingAdminCheck();\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = payable(address(0));\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Admin function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetComptrollerOwnerCheck();\\n    }\\n\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetReserveFactorAdminCheck();\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetReserveFactorFreshCheck();\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n      revert SetReserveFactorBoundsCheck();\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n   * @param addAmount Amount of addition to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReservesInternal(uint256 addAmount) internal nonReentrant returns (uint256) {\\n    accrueInterest();\\n\\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n    _addReservesFresh(addAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Add reserves by transferring from caller\\n   * @dev Requires fresh interest accrual\\n   * @param addAmount Amount of addition to reserves\\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n   */\\n  function _addReservesFresh(uint256 addAmount) internal returns (uint256, uint256) {\\n    // totalReserves + actualAddAmount\\n    uint256 totalReservesNew;\\n    uint256 actualAddAmount;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert AddReservesFactorFreshCheck(actualAddAmount);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the caller and the addAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional addAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *  it returns the amount actually transferred, in case of a fee.\\n     */\\n\\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n    totalReservesNew = totalReserves + actualAddAmount;\\n\\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\\n    totalReserves = totalReservesNew;\\n\\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n    /* Return (NO_ERROR, actualAddAmount) */\\n    return (NO_ERROR, actualAddAmount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert ReduceReservesAdminCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert ReduceReservesFreshCheck();\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      revert ReduceReservesCashNotAvailable();\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      revert ReduceReservesCashValidation();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    totalReservesNew = totalReserves - reduceAmount;\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(admin, reduceAmount);\\n\\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    accrueInterest();\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetInterestRateModelOwnerCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetInterestRateModelFreshCheck();\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant() {\\n    require(_notEntered, \\\"re-entered\\\");\\n    _notEntered = false;\\n    _;\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0xd52e153aa531b02c88ee513e472ad49bee4e89bcc2613f8da7b830fe6eecab32\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  // Maximum borrow rate that can ever be applied (.0005% / block)\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  // Maximum fraction of interest that can be set aside for reserves\\n  uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address payable public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address payable public pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint256) internal accountTokens;\\n\\n  // Approved token transfer amounts on behalf of others\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  // Mapping of account addresses to outstanding borrow balances\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /**\\n   * @notice Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  bool public constant isCToken = true;\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() external virtual returns (uint256);\\n\\n  function exchangeRateStored() external view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() external virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint256);\\n\\n  function _acceptAdmin() external virtual returns (uint256);\\n\\n  function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint256);\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n\\n  function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external virtual returns (uint256);\\n}\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementation(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0xaa6bfcd4fe0b67279a206fcd105ac409672f790c4a72c7c3ee4b1fb8db1fb4a1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function whitelistBorrowerAdd(address borrower) virtual external returns (uint);\\n    function setBorrowerLimits(address borrower, uint256 _borrowLimit) virtual external returns (uint);\\n    function getBorrowerLimits(address borrower) virtual external returns (uint);\\n\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xf134758e3111c2a25daed5c302a0abba27a7ae8190b3e2a0dc438c0b39cac602\",\"license\":\"BSD-3-Clause\"},\"contracts/Dammtroller/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"../CToken.sol\\\";\\nimport \\\"../PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n\\n  address internal _compAddress;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /**\\n   * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 public maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => CToken[]) public accountAssets;\\n\\n  mapping(address => bool) public borrowerArray;\\n\\n  mapping(address => uint256) public borrowLimit;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    //  Multiplier representing the most one can borrow against their collateral in this market.\\n    //  For instance, 0.9 to allow borrowing 90% of collateral value.\\n    //  Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n    // Whether or not this market receives COMP\\n    bool isComped;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  struct CompMarketState {\\n    // The market's last updated compBorrowIndex or compSupplyIndex\\n    uint224 index;\\n    // The block number the index was last updated at\\n    uint32 block;\\n  }\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /// @notice The rate at which the flywheel distributes COMP, per block\\n  uint256 public compRate;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compSpeeds;\\n\\n  /// @notice The COMP market supply state for each market\\n  mapping(address => CompMarketState) public compSupplyState;\\n\\n  /// @notice The COMP market borrow state for each market\\n  mapping(address => CompMarketState) public compBorrowState;\\n\\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  mapping(address => uint256) public compAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n  /// @notice The portion of COMP that each contributor receives per block\\n  mapping(address => uint256) public compContributorSpeeds;\\n\\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\\n  mapping(address => uint256) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n  /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\n  mapping(address => uint256) public compBorrowSpeeds;\\n\\n  /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\n  mapping(address => uint256) public compSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n  /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\n  bool public proposal65FixExecuted;\\n\\n  /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\n  mapping(address => uint256) public compReceivable;\\n}\\n\",\"keccak256\":\"0x1094d55de13c1b5a3a3498f7ef38e698da654bd94d74a1929438fbcb1b54f561\",\"license\":\"BSD-3-Clause\"},\"contracts/Dammtroller/DammtrollerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"../ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract DammtrollerProxy is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is changed\\n   */\\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Emitted _compAddress is initially set (when accepting the first comptroller implementation)\\n   */\\n  event NewCompAddress(address oldAddress, address newAddress);\\n\\n  constructor() {\\n    // Set admin to caller\\n    admin = msg.sender;\\n  }\\n\\n  /*** Admin Functions ***/\\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint256) {\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n    }\\n\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = newPendingImplementation;\\n\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n   * @dev Admin function for new implementation to accept it's role as implementation\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptImplementation() public returns (uint256) {\\n    // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldImplementation = comptrollerImplementation;\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    if (_compAddress == address(0)) {\\n      (bool success, bytes memory compAddress) = pendingComptrollerImplementation.call(abi.encodeWithSignature(\\\"getCompAddress()\\\"));\\n      require(success, \\\"failed at getCompAddress()\\\");\\n      _compAddress = abi.decode(compAddress, (address));\\n      emit NewCompAddress(address(0), _compAddress);\\n    }\\n\\n    comptrollerImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = address(0);\\n\\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  fallback() external payable {\\n    // delegate all other functions to current implementation\\n    (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8c24ae57e48b3d72c4cf9bcc01709d258b717eca90741ac0a2867b083dea9864\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x1ff5606c9d7a11d704e5c4ff1be29f55527c2f6bd44a48fc24ee1dd62e9642c4\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x522854cfa3c975d7873c7c5f677508f86ddf11e0249c40887bb059469128c03e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_IMPLEMENTATION_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    SET_BORROWER_LIMIT_CHECK\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  uint256 public constant NO_ERROR = 0; // support legacy return codes\\n\\n  error TransferComptrollerRejection(uint256 errorCode);\\n  error TransferNotAllowed();\\n  error TransferNotEnough();\\n  error TransferTooMuch();\\n\\n  error MintComptrollerRejection(uint256 errorCode);\\n  error MintFreshnessCheck();\\n\\n  error RedeemComptrollerRejection(uint256 errorCode);\\n  error RedeemFreshnessCheck();\\n  error RedeemTransferOutNotPossible();\\n\\n  error BorrowComptrollerRejection(uint256 errorCode);\\n  error BorrowFreshnessCheck();\\n  error BorrowCashNotAvailable();\\n\\n  error RepayBorrowComptrollerRejection(uint256 errorCode);\\n  error RepayBorrowFreshnessCheck();\\n\\n  error LiquidateComptrollerRejection(uint256 errorCode);\\n  error LiquidateFreshnessCheck();\\n  error LiquidateCollateralFreshnessCheck();\\n  error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n  error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n  error LiquidateLiquidatorIsBorrower();\\n  error LiquidateCloseAmountIsZero();\\n  error LiquidateCloseAmountIsUintMax();\\n  error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n  error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n  error LiquidateSeizeLiquidatorIsBorrower();\\n\\n  error AcceptAdminPendingAdminCheck();\\n\\n  error SetComptrollerOwnerCheck();\\n  error SetPendingAdminOwnerCheck();\\n\\n  error SetReserveFactorAdminCheck();\\n  error SetReserveFactorFreshCheck();\\n  error SetReserveFactorBoundsCheck();\\n\\n  error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n  error ReduceReservesAdminCheck();\\n  error ReduceReservesFreshCheck();\\n  error ReduceReservesCashNotAvailable();\\n  error ReduceReservesCashValidation();\\n\\n  error SetInterestRateModelOwnerCheck();\\n  error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0x6548acd1dce9582500263f3d877b7e73b97e3b89117f2172f46e99e65c623d52\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0x40c03bbff754258487b13f71c145ae2d8239a5368744f0ab11b0cab44717d6d6\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x43727226518030081cec4d53d9f3813bf0c74150d076beb45460de4544a66edb\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x986aae6b8936226167bf0edd4da2cc7728d2e951868993cfb4f83661e40c3374\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556107ad806100326000396000f3fe60806040526004361061007b5760003560e01c8063dcfbc0c71161004e578063dcfbc0c714610196578063e992a041146101b6578063e9c714f2146101d6578063f851a440146101eb5761007b565b806326782247146100f6578063b71d1a0c14610133578063bb82aa5e14610161578063c1e8033414610181575b6002546040516000916001600160a01b03169061009b90839036906106c4565b600060405180830381855af49150503d80600081146100d6576040519150601f19603f3d011682016040523d82523d6000602084013e6100db565b606091505b505090506040513d6000823e8180156100f2573d82f35b3d82fd5b34801561010257600080fd5b50600154610116906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013f57600080fd5b5061015361014e3660046106ec565b61020b565b60405190815260200161012a565b34801561016d57600080fd5b50600254610116906001600160a01b031681565b34801561018d57600080fd5b50610153610298565b3480156101a257600080fd5b50600354610116906001600160a01b031681565b3480156101c257600080fd5b506101536101d13660046106ec565b6104f8565b3480156101e257600080fd5b50610153610571565b3480156101f757600080fd5b50600054610116906001600160a01b031681565b600080546001600160a01b031633146102305761022a6001600e61064b565b92915050565b600180546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991015b60405180910390a160005b9392505050565b6003546000906001600160a01b0316331415806102be57506003546001600160a01b0316155b156102d3576102ce60018061064b565b905090565b6002546003546004546001600160a01b039283169291821691166104425760035460408051600481526024810182526020810180516001600160e01b0316634e8dad0560e11b179052905160009283926001600160a01b0390911691610339919061071f565b6000604051808303816000865af19150503d8060008114610376576040519150601f19603f3d011682016040523d82523d6000602084013e61037b565b606091505b5091509150816103d15760405162461bcd60e51b815260206004820152601a60248201527f6661696c656420617420676574436f6d70416464726573732829000000000000604482015260640160405180910390fd5b808060200190518101906103e5919061075a565b600480546001600160a01b0319166001600160a01b03929092169182179055604080516000815260208101929092527fdde58acf741e6f5e57788ee0f64a68576e5eadf169e78251f32824653dd308bf910160405180910390a150505b60038054600280546001600160a01b038084166001600160a01b03199283168117909355921690925560408051918516825260208201929092527fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a910160405180910390a1600354604080516001600160a01b03808516825290921660208301527fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d81591015b60405180910390a160009250505090565b600080546001600160a01b031633146105175761022a6001600f61064b565b600380546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159101610286565b6001546000906001600160a01b03163314158061058c575033155b1561059d576102ce6001600061064b565b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600154604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991016104e7565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561068057610680610709565b83601481111561069257610692610709565b60408051928352602083019190915260009082015260600160405180910390a182601181111561029157610291610709565b8183823760009101908152919050565b6001600160a01b03811681146106e957600080fd5b50565b6000602082840312156106fe57600080fd5b8135610291816106d4565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156107405760208186018101518583015201610726565b8181111561074f576000828501525b509190910192915050565b60006020828403121561076c57600080fd5b8151610291816106d456fea2646970667358221220e66f68f844de1e49b670b59c15fc8409da30504850929a02e6004390ca8f86d464736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063dcfbc0c71161004e578063dcfbc0c714610196578063e992a041146101b6578063e9c714f2146101d6578063f851a440146101eb5761007b565b806326782247146100f6578063b71d1a0c14610133578063bb82aa5e14610161578063c1e8033414610181575b6002546040516000916001600160a01b03169061009b90839036906106c4565b600060405180830381855af49150503d80600081146100d6576040519150601f19603f3d011682016040523d82523d6000602084013e6100db565b606091505b505090506040513d6000823e8180156100f2573d82f35b3d82fd5b34801561010257600080fd5b50600154610116906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561013f57600080fd5b5061015361014e3660046106ec565b61020b565b60405190815260200161012a565b34801561016d57600080fd5b50600254610116906001600160a01b031681565b34801561018d57600080fd5b50610153610298565b3480156101a257600080fd5b50600354610116906001600160a01b031681565b3480156101c257600080fd5b506101536101d13660046106ec565b6104f8565b3480156101e257600080fd5b50610153610571565b3480156101f757600080fd5b50600054610116906001600160a01b031681565b600080546001600160a01b031633146102305761022a6001600e61064b565b92915050565b600180546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991015b60405180910390a160005b9392505050565b6003546000906001600160a01b0316331415806102be57506003546001600160a01b0316155b156102d3576102ce60018061064b565b905090565b6002546003546004546001600160a01b039283169291821691166104425760035460408051600481526024810182526020810180516001600160e01b0316634e8dad0560e11b179052905160009283926001600160a01b0390911691610339919061071f565b6000604051808303816000865af19150503d8060008114610376576040519150601f19603f3d011682016040523d82523d6000602084013e61037b565b606091505b5091509150816103d15760405162461bcd60e51b815260206004820152601a60248201527f6661696c656420617420676574436f6d70416464726573732829000000000000604482015260640160405180910390fd5b808060200190518101906103e5919061075a565b600480546001600160a01b0319166001600160a01b03929092169182179055604080516000815260208101929092527fdde58acf741e6f5e57788ee0f64a68576e5eadf169e78251f32824653dd308bf910160405180910390a150505b60038054600280546001600160a01b038084166001600160a01b03199283168117909355921690925560408051918516825260208201929092527fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a910160405180910390a1600354604080516001600160a01b03808516825290921660208301527fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d81591015b60405180910390a160009250505090565b600080546001600160a01b031633146105175761022a6001600f61064b565b600380546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159101610286565b6001546000906001600160a01b03163314158061058c575033155b1561059d576102ce6001600061064b565b60008054600180546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600154604080516001600160a01b03808516825290921660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a991016104e7565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561068057610680610709565b83601481111561069257610692610709565b60408051928352602083019190915260009082015260600160405180910390a182601181111561029157610291610709565b8183823760009101908152919050565b6001600160a01b03811681146106e957600080fd5b50565b6000602082840312156106fe57600080fd5b8135610291816106d4565b634e487b7160e01b600052602160045260246000fd5b6000825160005b818110156107405760208186018101518583015201610726565b8181111561074f576000828501525b509190910192915050565b60006020828403121561076c57600080fd5b8151610291816106d456fea2646970667358221220e66f68f844de1e49b670b59c15fc8409da30504850929a02e6004390ca8f86d464736f6c634300080d0033",
  "devdoc": {
    "details": "Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`. CTokens should reference this contract as their comptroller.",
    "kind": "dev",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_acceptImplementation()": {
        "details": "Admin function for new implementation to accept it's role as implementation",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      }
    },
    "title": "ComptrollerCore",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewCompAddress(address,address)": {
        "notice": "Emitted _compAddress is initially set (when accepting the first comptroller implementation)"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Emitted when pendingAdmin is changed"
      },
      "NewPendingImplementation(address,address)": {
        "notice": "Emitted when pendingComptrollerImplementation is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_acceptImplementation()": {
        "notice": "Accepts new implementation of comptroller. msg.sender must be pendingImplementation"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10724,
        "contract": "contracts/Dammtroller/DammtrollerProxy.sol:DammtrollerProxy",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10727,
        "contract": "contracts/Dammtroller/DammtrollerProxy.sol:DammtrollerProxy",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10730,
        "contract": "contracts/Dammtroller/DammtrollerProxy.sol:DammtrollerProxy",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10733,
        "contract": "contracts/Dammtroller/DammtrollerProxy.sol:DammtrollerProxy",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10735,
        "contract": "contracts/Dammtroller/DammtrollerProxy.sol:DammtrollerProxy",
        "label": "_compAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}