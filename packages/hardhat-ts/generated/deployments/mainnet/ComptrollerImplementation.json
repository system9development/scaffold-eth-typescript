{
  "address": "0xf2B1039ba575cBeb126827816Cfa59d748AF3Ae7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "compAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowLimit",
          "type": "uint256"
        }
      ],
      "name": "BorrowerLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CompGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "CompSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "ContributorCompSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedBorrowerComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "compSupplyIndex",
          "type": "uint256"
        }
      ],
      "name": "DistributedSupplierComp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MarketExited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCloseFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCloseFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewCollateralFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidationIncentiveMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewLiquidationIncentive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "oldPriceOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract PriceOracle",
          "name": "newPriceOracle",
          "type": "address"
        }
      ],
      "name": "NewPriceOracle",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract Unitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCloseFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCloseFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setCollateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "compSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setCompSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "compSpeed",
          "type": "uint256"
        }
      ],
      "name": "_setContributorCompSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLiquidationIncentiveMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setLiquidationIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "_setPriceOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_supportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowerArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "checkMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        },
        {
          "internalType": "contract CToken[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "borrowers",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "suppliers",
          "type": "bool"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "claimComp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compBorrowerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compContributorSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "compSupplyState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenAddress",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetsIn",
      "outputs": [
        {
          "internalType": "contract CToken[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowerLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getHypotheticalAccountLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastContributorBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "liquidateBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateCalculateSeizeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isComped",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "mintVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingComptrollerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeemVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowerIndex",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seizeVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowLimit",
          "type": "uint256"
        }
      ],
      "name": "setBorrowerLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferTokens",
          "type": "uint256"
        }
      ],
      "name": "transferVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "updateContributorRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "whitelistBorrowerAdd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x241058b7709ed8fdda70a12fc8ff36d2e6ec2d5cc4aff954d75dff0346abcf52",
  "receipt": {
    "to": null,
    "from": "0xf2E055D3204aD73C7C51DE2668435B76C727a92f",
    "contractAddress": "0xf2B1039ba575cBeb126827816Cfa59d748AF3Ae7",
    "transactionIndex": 152,
    "gasUsed": "4631365",
    "logsBloom": "0x
    "blockHash": "0x9a559215a4c29116eec70415d25dd83b6849a33a1eaada0c42e940a1a698c62e",
    "transactionHash": "0x241058b7709ed8fdda70a12fc8ff36d2e6ec2d5cc4aff954d75dff0346abcf52",
    "logs": [],
    "blockNumber": 15671842,
    "cumulativeGasUsed": "17305511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfa372fF1547fa1a283B5112a4685F1358CE5574d"
  ],
  "numDeployments": 2,
  "solcInputHash": "3ccf21f1aee733277b332d837dbaed4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"compAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowLimit\",\"type\":\"uint256\"}],\"name\":\"BorrowerLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"ContributorCompSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MarketExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCloseFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCloseFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewCollateralFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidationIncentiveMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"NewLiquidationIncentive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"oldPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract PriceOracle\",\"name\":\"newPriceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract Unitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCloseFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCloseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setCollateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setCompSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSpeed\",\"type\":\"uint256\"}],\"name\":\"_setContributorCompSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidationIncentiveMantissa\",\"type\":\"uint256\"}],\"name\":\"_setLiquidationIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"_setPriceOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowerArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"checkMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compContributorSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"getBorrowerLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"getHypotheticalAccountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastContributorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowLimit\",\"type\":\"uint256\"}],\"name\":\"setBorrowerLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"updateContributorRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"whitelistBorrowerAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_grantComp(address,uint256)\":{\"details\":\"Note: If there is not enough COMP, we do not perform the transfer all.\",\"params\":{\"amount\":\"The amount of COMP to (possibly) transfer\",\"recipient\":\"The address of the recipient to transfer COMP to\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setCloseFactor(uint256)\":{\"details\":\"Admin function to set closeFactor\",\"params\":{\"newCloseFactorMantissa\":\"New close factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure\"}},\"_setCollateralFactor(address,uint256)\":{\"details\":\"Admin function to set per-market collateralFactor\",\"params\":{\"cToken\":\"The market to set the factor on\",\"newCollateralFactorMantissa\":\"The new collateral factor, scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setCompSpeed(address,uint256)\":{\"params\":{\"cToken\":\"The market whose COMP speed to update\",\"compSpeed\":\"New COMP speed for market\"}},\"_setContributorCompSpeed(address,uint256)\":{\"params\":{\"compSpeed\":\"New COMP speed for contributor\",\"contributor\":\"The contributor whose COMP speed to update\"}},\"_setLiquidationIncentive(uint256)\":{\"details\":\"Admin function to set liquidationIncentive\",\"params\":{\"newLiquidationIncentiveMantissa\":\"New liquidationIncentive scaled by 1e18\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See ErrorReporter for details)\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_setPriceOracle(address)\":{\"details\":\"Admin function to set a new price oracle\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_supportMarket(address)\":{\"details\":\"Admin function to set isListed and add support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to list\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"borrowAllowed(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of underlying the account would borrow\",\"borrower\":\"The account which would borrow the asset\",\"cToken\":\"The market to verify the borrow against\"},\"returns\":{\"_0\":\"0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"borrowVerify(address,address,uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset requested to borrow\",\"borrower\":\"The address borrowing the underlying\",\"cToken\":\"Asset whose underlying is being borrowed\"}},\"checkMembership(address,address)\":{\"params\":{\"account\":\"The address of the account to check\",\"cToken\":\"The cToken to check\"},\"returns\":{\"_0\":\"True if the account is in the asset, otherwise false.\"}},\"claimComp(address)\":{\"params\":{\"holder\":\"The address to claim COMP for\"}},\"claimComp(address,address[])\":{\"params\":{\"cTokens\":\"The list of markets to claim COMP in\",\"holder\":\"The address to claim COMP for\"}},\"claimComp(address[],address[],bool,bool)\":{\"params\":{\"borrowers\":\"Whether or not to claim COMP earned by borrowing\",\"cTokens\":\"The list of markets to claim COMP in\",\"holders\":\"The addresses to claim COMP for\",\"suppliers\":\"Whether or not to claim COMP earned by supplying\"}},\"enterMarkets(address[])\":{\"params\":{\"cTokens\":\"The list of addresses of the cToken markets to be enabled\"},\"returns\":{\"_0\":\"Success indicator for whether each corresponding market was entered\"}},\"exitMarket(address)\":{\"details\":\"Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.\",\"params\":{\"cTokenAddress\":\"The address of the asset to be removed\"},\"returns\":{\"_0\":\"Whether or not the account successfully exited the market\"}},\"getAccountLiquidity(address)\":{\"returns\":{\"_0\":\"(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getAssetsIn(address)\":{\"params\":{\"account\":\"The address of the account to pull assets for\"},\"returns\":{\"_0\":\"A dynamic list with the assets the account has entered\"}},\"getCompAddress()\":{\"returns\":{\"_0\":\"The address of COMP\"}},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"params\":{\"account\":\"The account to determine liquidity for\",\"borrowAmount\":\"The amount of underlying to hypothetically borrow\",\"cTokenModify\":\"The market to hypothetically redeem/borrow in\",\"redeemTokens\":\"The number of tokens to hypothetically redeem\"},\"returns\":{\"_0\":\"(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)\"}},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"repayAmount\":\"The amount of underlying being repaid\"}},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\"}},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"details\":\"Used in liquidation (called in cToken.liquidateBorrowFresh)\",\"params\":{\"actualRepayAmount\":\"The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\",\"cTokenBorrowed\":\"The address of the borrowed cToken\",\"cTokenCollateral\":\"The address of the collateral cToken\"},\"returns\":{\"_0\":\"(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\"}},\"mintAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the mint against\",\"mintAmount\":\"The amount of underlying being supplied to the market in exchange for tokens\",\"minter\":\"The account which would get the minted tokens\"},\"returns\":{\"_0\":\"0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"mintVerify(address,address,uint256,uint256)\":{\"params\":{\"actualMintAmount\":\"The amount of the underlying asset being minted\",\"cToken\":\"Asset being minted\",\"mintTokens\":\"The number of tokens being minted\",\"minter\":\"The address minting the tokens\"}},\"redeemAllowed(address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the redeem against\",\"redeemTokens\":\"The number of cTokens to exchange for the underlying asset in the market\",\"redeemer\":\"The account which would redeem the tokens\"},\"returns\":{\"_0\":\"0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"redeemVerify(address,address,uint256,uint256)\":{\"params\":{\"cToken\":\"Asset being redeemed\",\"redeemAmount\":\"The amount of the underlying asset being redeemed\",\"redeemTokens\":\"The number of tokens being redeemed\",\"redeemer\":\"The address redeeming the tokens\"}},\"repayBorrowAllowed(address,address,address,uint256)\":{\"params\":{\"borrower\":\"The account which would borrowed the asset\",\"cToken\":\"The market to verify the repay against\",\"payer\":\"The account which would repay the asset\",\"repayAmount\":\"The amount of the underlying asset the account would repay\"},\"returns\":{\"_0\":\"0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"params\":{\"actualRepayAmount\":\"The amount of underlying being repaid\",\"borrower\":\"The address of the borrower\",\"cToken\":\"Asset being repaid\",\"payer\":\"The address repaying the borrow\"}},\"seizeAllowed(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"seizeVerify(address,address,address,address,uint256)\":{\"params\":{\"borrower\":\"The address of the borrower\",\"cTokenBorrowed\":\"Asset which was borrowed by the borrower\",\"cTokenCollateral\":\"Asset which was used as collateral and will be seized\",\"liquidator\":\"The address repaying the borrow and seizing the collateral\",\"seizeTokens\":\"The number of collateral tokens to seize\"}},\"transferAllowed(address,address,address,uint256)\":{\"params\":{\"cToken\":\"The market to verify the transfer against\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"},\"returns\":{\"_0\":\"0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\"}},\"transferVerify(address,address,address,uint256)\":{\"params\":{\"cToken\":\"Asset being transferred\",\"dst\":\"The account which receives the tokens\",\"src\":\"The account which sources the tokens\",\"transferTokens\":\"The number of cTokens to transfer\"}},\"updateContributorRewards(address)\":{\"params\":{\"contributor\":\"The address to calculate contributor rewards for\"}}},\"title\":\"Compound's Comptroller Contract\",\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"BorrowerLimitChanged(address,uint256)\":{\"notice\":\"Emitted when borrower's limits are changed\"},\"BorrowerWhitelisted(address)\":{\"notice\":\"Emitted when new borrower is whitelisted\"},\"CompGranted(address,uint256)\":{\"notice\":\"Emitted when COMP is granted by admin\"},\"CompSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new COMP speed is calculated for a market\"},\"ContributorCompSpeedUpdated(address,uint256)\":{\"notice\":\"Emitted when a new COMP speed is set for a contributor\"},\"DistributedBorrowerComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a borrower\"},\"DistributedSupplierComp(address,address,uint256,uint256)\":{\"notice\":\"Emitted when COMP is distributed to a supplier\"},\"MarketEntered(address,address)\":{\"notice\":\"Emitted when an account enters a market\"},\"MarketExited(address,address)\":{\"notice\":\"Emitted when an account exits a market\"},\"MarketListed(address)\":{\"notice\":\"Emitted when an admin supports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a cToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewCloseFactor(uint256,uint256)\":{\"notice\":\"Emitted when close factor is changed by admin\"},\"NewCollateralFactor(address,uint256,uint256)\":{\"notice\":\"Emitted when a collateral factor is changed by admin\"},\"NewLiquidationIncentive(uint256,uint256)\":{\"notice\":\"Emitted when liquidation incentive is changed by admin\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewPriceOracle(address,address)\":{\"notice\":\"Emitted when price oracle is changed\"}},\"kind\":\"user\",\"methods\":{\"_grantComp(address,uint256)\":{\"notice\":\"Transfer COMP to the recipient\"},\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setCloseFactor(uint256)\":{\"notice\":\"Sets the closeFactor used when liquidating borrows\"},\"_setCollateralFactor(address,uint256)\":{\"notice\":\"Sets the collateralFactor for a market\"},\"_setCompSpeed(address,uint256)\":{\"notice\":\"Set COMP speed for a single market\"},\"_setContributorCompSpeed(address,uint256)\":{\"notice\":\"Set COMP speed for a single contributor\"},\"_setLiquidationIncentive(uint256)\":{\"notice\":\"Sets liquidationIncentive\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_setPriceOracle(address)\":{\"notice\":\"Sets a new price oracle for the comptroller\"},\"_supportMarket(address)\":{\"notice\":\"Add the market to the markets mapping and set it as listed\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to borrow the underlying asset of the given market\"},\"borrowVerify(address,address,uint256)\":{\"notice\":\"Validates borrow and reverts on rejection. May emit logs.\"},\"checkMembership(address,address)\":{\"notice\":\"Returns whether the given account is entered in the given asset\"},\"claimComp(address)\":{\"notice\":\"Claim all the comp accrued by holder in all markets\"},\"claimComp(address,address[])\":{\"notice\":\"Claim all the comp accrued by holder in the specified markets\"},\"claimComp(address[],address[],bool,bool)\":{\"notice\":\"Claim all comp accrued by the holders\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"compAccrued(address)\":{\"notice\":\"The COMP accrued but not yet transferred to each user\"},\"compBorrowState(address)\":{\"notice\":\"The COMP market borrow state for each market\"},\"compBorrowerIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each borrower as of the last time they accrued COMP\"},\"compContributorSpeeds(address)\":{\"notice\":\"The portion of COMP that each contributor receives per block\"},\"compInitialIndex()\":{\"notice\":\"The initial COMP index for a market\"},\"compRate()\":{\"notice\":\"The rate at which the flywheel distributes COMP, per block\"},\"compSpeeds(address)\":{\"notice\":\"The portion of compRate that each market currently receives\"},\"compSupplierIndex(address,address)\":{\"notice\":\"The COMP borrow index for each market for each supplier as of the last time they accrued COMP\"},\"compSupplyState(address)\":{\"notice\":\"The COMP market supply state for each market\"},\"comptrollerImplementation()\":{\"notice\":\"Active brains of Unitroller\"},\"enterMarkets(address[])\":{\"notice\":\"Add assets to be included in account liquidity calculation\"},\"exitMarket(address)\":{\"notice\":\"Removes asset from sender's account liquidity calculation\"},\"getAccountLiquidity(address)\":{\"notice\":\"Determine the current account liquidity wrt collateral requirements\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getAssetsIn(address)\":{\"notice\":\"Returns the assets an account has entered\"},\"getCompAddress()\":{\"notice\":\"Return the address of the COMP token\"},\"getHypotheticalAccountLiquidity(address,address,uint256,uint256)\":{\"notice\":\"Determine what the account liquidity would be if the given amounts were redeemed/borrowed\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"lastContributorBlock(address)\":{\"notice\":\"Last block at which a contributor's COMP rewards have been allocated\"},\"liquidateBorrowAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the liquidation should be allowed to occur\"},\"liquidateBorrowVerify(address,address,address,address,uint256,uint256)\":{\"notice\":\"Validates liquidateBorrow and reverts on rejection. May emit logs.\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"Calculate number of tokens of collateral asset to seize given an underlying amount\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"maxAssets()\":{\"notice\":\"Max number of assets a single account can participate in (borrow or use as collateral)\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to mint tokens in the given market\"},\"mintVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates mint and reverts on rejection. May emit logs.\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"pendingComptrollerImplementation()\":{\"notice\":\"Pending brains of Unitroller\"},\"redeemAllowed(address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to redeem tokens in the given market\"},\"redeemVerify(address,address,uint256,uint256)\":{\"notice\":\"Validates redeem and reverts on rejection. May emit logs.\"},\"repayBorrowAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to repay a borrow in the given market\"},\"repayBorrowVerify(address,address,address,uint256,uint256)\":{\"notice\":\"Validates repayBorrow and reverts on rejection. May emit logs.\"},\"seizeAllowed(address,address,address,address,uint256)\":{\"notice\":\"Checks if the seizing of assets should be allowed to occur\"},\"seizeVerify(address,address,address,address,uint256)\":{\"notice\":\"Validates seize and reverts on rejection. May emit logs.\"},\"transferAllowed(address,address,address,uint256)\":{\"notice\":\"Checks if the account should be allowed to transfer tokens in the given market\"},\"transferVerify(address,address,address,uint256)\":{\"notice\":\"Validates transfer and reverts on rejection. May emit logs.\"},\"updateContributorRewards(address)\":{\"notice\":\"Calculate additional accrued COMP for a contributor since last accrual\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerG7.sol\":\"ComptrollerG7\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, ExponentialNoError, TokenErrorReporter {\\n  /**\\n   * @notice Initialize the money market\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n   * @param name_ EIP-20 name of this token\\n   * @param symbol_ EIP-20 symbol of this token\\n   * @param decimals_ EIP-20 decimal precision of this token\\n   */\\n  function initialize(\\n    ComptrollerInterface comptroller_,\\n    InterestRateModel interestRateModel_,\\n    uint256 initialExchangeRateMantissa_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) public {\\n    require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n    require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n    // Set initial exchange rate\\n    initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n    require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n    // Set the comptroller\\n    uint256 err = _setComptroller(comptroller_);\\n    require(err == NO_ERROR, \\\"setting comptroller failed\\\");\\n\\n    // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n    accrualBlockNumber = getBlockNumber();\\n    borrowIndex = mantissaOne;\\n\\n    // Set the interest rate model (depends on block number / borrow index)\\n    err = _setInterestRateModelFresh(interestRateModel_);\\n    require(err == NO_ERROR, \\\"setting interest rate model failed\\\");\\n\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n\\n    // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n    _notEntered = true;\\n  }\\n\\n  /**\\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n   * @dev Called by both `transfer` and `transferFrom` internally\\n   * @param spender The address of the account performing the transfer\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param tokens The number of tokens to transfer\\n   * @return 0 if the transfer succeeded, else revert\\n   */\\n  function transferTokens(\\n    address spender,\\n    address src,\\n    address dst,\\n    uint256 tokens\\n  ) internal returns (uint256) {\\n    /* Fail if transfer not allowed */\\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n    if (allowed != 0 && spender != admin) {\\n      revert TransferComptrollerRejection(allowed);\\n    }\\n\\n    /* Do not allow self-transfers */\\n    if (src == dst) {\\n      revert TransferNotAllowed();\\n    }\\n\\n    /* Get the allowance, infinite for the account owner */\\n    uint256 startingAllowance = 0;\\n    if (spender == src || spender == admin) {\\n      startingAllowance = type(uint256).max;\\n    } else {\\n      startingAllowance = transferAllowances[src][spender];\\n    }\\n\\n    /* Do the calculations, checking for {under,over}flow */\\n    uint256 allowanceNew = startingAllowance - tokens;\\n    uint256 srcTokensNew = accountTokens[src] - tokens;\\n    uint256 dstTokensNew = accountTokens[dst] + tokens;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    accountTokens[src] = srcTokensNew;\\n    accountTokens[dst] = dstTokensNew;\\n\\n    /* Eat some of the allowance (if necessary) */\\n    if (startingAllowance != type(uint256).max) {\\n      transferAllowances[src][spender] = allowanceNew;\\n    }\\n\\n    /* We emit a Transfer event */\\n    emit Transfer(src, dst, tokens);\\n\\n    // unused function\\n    // comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external override nonReentrant returns (bool) {\\n    return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (uint256.max means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    address src = msg.sender;\\n    transferAllowances[src][spender] = amount;\\n    emit Approval(src, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return transferAllowances[owner][spender];\\n  }\\n\\n  /**\\n   * @notice Get the token balance of the `owner`\\n   * @param owner The address of the account to query\\n   * @return The number of tokens owned by `owner`\\n   */\\n  function balanceOf(address owner) external view override returns (uint256) {\\n    return accountTokens[owner];\\n  }\\n\\n  /**\\n   * @notice Get the underlying balance of the `owner`\\n   * @dev This also accrues interest in a transaction\\n   * @param owner The address of the account to query\\n   * @return The amount of underlying owned by `owner`\\n   */\\n  function balanceOfUnderlying(address owner) external override returns (uint256) {\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n    return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n  }\\n\\n  /**\\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n   * @param account Address of the account to snapshot\\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (NO_ERROR, accountTokens[account], borrowBalanceStoredInternal(account), exchangeRateStoredInternal());\\n  }\\n\\n  /**\\n   * @dev Function to simply retrieve block number\\n   *  This exists mainly for inheriting test contracts to stub this result.\\n   */\\n  function getBlockNumber() internal view virtual returns (uint256) {\\n    return block.number;\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block borrow interest rate for this cToken\\n   * @return The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice Returns the current per-block supply interest rate for this cToken\\n   * @return The supply interest rate per block, scaled by 1e18\\n   */\\n  function supplyRatePerBlock() external view override returns (uint256) {\\n    return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Returns the current total borrows plus accrued interest\\n   * @return The total borrows with interest\\n   */\\n  function totalBorrowsCurrent() external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return totalBorrows;\\n  }\\n\\n  /**\\n   * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n   * @param account The address whose balance should be calculated after updating borrowIndex\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceCurrent(address account) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return borrowBalanceStored(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return The calculated balance\\n   */\\n  function borrowBalanceStored(address account) public view override returns (uint256) {\\n    return borrowBalanceStoredInternal(account);\\n  }\\n\\n  /**\\n   * @notice Return the borrow balance of account based on stored data\\n   * @param account The address whose balance should be calculated\\n   * @return (error code, the calculated balance or 0 if error code is non-zero)\\n   */\\n  function borrowBalanceStoredInternal(address account) internal view returns (uint256) {\\n    /* Get borrowBalance and borrowIndex */\\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n     */\\n    if (borrowSnapshot.principal == 0) {\\n      return 0;\\n    }\\n\\n    /* Calculate new borrow balance using the interest index:\\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n     */\\n    uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n    return principalTimesIndex / borrowSnapshot.interestIndex;\\n  }\\n\\n  /**\\n   * @notice Accrue interest then return the up-to-date exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() public override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    return exchangeRateStored();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view override returns (uint256) {\\n    return exchangeRateStoredInternal();\\n  }\\n\\n  /**\\n   * @notice Calculates the exchange rate from the underlying to the CToken\\n   * @dev This function does not accrue interest before calculating the exchange rate\\n   * @return calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStoredInternal() internal view virtual returns (uint256) {\\n    uint256 _totalSupply = totalSupply;\\n    if (_totalSupply == 0) {\\n      /*\\n       * If there are no tokens minted:\\n       *  exchangeRate = initialExchangeRate\\n       */\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint256 totalCash = getCashPrior();\\n      uint256 cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n      uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) / _totalSupply;\\n\\n      return exchangeRate;\\n    }\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashPrior();\\n  }\\n\\n  /**\\n   * @notice Applies accrued interest to total borrows and reserves\\n   * @dev This calculates interest accrued from the last checkpointed block\\n   *   up to the current block and writes new checkpoint to storage.\\n   */\\n  function accrueInterest() public virtual override returns (uint256) {\\n    /* Remember the initial block number */\\n    uint256 currentBlockNumber = getBlockNumber();\\n    uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n    /* Short-circuit accumulating 0 interest */\\n    if (accrualBlockNumberPrior == currentBlockNumber) {\\n      return NO_ERROR;\\n    }\\n\\n    /* Read the previous values out of storage */\\n    uint256 cashPrior = getCashPrior();\\n    uint256 borrowsPrior = totalBorrows;\\n    uint256 reservesPrior = totalReserves;\\n    uint256 borrowIndexPrior = borrowIndex;\\n\\n    /* Calculate the current borrow interest rate */\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n    require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n    /* Calculate the number of blocks elapsed since the last accrual */\\n    uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n    /*\\n     * Calculate the interest accumulated into borrows and reserves and the new index:\\n     *  simpleInterestFactor = borrowRate * blockDelta\\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n     */\\n\\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n    uint256 interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n    uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\\n    uint256 totalReservesNew = mul_ScalarTruncateAddUInt(Exp({ mantissa: reserveFactorMantissa }), interestAccumulated, reservesPrior);\\n    uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accrualBlockNumber = currentBlockNumber;\\n    borrowIndex = borrowIndexNew;\\n    totalBorrows = totalBorrowsNew;\\n    totalReserves = totalReservesNew;\\n\\n    /* We emit an AccrueInterest event */\\n    emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant {\\n    accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      revert MintComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert MintFreshnessCheck();\\n    }\\n\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    uint256 actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    uint256 mintTokens = div_(actualMintAmount, exchangeRate);\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     * And write them into storage\\n     */\\n    totalSupply = totalSupply + mintTokens;\\n    accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, actualMintAmount, mintTokens);\\n    emit Transfer(address(this), minter, mintTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant {\\n    accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    redeemFresh(payable(msg.sender), 0, redeemAmount);\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   */\\n  function redeemFresh(\\n    address payable redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n    /* exchangeRate = invoke Exchange Rate Stored() */\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    /* If redeemTokensIn > 0: */\\n    if (redeemTokensIn > 0) {\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      redeemTokens = redeemTokensIn;\\n      redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n    } else {\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n      redeemTokens = div_(redeemAmountIn, exchangeRate);\\n      redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n    if (allowed != 0) {\\n      revert RedeemComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RedeemFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashPrior() < redeemAmount) {\\n      revert RedeemTransferOutNotPossible();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We write the previously calculated values into storage.\\n     *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n     */\\n    totalSupply = totalSupply - redeemTokens;\\n    accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), redeemTokens);\\n    emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant {\\n    accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    borrowFresh(payable(msg.sender), borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   */\\n  function borrowFresh(address payable borrower, uint256 borrowAmount) internal {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      revert BorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert BorrowFreshnessCheck();\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    if (getCashPrior() < borrowAmount) {\\n      revert BorrowCashNotAvailable();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowNew = accountBorrow + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n    uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n    uint256 totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount) internal nonReentrant {\\n    accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n   * @return (uint) the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert RepayBorrowComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert RepayBorrowFreshnessCheck();\\n    }\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    uint256 repayAmountFinal = repayAmount == type(uint256).max ? accountBorrowsPrev : repayAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n    uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n    return actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal nonReentrant {\\n    require(msg.sender == admin, \\\"only dAMM Foundation can liquidate borrowers\\\");\\n    accrueInterest();\\n    uint256 error = cTokenCollateral.accrueInterest();\\n    if (error != NO_ERROR) {\\n      // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n      revert LiquidateAccrueCollateralInterestFailed(error);\\n    }\\n\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The lender of this cToken to be liquidated, in the case of dAMM\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) internal {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n    if (allowed != 0) {\\n      revert LiquidateComptrollerRejection(allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert LiquidateFreshnessCheck();\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n      revert LiquidateCollateralFreshnessCheck();\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateLiquidatorIsBorrower();\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      revert LiquidateCloseAmountIsZero();\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      revert LiquidateCloseAmountIsUintMax();\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    uint256 actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n    require(amountSeizeError == NO_ERROR, \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    if (address(cTokenCollateral) == address(this)) {\\n      seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      require(cTokenCollateral.seize(liquidator, borrower, seizeTokens) == NO_ERROR, \\\"token seizure failed\\\");\\n    }\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant returns (uint256) {\\n    seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      revert LiquidateSeizeComptrollerRejection(allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      revert LiquidateSeizeLiquidatorIsBorrower();\\n    }\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    uint256 protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateStoredInternal() });\\n    uint256 protocolSeizeAmount = mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n    uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the calculated values into storage */\\n    totalReserves = totalReservesNew;\\n    totalSupply = totalSupply - protocolSeizeTokens;\\n    accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n    accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), protocolSeizeTokens);\\n    emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address payable newPendingAdmin) external override returns (uint256) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      revert SetPendingAdminOwnerCheck();\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() external override returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      revert AcceptAdminPendingAdminCheck();\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = payable(address(0));\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Sets a new comptroller for the market\\n   * @dev Admin function to set a new comptroller\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setComptroller(ComptrollerInterface newComptroller) public override returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetComptrollerOwnerCheck();\\n    }\\n\\n    ComptrollerInterface oldComptroller = comptroller;\\n    // Ensure invoke comptroller.isComptroller() returns true\\n    require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n    // Set market's comptroller to newComptroller\\n    comptroller = newComptroller;\\n\\n    // Emit NewComptroller(oldComptroller, newComptroller)\\n    emit NewComptroller(oldComptroller, newComptroller);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n   * @dev Admin function to accrue interest and set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n    return _setReserveFactorFresh(newReserveFactorMantissa);\\n  }\\n\\n  /**\\n   * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n   * @dev Admin function to set a new reserve factor\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setReserveFactorFresh(uint256 newReserveFactorMantissa) internal returns (uint256) {\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetReserveFactorAdminCheck();\\n    }\\n\\n    // Verify market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetReserveFactorFreshCheck();\\n    }\\n\\n    // Check newReserveFactor \\u2264 maxReserveFactor\\n    if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n      revert SetReserveFactorBoundsCheck();\\n    }\\n\\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\\n    reserveFactorMantissa = newReserveFactorMantissa;\\n\\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n   * @param addAmount Amount of addition to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addReservesInternal(uint256 addAmount) internal nonReentrant returns (uint256) {\\n    accrueInterest();\\n\\n    // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n    _addReservesFresh(addAmount);\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Add reserves by transferring from caller\\n   * @dev Requires fresh interest accrual\\n   * @param addAmount Amount of addition to reserves\\n   * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n   */\\n  function _addReservesFresh(uint256 addAmount) internal returns (uint256, uint256) {\\n    // totalReserves + actualAddAmount\\n    uint256 totalReservesNew;\\n    uint256 actualAddAmount;\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert AddReservesFactorFreshCheck(actualAddAmount);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the caller and the addAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional addAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *  it returns the amount actually transferred, in case of a fee.\\n     */\\n\\n    actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n    totalReservesNew = totalReserves + actualAddAmount;\\n\\n    // Store reserves[n+1] = reserves[n] + actualAddAmount\\n    totalReserves = totalReservesNew;\\n\\n    /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n    emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n    /* Return (NO_ERROR, actualAddAmount) */\\n    return (NO_ERROR, actualAddAmount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces reserves by transferring to admin\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReserves(uint256 reduceAmount) external override nonReentrant returns (uint256) {\\n    accrueInterest();\\n    // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n    return _reduceReservesFresh(reduceAmount);\\n  }\\n\\n  /**\\n   * @notice Reduces reserves by transferring to admin\\n   * @dev Requires fresh interest accrual\\n   * @param reduceAmount Amount of reduction to reserves\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _reduceReservesFresh(uint256 reduceAmount) internal returns (uint256) {\\n    // totalReserves - reduceAmount\\n    uint256 totalReservesNew;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert ReduceReservesAdminCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert ReduceReservesFreshCheck();\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashPrior() < reduceAmount) {\\n      revert ReduceReservesCashNotAvailable();\\n    }\\n\\n    // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n    if (reduceAmount > totalReserves) {\\n      revert ReduceReservesCashValidation();\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    totalReservesNew = totalReserves - reduceAmount;\\n\\n    // Store reserves[n+1] = reserves[n] - reduceAmount\\n    totalReserves = totalReservesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(admin, reduceAmount);\\n\\n    emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n   * @dev Admin function to accrue interest and update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) public override returns (uint256) {\\n    accrueInterest();\\n    // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n    return _setInterestRateModelFresh(newInterestRateModel);\\n  }\\n\\n  /**\\n   * @notice updates the interest rate model (*requires fresh interest accrual)\\n   * @dev Admin function to update the interest rate model\\n   * @param newInterestRateModel the new interest rate model to use\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint256) {\\n    // Used to store old model for use in the event that is emitted on success\\n    InterestRateModel oldInterestRateModel;\\n\\n    // Check caller is admin\\n    if (msg.sender != admin) {\\n      revert SetInterestRateModelOwnerCheck();\\n    }\\n\\n    // We fail gracefully unless market's block number equals current block number\\n    if (accrualBlockNumber != getBlockNumber()) {\\n      revert SetInterestRateModelFreshCheck();\\n    }\\n\\n    // Track the market's current interest rate model\\n    oldInterestRateModel = interestRateModel;\\n\\n    // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n    require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n    // Set the interest rate model to newInterestRateModel\\n    interestRateModel = newInterestRateModel;\\n\\n    // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n    return NO_ERROR;\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying owned by this contract\\n   */\\n  function getCashPrior() internal view virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n   *  This may revert due to insufficient balance or insufficient allowance.\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256);\\n\\n  /**\\n   * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n   *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n   *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n   */\\n  function doTransferOut(address payable to, uint256 amount) internal virtual;\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant() {\\n    require(_notEntered, \\\"re-entered\\\");\\n    _notEntered = false;\\n    _;\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0xd52e153aa531b02c88ee513e472ad49bee4e89bcc2613f8da7b830fe6eecab32\",\"license\":\"BSD-3-Clause\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  // Maximum borrow rate that can ever be applied (.0005% / block)\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  // Maximum fraction of interest that can be set aside for reserves\\n  uint256 internal constant reserveFactorMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address payable public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address payable public pendingAdmin;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  ComptrollerInterface public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  // Official record of token balances for each account\\n  mapping(address => uint256) internal accountTokens;\\n\\n  // Approved token transfer amounts on behalf of others\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  // Mapping of account addresses to outstanding borrow balances\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /**\\n   * @notice Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n  /**\\n   * @notice Indicator that this is a CToken contract (for inspection)\\n   */\\n  bool public constant isCToken = true;\\n\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Event emitted when comptroller is changed\\n   */\\n  event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external virtual returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  function approve(address spender, uint256 amount) external virtual returns (bool);\\n\\n  function allowance(address owner, address spender) external view virtual returns (uint256);\\n\\n  function balanceOf(address owner) external view virtual returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external virtual returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    virtual\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view virtual returns (uint256);\\n\\n  function supplyRatePerBlock() external view virtual returns (uint256);\\n\\n  function totalBorrowsCurrent() external virtual returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external virtual returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view virtual returns (uint256);\\n\\n  function exchangeRateCurrent() external virtual returns (uint256);\\n\\n  function exchangeRateStored() external view virtual returns (uint256);\\n\\n  function getCash() external view virtual returns (uint256);\\n\\n  function accrueInterest() external virtual returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setPendingAdmin(address payable newPendingAdmin) external virtual returns (uint256);\\n\\n  function _acceptAdmin() external virtual returns (uint256);\\n\\n  function _setComptroller(ComptrollerInterface newComptroller) external virtual returns (uint256);\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external virtual returns (uint256);\\n\\n  function _reduceReserves(uint256 reduceAmount) external virtual returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external virtual returns (uint256);\\n}\\n\\ncontract CErc20Storage {\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n  /*** User Interface ***/\\n\\n  function mint(uint256 mintAmount) external virtual returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external virtual returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external virtual returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    CTokenInterface cTokenCollateral\\n  ) external virtual returns (uint256);\\n\\n  function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n  /*** Admin Functions ***/\\n\\n  function _addReserves(uint256 addAmount) external virtual returns (uint256);\\n}\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementation(\\n    address implementation_,\\n    bool allowResign,\\n    bytes memory becomeImplementationData\\n  ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes memory data) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to forfeit its responsibility\\n   */\\n  function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0xaa6bfcd4fe0b67279a206fcd105ac409672f790c4a72c7c3ee4b1fb8db1fb4a1\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerG7.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Unitroller.sol\\\";\\nimport \\\"./Governance/Comp.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ncontract ComptrollerG7 is ComptrollerV5Storage, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when close factor is changed by admin\\n    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    /// @notice Emitted when price oracle is changed\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\n    event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);\\n\\n    /// @notice Emitted when a new COMP speed is set for a contributor\\n    event ContributorCompSpeedUpdated(address indexed contributor, uint newSpeed);\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when new borrower is whitelisted\\n    event BorrowerWhitelisted(address borrower);\\n\\n    /// @notice Emitted when borrower's limits are changed\\n    event BorrowerLimitChanged(address borrower, uint256 borrowLimit);\\n\\n    /// @notice Emitted when COMP is granted by admin\\n    event CompGranted(address recipient, uint amount);\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    // closeFactorMantissa must be strictly greater than this value\\n    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n    // closeFactorMantissa must not exceed this value\\n    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    address private _compAddress;\\n\\n    constructor(address compAddress) public {\\n        _compAddress = compAddress;\\n        admin = msg.sender;\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) override public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            results[i] = uint(addToMarketInternal(cToken, msg.sender));\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) override external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[address(cToken)];\\n\\n        /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n        if (!marketToExit.accountMembership[msg.sender]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[msg.sender];\\n\\n        /* Delete cToken from the account\\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[msg.sender];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == cToken) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        assert(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[msg.sender];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.pop();\\n\\n        emit MarketExited(cToken, msg.sender);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) override external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, minter);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) override external {\\n        // Shh - currently unused\\n        cToken;\\n        minter;\\n        actualMintAmount;\\n        mintTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) override external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, redeemer);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) override external {\\n        // Shh - currently unused\\n        cToken;\\n        redeemer;\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n    }\\n\\n    function whitelistBorrowerAdd(address borrower) public override returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BORROWER_LIMIT_CHECK);\\n        }\\n\\n        borrowerArray[borrower] = true;\\n        borrowLimit[borrower] = 0;\\n\\n        emit BorrowerWhitelisted(borrower);\\n\\n\\n        return 0;\\n    }\\n\\n    //Sets the notional limit of borrows for an address\\n    function setBorrowerLimits(address borrower, uint256 _borrowLimit) public override returns (uint) {\\n        if (msg.sender != admin || borrowerArray[borrower] != true) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BORROWER_LIMIT_CHECK);\\n        }\\n        borrowLimit[borrower] = _borrowLimit;\\n\\n        emit BorrowerLimitChanged(borrower, _borrowLimit);\\n\\n        return (_borrowLimit);\\n    }\\n\\n    //Returns the notional value of borrows allowed for a borrower\\n    function getBorrowerLimits(address borrower) public override view returns (uint256) {\\n        require(borrowerArray[borrower] == true, \\\"Address not permitted to borrow\\\");\\n        return borrowLimit[borrower];\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) override external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower]) {\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        uint borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) override external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) override external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        Exp memory borrowIndex = Exp({mantissa: CToken(cToken).borrowIndex()});\\n        updateCompBorrowIndex(cToken, borrowIndex);\\n        distributeBorrowerComp(cToken, borrower, borrowIndex);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) override external {\\n        // Shh - currently unused\\n        cToken;\\n        payer;\\n        borrower;\\n        actualRepayAmount;\\n        borrowerIndex;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) override external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) override external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) override external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cTokenCollateral);\\n        distributeSupplierComp(cTokenCollateral, borrower);\\n        distributeSupplierComp(cTokenCollateral, liquidator);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) override external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) override external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        // Keep the flywheel moving\\n        updateCompSupplyIndex(cToken);\\n        distributeSupplierComp(cToken, src);\\n        distributeSupplierComp(cToken, dst);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) override external {\\n        // Shh - currently unused\\n        cToken;\\n        src;\\n        dst;\\n        transferTokens;\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        Exp collateralFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\\n        return getHypotheticalAccountLiquidityInternal(account, CToken(address(0)), 0, 0);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) internal view returns (Error, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n\\n        /*\\n          Start with an assumed collateral value equal to the borrower limit. This sets a baseline for determining\\n          whether borrows and redemptions should be allowed\\n        */\\n        vars.sumCollateral = borrowLimit[account];\\n\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0);\\n            }\\n            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) override external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed));\\n        uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral));\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Sets a new price oracle for the comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Track the old oracle for the comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the closeFactor used when liquidating borrows\\n      * @dev Admin function to set closeFactor\\n      * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure\\n      */\\n    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        require(msg.sender == admin, \\\"only admin can set close factor\\\");\\n\\n        uint oldCloseFactorMantissa = closeFactorMantissa;\\n        closeFactorMantissa = newCloseFactorMantissa;\\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the market to the markets mapping and set it as listed\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param cToken The address of the market (token) to list\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportMarket(CToken cToken) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // Note that isComped is not in active use anymore\\n        Market storage market = markets[address(cToken)];\\n        market.isListed = true;\\n        market.isComped = false;\\n        market.collateralFactorMantissa = 0;\\n\\n        _addMarketInternal(address(cToken));\\n\\n        emit MarketListed(cToken);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n    }\\n\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\n        require(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"only admin or borrow cap guardian can set borrow caps\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    function _setSeizePaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        seizeGuardianPaused = state;\\n        emit ActionPaused(\\\"Seize\\\", state);\\n        return state;\\n    }\\n\\n    function _become(Unitroller unitroller) public {\\n        require(msg.sender == unitroller.admin(), \\\"only unitroller admin can change brains\\\");\\n        require(unitroller._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin, or this contract is becoming the new implementation\\n     */\\n    function adminOrInitializing() internal view returns (bool) {\\n        return msg.sender == admin || msg.sender == comptrollerImplementation;\\n    }\\n\\n    /*** Comp Distribution ***/\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function setCompSpeedInternal(CToken cToken, uint compSpeed) internal {\\n        uint currentCompSpeed = compSpeeds[address(cToken)];\\n        if (currentCompSpeed != 0) {\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompSupplyIndex(address(cToken));\\n            updateCompBorrowIndex(address(cToken), borrowIndex);\\n        } else if (compSpeed != 0) {\\n            // Add the COMP market\\n            Market storage market = markets[address(cToken)];\\n            require(market.isListed == true, \\\"comp market is not listed\\\");\\n\\n            if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) {\\n                compSupplyState[address(cToken)] = CompMarketState({\\n                    index: compInitialIndex,\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n                });\\n            }\\n\\n            if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {\\n                compBorrowState[address(cToken)] = CompMarketState({\\n                    index: compInitialIndex,\\n                    block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n                });\\n            }\\n        }\\n\\n        if (currentCompSpeed != compSpeed) {\\n            compSpeeds[address(cToken)] = compSpeed;\\n            emit CompSpeedUpdated(cToken, compSpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateCompSupplyIndex(address cToken) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint supplySpeed = compSpeeds[cToken];\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = CToken(cToken).totalSupply();\\n            uint compAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\n            compSupplyState[cToken] = CompMarketState({\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n                block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     */\\n    function updateCompBorrowIndex(address cToken, Exp memory marketBorrowIndex) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint borrowSpeed = compSpeeds[cToken];\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n            uint compAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\n            compBorrowState[cToken] = CompMarketState({\\n                index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n                block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierComp(address cToken, address supplier) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\n        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});\\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = compInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerComp(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\n        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});\\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n            compAccrued[borrower] = borrowerAccrued;\\n            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate additional accrued COMP for a contributor since last accrual\\n     * @param contributor The address to calculate contributor rewards for\\n     */\\n    function updateContributorRewards(address contributor) public {\\n        uint compSpeed = compContributorSpeeds[contributor];\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, lastContributorBlock[contributor]);\\n        if (deltaBlocks > 0 && compSpeed > 0) {\\n            uint newAccrued = mul_(deltaBlocks, compSpeed);\\n            uint contributorAccrued = add_(compAccrued[contributor], newAccrued);\\n\\n            compAccrued[contributor] = contributorAccrued;\\n            lastContributorBlock[contributor] = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(markets[address(cToken)].isListed, \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndex(address(cToken), borrowIndex);\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeBorrowerComp(address(cToken), holders[j], borrowIndex);\\n                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndex(address(cToken));\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeSupplierComp(address(cToken), holders[j]);\\n                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(address user, uint amount) internal returns (uint) {\\n        Comp comp = Comp(getCompAddress());\\n        uint compRemaining = comp.balanceOf(address(this));\\n        if (amount > 0 && amount <= compRemaining) {\\n            comp.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Transfer COMP to the recipient\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param recipient The address of the recipient to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     */\\n    function _grantComp(address recipient, uint amount) public {\\n        require(adminOrInitializing(), \\\"only admin can grant comp\\\");\\n        uint amountLeft = grantCompInternal(recipient, amount);\\n        require(amountLeft == 0, \\\"insufficient comp for grant\\\");\\n        emit CompGranted(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function _setCompSpeed(CToken cToken, uint compSpeed) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n        setCompSpeedInternal(cToken, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single contributor\\n     * @param contributor The contributor whose COMP speed to update\\n     * @param compSpeed New COMP speed for contributor\\n     */\\n    function _setContributorCompSpeed(address contributor, uint compSpeed) public {\\n        require(adminOrInitializing(), \\\"only admin can set comp speed\\\");\\n\\n        // note that COMP speed could be set to 0 to halt liquidity rewards for a contributor\\n        updateContributorRewards(contributor);\\n        if (compSpeed == 0) {\\n            // release storage\\n            delete lastContributorBlock[contributor];\\n        } else {\\n            lastContributorBlock[contributor] = getBlockNumber();\\n        }\\n        compContributorSpeeds[contributor] = compSpeed;\\n\\n        emit ContributorCompSpeedUpdated(contributor, compSpeed);\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    function getBlockNumber() public view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Return the address of the COMP token\\n     * @return The address of COMP\\n     */\\n    function getCompAddress() public pure returns (address) {\\n        return 0xfa372fF1547fa1a283B5112a4685F1358CE5574d;\\n    }\\n}\\n\",\"keccak256\":\"0x1fb90f89cd1b45cf8855147bddb254c0c78ee02c4594039076e80e882f999e5d\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external returns (uint[] memory);\\n    function exitMarket(address cToken) virtual external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) virtual external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function whitelistBorrowerAdd(address borrower) virtual external returns (uint);\\n    function setBorrowerLimits(address borrower, uint256 _borrowLimit) virtual external returns (uint);\\n    function getBorrowerLimits(address borrower) virtual external returns (uint);\\n\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) virtual external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) virtual external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) virtual external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) virtual external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xf134758e3111c2a25daed5c302a0abba27a7ae8190b3e2a0dc438c0b39cac602\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Active brains of Unitroller\\n   */\\n  address public comptrollerImplementation;\\n\\n  /**\\n   * @notice Pending brains of Unitroller\\n   */\\n  address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  PriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /**\\n   * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 public maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => CToken[]) public accountAssets;\\n\\n  mapping(address => bool) public borrowerArray;\\n\\n  mapping(address => uint256) public borrowLimit;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    //  Multiplier representing the most one can borrow against their collateral in this market.\\n    //  For instance, 0.9 to allow borrowing 90% of collateral value.\\n    //  Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n    // Whether or not this market receives COMP\\n    bool isComped;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  struct CompMarketState {\\n    // The market's last updated compBorrowIndex or compSupplyIndex\\n    uint224 index;\\n    // The block number the index was last updated at\\n    uint32 block;\\n  }\\n\\n  /// @notice A list of all markets\\n  CToken[] public allMarkets;\\n\\n  /// @notice The rate at which the flywheel distributes COMP, per block\\n  uint256 public compRate;\\n\\n  /// @notice The portion of compRate that each market currently receives\\n  mapping(address => uint256) public compSpeeds;\\n\\n  /// @notice The COMP market supply state for each market\\n  mapping(address => CompMarketState) public compSupplyState;\\n\\n  /// @notice The COMP market borrow state for each market\\n  mapping(address => CompMarketState) public compBorrowState;\\n\\n  /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n  /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n  mapping(address => mapping(address => uint256)) public compBorrowerIndex;\\n\\n  /// @notice The COMP accrued but not yet transferred to each user\\n  mapping(address => uint256) public compAccrued;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  address public borrowCapGuardian;\\n\\n  // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  mapping(address => uint256) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n  /// @notice The portion of COMP that each contributor receives per block\\n  mapping(address => uint256) public compContributorSpeeds;\\n\\n  /// @notice Last block at which a contributor's COMP rewards have been allocated\\n  mapping(address => uint256) public lastContributorBlock;\\n}\\n\\ncontract ComptrollerV6Storage is ComptrollerV5Storage {\\n  /// @notice The rate at which comp is distributed to the corresponding borrow market (per block)\\n  mapping(address => uint256) public compBorrowSpeeds;\\n\\n  /// @notice The rate at which comp is distributed to the corresponding supply market (per block)\\n  mapping(address => uint256) public compSupplySpeeds;\\n}\\n\\ncontract ComptrollerV7Storage is ComptrollerV6Storage {\\n  /// @notice Flag indicating whether the function to fix COMP accruals has been executed (RE: proposal 62 bug)\\n  bool public proposal65FixExecuted;\\n\\n  /// @notice Accounting storage mapping account addresses to how much COMP they owe the protocol.\\n  mapping(address => uint256) public compReceivable;\\n}\\n\",\"keccak256\":\"0x974bc8283eb079f3b97d8c4d611892616aa7a3ff71965d1527df9502e3e4447e\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x1ff5606c9d7a11d704e5c4ff1be29f55527c2f6bd44a48fc24ee1dd62e9642c4\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transfer(address dst, uint256 amount) external;\\n\\n  ///\\n  /// !!!!!!!!!!!!!!\\n  /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n  /// !!!!!!!!!!!!!!\\n  ///\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved\\n   * @return success Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining The number of tokens allowed to be spent\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x522854cfa3c975d7873c7c5f677508f86ddf11e0249c40887bb059469128c03e\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_ENTERED, // no longer possible\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_IMPLEMENTATION_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_MAX_ASSETS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    SET_BORROWER_LIMIT_CHECK\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  uint256 public constant NO_ERROR = 0; // support legacy return codes\\n\\n  error TransferComptrollerRejection(uint256 errorCode);\\n  error TransferNotAllowed();\\n  error TransferNotEnough();\\n  error TransferTooMuch();\\n\\n  error MintComptrollerRejection(uint256 errorCode);\\n  error MintFreshnessCheck();\\n\\n  error RedeemComptrollerRejection(uint256 errorCode);\\n  error RedeemFreshnessCheck();\\n  error RedeemTransferOutNotPossible();\\n\\n  error BorrowComptrollerRejection(uint256 errorCode);\\n  error BorrowFreshnessCheck();\\n  error BorrowCashNotAvailable();\\n\\n  error RepayBorrowComptrollerRejection(uint256 errorCode);\\n  error RepayBorrowFreshnessCheck();\\n\\n  error LiquidateComptrollerRejection(uint256 errorCode);\\n  error LiquidateFreshnessCheck();\\n  error LiquidateCollateralFreshnessCheck();\\n  error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n  error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n  error LiquidateLiquidatorIsBorrower();\\n  error LiquidateCloseAmountIsZero();\\n  error LiquidateCloseAmountIsUintMax();\\n  error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n  error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n  error LiquidateSeizeLiquidatorIsBorrower();\\n\\n  error AcceptAdminPendingAdminCheck();\\n\\n  error SetComptrollerOwnerCheck();\\n  error SetPendingAdminOwnerCheck();\\n\\n  error SetReserveFactorAdminCheck();\\n  error SetReserveFactorFreshCheck();\\n  error SetReserveFactorBoundsCheck();\\n\\n  error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n  error ReduceReservesAdminCheck();\\n  error ReduceReservesFreshCheck();\\n  error ReduceReservesCashNotAvailable();\\n  error ReduceReservesCashValidation();\\n\\n  error SetInterestRateModelOwnerCheck();\\n  error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0x6548acd1dce9582500263f3d877b7e73b97e3b89117f2172f46e99e65c623d52\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a + b;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a * b;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0x40c03bbff754258487b13f71c145ae2d8239a5368744f0ab11b0cab44717d6d6\",\"license\":\"BSD-3-Clause\"},\"contracts/Governance/Comp.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract Comp {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"Bonded dAMM\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"BDAMM\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint256 public constant totalSupply = 250000000e18; // 250 million bdAMM\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint256) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new Comp token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) public {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint256) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == type(uint256).max) {\\n      amount = type(uint96).max;\\n    } else {\\n      amount = safe96(rawAmount, \\\"BDAMM::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"BDAMM::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"BDAMM::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != type(uint96).max) {\\n      uint96 newAllowance = sub96(spenderAllowance, amount, \\\"BDAMM::transferFrom: transfer amount exceeds spender allowance\\\");\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"BDAMM::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"BDAMM::delegateBySig: invalid nonce\\\");\\n    require(block.timestamp <= expiry, \\\"BDAMM::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"BDAMM::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(\\n    address src,\\n    address dst,\\n    uint96 amount\\n  ) internal {\\n    require(src != address(0), \\\"BDAMM::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"BDAMM::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"BDAMM::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"BDAMM::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(\\n    address srcRep,\\n    address dstRep,\\n    uint96 amount\\n  ) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"BDAMM::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"BDAMM::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"BDAMM::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2**96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0x9ed43a38c491c0ba1c46c717336655b3e78204cb8429ff7b020cc81b75354f4b\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) external view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x43727226518030081cec4d53d9f3813bf0c74150d076beb45460de4544a66edb\",\"license\":\"BSD-3-Clause\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\n\\nabstract contract PriceOracle {\\n  /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n  bool public constant isPriceOracle = true;\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(CToken cToken) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x986aae6b8936226167bf0edd4da2cc7728d2e951868993cfb4f83661e40c3374\",\"license\":\"BSD-3-Clause\"},\"contracts/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is changed\\n   */\\n  event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @notice Emitted _compAddress is initially set (when accepting the first comptroller implementation)\\n   */\\n  event NewCompAddress(address oldAddress, address newAddress);\\n\\n  address private _compAddress;\\n\\n  constructor() {\\n    // Set admin to caller\\n    admin = msg.sender;\\n  }\\n\\n  /*** Admin Functions ***/\\n  function _setPendingImplementation(address newPendingImplementation) public returns (uint256) {\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n    }\\n\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = newPendingImplementation;\\n\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n   * @dev Admin function for new implementation to accept it's role as implementation\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptImplementation() public returns (uint256) {\\n    // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n    if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldImplementation = comptrollerImplementation;\\n    address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n    if (_compAddress == address(0)) {\\n      (bool success, bytes memory compAddress) = pendingComptrollerImplementation.call(abi.encodeWithSignature(\\\"getCompAddress()\\\"));\\n      require(success, \\\"failed at getCompAddress()\\\");\\n      _compAddress = abi.decode(compAddress, (address));\\n      emit NewCompAddress(address(0), _compAddress);\\n    }\\n\\n    comptrollerImplementation = pendingComptrollerImplementation;\\n\\n    pendingComptrollerImplementation = address(0);\\n\\n    emit NewImplementation(oldImplementation, comptrollerImplementation);\\n    emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n    // Check caller = admin\\n    if (msg.sender != admin) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store pendingAdmin with value newPendingAdmin\\n    pendingAdmin = newPendingAdmin;\\n\\n    // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    // Store admin with value pendingAdmin\\n    admin = pendingAdmin;\\n\\n    // Clear the pending value\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  fallback() external payable {\\n    // delegate all other functions to current implementation\\n    (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3b6820e7d983fbfe469dcfa5d86212226377d00b4e6aba0f7a2200c3c1de2912\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620052a0380380620052a0833981016040819052620000349162000063565b601b80546001600160a01b039092166001600160a01b0319928316179055600080549091163317905562000095565b6000602082840312156200007657600080fd5b81516001600160a01b03811681146200008e57600080fd5b9392505050565b6151fb80620000a56000396000f3fe608060405234801561001057600080fd5b506004361061047f5760003560e01c80636d35bf9111610257578063b21be7fd11610146578063dce15449116100c3578063e875544611610087578063e875544614610c07578063e9af029214610c10578063eabe7d9114610c23578063ede4edd014610c36578063f851a44014610c4957600080fd5b8063dce1544914610b97578063dcfbc0c714610baa578063de887e1a14610bbd578063e4028eee14610be0578063e6653f3d14610bf357600080fd5b8063c488847b1161010a578063c488847b14610afe578063ca0af04314610b26578063cc7ebdc414610b51578063d02f735114610b71578063da3d454c14610b8457600080fd5b8063b21be7fd14610a6d578063bb82aa5e14610a98578063bdcdc25814610aab578063bea6b8b814610abe578063c299823814610ade57600080fd5b806394b2294b116101d4578063a7f0e23111610198578063a7f0e231146109fa578063aa90075414610a28578063abfceffc14610a31578063ac0b0bb714610a51578063b0772d0b14610a6557600080fd5b806394b2294b14610991578063986ab8381461099a5780639d1b5a0a146109ba578063a5e30400146109d4578063a76b3fda146109e757600080fd5b806387f763031161021b57806387f763031461089e5780638c57804e146108b25780638e8f294b146108ea5780638ebf63641461093d578063929fe9a11461095057600080fd5b80636d35bf9114610834578063731f0c2b14610842578063741b2525146108655780637dc0d1d01461087857806386de666e1461088b57600080fd5b806347ef3b3b116103735780635c778605116102f05780636810dfa6116102b45780636810dfa6146107815780636a56947e146107945780636b79c38d146107a25780636bb49ac8146107fe5780636d154ea51461081157600080fd5b80635c778605146107225780635ec88c79146107355780635f5af1aa146107485780635fc7e71e1461075b578063607ef6c11461076e57600080fd5b80634fd42e17116103375780634fd42e17146106c357806351dff989146106d657806352d84d1e146106e957806355ee1fe1146106fc578063598ee1cb1461070f57600080fd5b806347ef3b3b146106435780634a584432146106595780634ada90af146106795780634e79238f146106825780634ef4c3e1146106b057600080fd5b806327efe3cb116104015780633bcf7ec1116103c55780633bcf7ec1146105ef5780633c94786f1461060257806341c728b91461061657806342cbb15c1461062a578063434caf251461063057600080fd5b806327efe3cb1461058357806328f5f502146105965780632d70db78146105b6578063317b0b77146105c9578063391957d7146105dc57600080fd5b80631ededc91116104485780631ededc911461050a57806321af45691461051f57806324008a621461054a57806324a3d6221461055d578063267822471461057057600080fd5b80627e3dd21461048457806318c882a5146104a15780631c3db2e0146104b45780631d504dc6146104c95780631d7b33d7146104dc575b600080fd5b61048c600181565b60405190151581526020015b60405180910390f35b61048c6104af366004614891565b610c5c565b6104c76104c23660046149a9565b610d9e565b005b6104c76104d73660046149f9565b610e01565b6104fc6104ea3660046149f9565b60116020526000908152604090205481565b604051908152602001610498565b6104c7610518366004614a16565b5050505050565b601754610532906001600160a01b031681565b6040516001600160a01b039091168152602001610498565b6104fc610558366004614a71565b610f7f565b600c54610532906001600160a01b031681565b600154610532906001600160a01b031681565b6104c7610591366004614ac2565b61103d565b6104fc6105a43660046149f9565b600a6020526000908152604090205481565b61048c6105c4366004614aee565b611134565b6104fc6105d7366004614b0b565b611224565b6104c76105ea3660046149f9565b6112cb565b61048c6105fd366004614891565b611395565b600c5461048c90600160a01b900460ff1681565b6104c7610624366004614b24565b50505050565b436104fc565b6104c761063e366004614ac2565b6114bf565b6104c7610651366004614b6a565b505050505050565b6104fc6106673660046149f9565b60186020526000908152604090205481565b6104fc60065481565b610695610690366004614b24565b611521565b60408051938452602084019290925290820152606001610498565b6104fc6106be366004614bd8565b611561565b6104fc6106d1366004614b0b565b611602565b6104c76106e4366004614b24565b61165f565b6105326106f7366004614b0b565b6116ae565b6104fc61070a3660046149f9565b6116d8565b6104c761071d366004614ac2565b611751565b6104c7610730366004614bd8565b505050565b6106956107433660046149f9565b611848565b6104fc6107563660046149f9565b611883565b6104fc610769366004614c19565b6118fc565b6104c761077c366004614cc9565b6119fd565b6104c761078f366004614d99565b611bdb565b6104c7610624366004614a71565b6107da6107b03660046149f9565b6012602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff909116602083015201610498565b6104fc61080c3660046149f9565b611eba565b61048c61081f3660046149f9565b600e6020526000908152604090205460ff1681565b6104c7610518366004614c19565b61048c6108503660046149f9565b600d6020526000908152604090205460ff1681565b6104c76108733660046149f9565b611f43565b600454610532906001600160a01b031681565b6104fc610899366004614ac2565b611fef565b600c5461048c90600160b01b900460ff1681565b6107da6108c03660046149f9565b6013602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b61091e6108f83660046149f9565b600b6020526000908152604090208054600182015460039092015460ff91821692911683565b6040805193151584526020840192909252151590820152606001610498565b61048c61094b366004614aee565b612091565b61048c61095e366004614e22565b6001600160a01b038082166000908152600b60209081526040808320938616835260029093019052205460ff1692915050565b6104fc60075481565b6104fc6109a83660046149f9565b60196020526000908152604090205481565b73fa372ff1547fa1a283b5112a4685f1358ce5574d610532565b6104fc6109e23660046149f9565b612178565b6104fc6109f53660046149f9565b612200565b610a106ec097ce7bc90715b34b9f100000000081565b6040516001600160e01b039091168152602001610498565b6104fc60105481565b610a44610a3f3660046149f9565b612329565b6040516104989190614e50565b600c5461048c90600160b81b900460ff1681565b610a4461239f565b6104fc610a7b366004614e22565b601460209081526000928352604080842090915290825290205481565b600254610532906001600160a01b031681565b6104fc610ab9366004614a71565b612401565b6104fc610acc3660046149f9565b601a6020526000908152604090205481565b610af1610aec366004614e9d565b61248c565b6040516104989190614ed2565b610b11610b0c366004614bd8565b612554565b60408051928352602083019190915201610498565b6104fc610b34366004614e22565b601560209081526000928352604080842090915290825290205481565b6104fc610b5f3660046149f9565b60166020526000908152604090205481565b6104fc610b7f366004614c19565b612772565b6104fc610b92366004614bd8565b612919565b610532610ba5366004614ac2565b612cec565b600354610532906001600160a01b031681565b61048c610bcb3660046149f9565b60096020526000908152604090205460ff1681565b6104fc610bee366004614ac2565b612d24565b600c5461048c90600160a81b900460ff1681565b6104fc60055481565b6104c7610c1e3660046149f9565b612eaf565b6104fc610c31366004614bd8565b612f13565b6104fc610c443660046149f9565b612f4e565b600054610532906001600160a01b031681565b6001600160a01b0382166000908152600b602052604081205460ff16610c9d5760405162461bcd60e51b8152600401610c9490614f0a565b60405180910390fd5b600c546001600160a01b0316331480610cc057506000546001600160a01b031633145b610cdc5760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b0316331480610cf757506001821515145b610d135760405162461bcd60e51b8152600401610c9490614f99565b6001600160a01b0383166000818152600e6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110610dd457610dd4614fd0565b60200260200101906001600160a01b031690816001600160a01b0316815250506107308183600180611bdb565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190614fe6565b6001600160a01b0316336001600160a01b031614610ed35760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610c94565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190615003565b15610f7c5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610c94565b50565b6001600160a01b0384166000908152600b602052604081205460ff16610fa757506009611035565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110169190615003565b9052905061102486826132b3565b61102f868583613513565b60009150505b949350505050565b611045613679565b6110915760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610c94565b600061109d83836136a2565b905080156110ed5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610c94565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600c546000906001600160a01b031633148061115a57506000546001600160a01b031633145b6111765760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b031633148061119157506001821515145b6111ad5760405162461bcd60e51b8152600401610c9490614f99565b600c8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906112189084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b0316331461127f5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610c94565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146113345760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610c94565b601780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0382166000908152600b602052604081205460ff166113cd5760405162461bcd60e51b8152600401610c9490614f0a565b600c546001600160a01b03163314806113f057506000546001600160a01b031633145b61140c5760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b031633148061142757506001821515145b6114435760405162461bcd60e51b8152600401610c9490614f99565b6001600160a01b0383166000818152600d6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610d8d565b6114c7613679565b6115135760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610c94565b61151d82826137c7565b5050565b6000806000806000806115368a8a8a8a613afe565b92509250925082601181111561154e5761154e61501c565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600d602052604081205460ff16156115bb5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610c94565b6001600160a01b0384166000908152600b602052604090205460ff166115e55760095b90506112c4565b6115ee84613e48565b6115f8848461409e565b6000949350505050565b600080546001600160a01b0316331461162157610d986001600b614242565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec131691016112b9565b8015801561166d5750600082115b156106245760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610c94565b600f81815481106116be57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b031633146116f757610d9860016010614242565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291016112b9565b611759613679565b6117a55760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610c94565b6117ae82611f43565b806000036117d4576001600160a01b0382166000908152601a60205260408120556117ef565b436001600160a01b0383166000908152601a60205260409020555b6001600160a01b03821660008181526019602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b39061183c9084815260200190565b60405180910390a25050565b60008060008060008061185f876000806000613afe565b9250925092508260118111156118775761187761501c565b97919650945092505050565b600080546001600160a01b031633146118a257610d9860016013614242565b600c80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e91016112b9565b6001600160a01b0385166000908152600b602052604081205460ff16158061193d57506001600160a01b0385166000908152600b602052604090205460ff16155b1561194c5760095b90506119f4565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190615003565b905060006119d86040518060200160405280600554815250836142bb565b9050808411156119ed576011925050506119f4565b6000925050505b95945050505050565b6000546001600160a01b0316331480611a2057506017546001600160a01b031633145b611a8a5760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610c94565b82818115801590611a9a57508082145b611ad65760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610c94565b60005b82811015611bd257848482818110611af357611af3614fd0565b9050602002013560186000898985818110611b1057611b10614fd0565b9050602002016020810190611b2591906149f9565b6001600160a01b03168152602081019190915260400160002055868682818110611b5157611b51614fd0565b9050602002016020810190611b6691906149f9565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ba257611ba2614fd0565b90506020020135604051611bb891815260200190565b60405180910390a280611bca81615048565b915050611ad9565b50505050505050565b60005b8351811015610518576000848281518110611bfb57611bfb614fd0565b6020908102919091018101516001600160a01b0381166000908152600b90925260409091205490915060ff16611c6b5760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610c94565b831515600103611ddb5760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce49190615003565b90529050611cf282826132b3565b60005b8751811015611dd857611d2283898381518110611d1457611d14614fd0565b602002602001015184613513565b611d83888281518110611d3757611d37614fd0565b6020026020010151601660008b8581518110611d5557611d55614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546136a2565b601660008a8481518110611d9957611d99614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611dd090615048565b915050611cf5565b50505b821515600103611ea757611dee81613e48565b60005b8651811015611ea557611e1d82888381518110611e1057611e10614fd0565b602002602001015161409e565b611e50878281518110611e3257611e32614fd0565b6020026020010151601660008a8581518110611d5557611d55614fd0565b60166000898481518110611e6657611e66614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611e9d90615048565b915050611df1565b505b5080611eb281615048565b915050611bde565b6001600160a01b03811660009081526009602052604081205460ff161515600114611f275760405162461bcd60e51b815260206004820152601f60248201527f41646472657373206e6f74207065726d697474656420746f20626f72726f77006044820152606401610c94565b506001600160a01b03166000908152600a602052604090205490565b6001600160a01b038116600090815260196020908152604080832054601a90925282205490914391611f769083906142d3565b9050600081118015611f885750600083115b15610624576000611f9982856142df565b6001600160a01b03861660009081526016602052604081205491925090611fc090836142eb565b6001600160a01b038716600090815260166020908152604080832093909355601a905220849055505050505050565b600080546001600160a01b03163314158061202857506001600160a01b03831660009081526009602052604090205460ff161515600114155b156120405761203960016014614242565b9050610d98565b6001600160a01b0383166000818152600a6020908152604091829020859055815192835282018490527fe3443d75173e872722db2eea82e110ccd8843f3e0424238f2cd44df9bfbf6c1a9101610d8d565b600c546000906001600160a01b03163314806120b757506000546001600160a01b031633145b6120d35760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b03163314806120ee57506001821515145b61210a5760405162461bcd60e51b8152600401610c9490614f99565b600c8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906112189084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b600080546001600160a01b0316331461219757610d9860016014614242565b6001600160a01b0382166000818152600960209081526040808320805460ff19166001179055600a82528083209290925590519182527f3df9dd335cae22b62876375e06362e2fbe8ab586f724f378560e1aaa06bc00d7910160405180910390a1506000919050565b600080546001600160a01b0316331461221f57610d9860016012614242565b6001600160a01b0382166000908152600b602052604090205460ff161561224c57610d98600a6011614242565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae9190615061565b506001600160a01b0382166000908152600b602052604081208054600160ff19918216811783556003830180549092169091558101919091556122f0836142f7565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f906020016112b9565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083526060949383018282801561239257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612374575b5093979650505050505050565b6060600f8054806020026020016040519081016040528092919081815260200182805480156123f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116123d9575b5050505050905090565b600c54600090600160b01b900460ff16156124535760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610c94565b60006124608686856143df565b9050801561246f579050611035565b61247886613e48565b612482868661409e565b61102f868561409e565b805160609060008167ffffffffffffffff8111156124ac576124ac6148ca565b6040519080825280602002602001820160405280156124d5578160200160208202803683370190505b50905060005b8281101561254c5760008582815181106124f7576124f7614fd0565b6020026020010151905061250b813361443e565b601181111561251c5761251c61501c565b83838151811061252e5761252e614fd0565b6020908102919091010152508061254481615048565b9150506124db565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156125a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cb9190615003565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561261d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126419190615003565b905081158061264e575080155b1561266257600d600093509350505061276a565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c69190615003565b905060006126e06040518060200160405280600081525090565b60408051602080820183526000808352835180830185529081528351808301855260065481528451928301909452888252919261271c91614532565b9250612744604051806020016040528088815250604051806020016040528088815250614532565b9150612750838361457a565b905061275c818b6142bb565b600099509750505050505050505b935093915050565b600c54600090600160b81b900460ff16156127c15760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610c94565b6001600160a01b0386166000908152600b602052604090205460ff16158061280257506001600160a01b0385166000908152600b602052604090205460ff16155b1561280e576009611945565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561284c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190614fe6565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190614fe6565b6001600160a01b0316146128f0576002611945565b6128f986613e48565b612903868461409e565b61290d868561409e565b60009695505050505050565b6001600160a01b0383166000908152600e602052604081205460ff16156129755760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610c94565b6001600160a01b0384166000908152600b602052604090205460ff1661299c5760096115de565b6001600160a01b038085166000908152600b60209081526040808320938716835260029093019052205460ff16612a9957336001600160a01b03851614612a1d5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610c94565b6000612a29338561443e565b90506000816011811115612a3f57612a3f61501c565b14612a5e57806011811115612a5657612a5661501c565b9150506112c4565b6001600160a01b038086166000908152600b60209081526040808320938816835260029093019052205460ff16612a9757612a9761507e565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b099190615003565b600003612b1757600d6115de565b6001600160a01b0384166000908152601860205260409020548015612bfc576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9a9190615003565b90506000612ba882866142eb565b9050828110612bf95760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610c94565b50505b600080612c0c8688600088613afe565b91935090915060009050826011811115612c2857612c2861501c565b14612c4957816011811115612c3f57612c3f61501c565b93505050506112c4565b8015612c56576004612c3f565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190615003565b90529050612cd388826132b3565b612cde888883613513565b600098975050505050505050565b60086020528160005260406000208181548110612d0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b03163314612d435761203960016006614242565b6001600160a01b0383166000908152600b60205260409020805460ff16612d7857612d7060096007614242565b915050610d98565b60408051602080820183528582528251908101909252670c7d713b49da0000825290612da681835190511090565b15612dc157612db760066008614242565b9350505050610d98565b8415801590612e3d57506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190615003565b155b15612e4e57612db7600d6009614242565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b610f7c81600f805480602002602001604051908101604052809291908181526020018280548015612f0957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612eeb575b5050505050610d9e565b600080612f218585856143df565b90508015612f305790506112c4565b612f3985613e48565b612f43858561409e565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015612f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc19190615094565b50925092509250826000146130265760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610c94565b801561304257613038600c6002614242565b9695505050505050565b600061304f8733856143df565b9050801561306f57613064600e6003836145b4565b979650505050505050565b6001600160a01b0385166000908152600b60209081526040808320338452600281019092529091205460ff166130ad57600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561311f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613101575b5050835193945083925060009150505b8281101561318357896001600160a01b031684828151811061315357613153614fd0565b60200260200101516001600160a01b03160361317157809150613183565b8061317b81615048565b91505061312f565b508181106131935761319361507e565b336000908152600860205260409020805481906131b2906001906150ca565b815481106131c2576131c2614fd0565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106131f2576131f2614fd0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613230576132306150e1565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d90613299908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b6001600160a01b0382166000908152601360209081526040808320601190925282205490914383549091506000906132f9908390600160e01b900463ffffffff166142d3565b905060008111801561330b5750600083115b156134b957600061337d876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015613353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133779190615003565b8761462c565b9050600061338b83866142df565b905060008083116133ab57604051806020016040528060008152506133b5565b6133b5828461464a565b604080516020810190915288546001600160e01b031681529091506000906133dd9083614686565b9050604051806040016040528061342d83600001516040518060400160405280601a81526020017f6e657720696e64657820657863656564732032323420626974730000000000008152506146b2565b6001600160e01b03168152602001613468886040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038c16600090815260136020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555061065192505050565b8015610651576134ec826040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b0380841660008181526013602090815260408083208151808401835281546001600160e01b0316815282518085018452958552601584528285209689168086528785529285208054875281519390955295909252909155815190929190156106515760006135888383614709565b6040516395dd919360e01b81526001600160a01b0388811660048301529192506000916135d991908a16906395dd919390602401602060405180830381865afa158015613353573d6000803e3d6000fd5b905060006135e78284614735565b6001600160a01b0389166000908152601660205260408120549192509061360e90836142eb565b6001600160a01b038a81166000818152601660209081526040918290208590558a518251888152918201529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061369d57506002546001600160a01b031633145b905090565b60008073fa372ff1547fa1a283b5112a4685f1358ce5574d6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137289190615003565b905060008411801561373a5750808411155b156137be5760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af115801561378e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b29190615061565b50600092505050610d98565b50919392505050565b6001600160a01b03821660009081526011602052604090205480156138725760006040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138559190615003565b9052905061386284613e48565b61386c84826132b3565b50613a9d565b8115613a9d576001600160a01b0383166000908152600b60205260409020805460ff1615156001146138e65760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610c94565b6001600160a01b0384166000908152601260205260409020546001600160e01b031615801561393857506001600160a01b038416600090815260126020526040902054600160e01b900463ffffffff16155b156139d357604080518082019091526ec097ce7bc90715b34b9f100000000081526020810161398b435b6040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038616600090815260126020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555b6001600160a01b0384166000908152601360205260409020546001600160e01b0316158015613a2557506001600160a01b038416600090815260136020526040902054600160e01b900463ffffffff16155b15613a9b57604080518082019091526ec097ce7bc90715b34b9f1000000000815260208101613a5343613962565b63ffffffff9081169091526001600160a01b038616600090815260136020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555b505b818114610730576001600160a01b03831660008181526011602052604090819020849055517f2ab93f65628379309f36cb125e90d7c902454a545c4f8b8cb0794af75c24b80790613af19085815260200190565b60405180910390a2505050565b6000806000613b0b6147cc565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b7257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b54575b5050506001600160a01b038d166000908152600a6020526040812054875292935050505b8151811015613df2576000828281518110613bb357613bb3614fd0565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2c9190615094565b60808901526060880152604087015293508315613c5857600f6000809750975097505050505050611557565b60408051602080820183526001600160a01b038481166000818152600b845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d019190615003565b60a08601819052600003613d2457600d6000809750975097505050505050611557565b604080516020810190915260a0860151815261010086015260c085015160e0860151613d5e91613d5391614532565b866101000151614532565b610120860181905260408601518651613d7892919061475f565b855261010085015160608601516020870151613d9592919061475f565b60208601526001600160a01b03808c1690821603613ddf57613dc18561012001518b876020015161475f565b60208601819052610100860151613dd9918b9061475f565b60208601525b5080613dea81615048565b915050613b96565b50602083015183511115613e235760208301518351600091613e13916150ca565b6000955095509550505050611557565b60008084600001518560200151613e3a91906150ca565b955095509550505050611557565b6001600160a01b038116600090815260126020908152604080832060119092528220549091438354909150600090613e8e908390600160e01b900463ffffffff166142d3565b9050600081118015613ea05750600083115b15614045576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f099190615003565b90506000613f1783866142df565b90506000808311613f375760405180602001604052806000815250613f41565b613f41828461464a565b604080516020810190915288546001600160e01b03168152909150600090613f699083614686565b90506040518060400160405280613fb983600001516040518060400160405280601a81526020017f6e657720696e64657820657863656564732032323420626974730000000000008152506146b2565b6001600160e01b03168152602001613ff4886040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038b16600090815260126020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555061051892505050565b801561051857614078826040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b845463ffffffff91909116600160e01b026001600160e01b039091161784555050505050565b6001600160a01b0380831660008181526012602090815260408083208151808401835281546001600160e01b031681528251808501845295855260148452828520968816808652878552928520805487528151939095529590925290915581519092919015801561410f5750815115155b15614127576ec097ce7bc90715b34b9f100000000081525b60006141338383614709565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa15801561417f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a39190615003565b905060006141b18284614735565b6001600160a01b038816600090815260166020526040812054919250906141d890836142eb565b6001600160a01b038981166000818152601660209081526040918290208590558a518251888152918201529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156142775761427761501c565b8360148111156142895761428961501c565b60408051928352602083019190915260009082015260600160405180910390a18260118111156112c4576112c461501c565b6000806142c88484614780565b9050611035816147a8565b60006112c482846150ca565b60006112c482846150f7565b60006112c48284615116565b60005b600f5481101561438c57816001600160a01b0316600f828154811061432157614321614fd0565b6000918252602090912001546001600160a01b03160361437a5760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610c94565b8061438481615048565b9150506142fa565b50600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152600b602052604081205460ff166144065760096115de565b6001600160a01b038085166000908152600b60209081526040808320938716835260029093019052205460ff166115f85760006115de565b6001600160a01b0382166000908152600b60205260408120805460ff16614469576009915050610d98565b6001600160a01b038316600090815260028201602052604090205460ff16151560010361449a576000915050610d98565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614567866000015186600001516142df565b614571919061512e565b90529392505050565b60408051602081019091526000815260405180602001604052806145716145ad8660000151670de0b6b3a76400006142df565b85516147c0565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08460118111156145e9576145e961501c565b8460148111156145fb576145fb61501c565b604080519283526020830191909152810184905260600160405180910390a18360118111156110355761103561501c565b60006112c461464384670de0b6b3a76400006142df565b83516147c0565b6040805160208101909152600081526040518060200160405280614571614680866ec097ce7bc90715b34b9f10000000006142df565b856147c0565b6040805160208101909152600081526040518060200160405280614571856000015185600001516142eb565b600081600160e01b84106146d95760405162461bcd60e51b8152600401610c949190615150565b509192915050565b60008164010000000084106146d95760405162461bcd60e51b8152600401610c949190615150565b6040805160208101909152600081526040518060200160405280614571856000015185600001516142d3565b60006ec097ce7bc90715b34b9f10000000006147558484600001516142df565b6112c4919061512e565b60008061476c8585614780565b90506119f461477a826147a8565b846142eb565b60408051602081019091526000815260405180602001604052806145718560000151856142df565b8051600090610d9890670de0b6b3a76400009061512e565b60006112c4828461512e565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016148186040518060200160405280600081525090565b81526020016148336040518060200160405280600081525090565b815260200161484e6040518060200160405280600081525090565b81526020016148696040518060200160405280600081525090565b905290565b6001600160a01b0381168114610f7c57600080fd5b8015158114610f7c57600080fd5b600080604083850312156148a457600080fd5b82356148af8161486e565b915060208301356148bf81614883565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614909576149096148ca565b604052919050565b600067ffffffffffffffff82111561492b5761492b6148ca565b5060051b60200190565b600082601f83011261494657600080fd5b8135602061495b61495683614911565b6148e0565b82815260059290921b8401810191818101908684111561497a57600080fd5b8286015b8481101561499e5780356149918161486e565b835291830191830161497e565b509695505050505050565b600080604083850312156149bc57600080fd5b82356149c78161486e565b9150602083013567ffffffffffffffff8111156149e357600080fd5b6149ef85828601614935565b9150509250929050565b600060208284031215614a0b57600080fd5b81356112c48161486e565b600080600080600060a08688031215614a2e57600080fd5b8535614a398161486e565b94506020860135614a498161486e565b93506040860135614a598161486e565b94979396509394606081013594506080013592915050565b60008060008060808587031215614a8757600080fd5b8435614a928161486e565b93506020850135614aa28161486e565b92506040850135614ab28161486e565b9396929550929360600135925050565b60008060408385031215614ad557600080fd5b8235614ae08161486e565b946020939093013593505050565b600060208284031215614b0057600080fd5b81356112c481614883565b600060208284031215614b1d57600080fd5b5035919050565b60008060008060808587031215614b3a57600080fd5b8435614b458161486e565b93506020850135614b558161486e565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614b8357600080fd5b8635614b8e8161486e565b95506020870135614b9e8161486e565b94506040870135614bae8161486e565b93506060870135614bbe8161486e565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614bed57600080fd5b8335614bf88161486e565b92506020840135614c088161486e565b929592945050506040919091013590565b600080600080600060a08688031215614c3157600080fd5b8535614c3c8161486e565b94506020860135614c4c8161486e565b93506040860135614c5c8161486e565b92506060860135614c6c8161486e565b949793965091946080013592915050565b60008083601f840112614c8f57600080fd5b50813567ffffffffffffffff811115614ca757600080fd5b6020830191508360208260051b8501011115614cc257600080fd5b9250929050565b60008060008060408587031215614cdf57600080fd5b843567ffffffffffffffff80821115614cf757600080fd5b614d0388838901614c7d565b90965094506020870135915080821115614d1c57600080fd5b50614d2987828801614c7d565b95989497509550505050565b600082601f830112614d4657600080fd5b81356020614d5661495683614911565b82815260059290921b84018101918181019086841115614d7557600080fd5b8286015b8481101561499e578035614d8c8161486e565b8352918301918301614d79565b60008060008060808587031215614daf57600080fd5b843567ffffffffffffffff80821115614dc757600080fd5b614dd388838901614d35565b95506020870135915080821115614de957600080fd5b50614df687828801614935565b9350506040850135614e0781614883565b91506060850135614e1781614883565b939692955090935050565b60008060408385031215614e3557600080fd5b8235614e408161486e565b915060208301356148bf8161486e565b6020808252825182820181905260009190848201906040850190845b81811015614e915783516001600160a01b031683529284019291840191600101614e6c565b50909695505050505050565b600060208284031215614eaf57600080fd5b813567ffffffffffffffff811115614ec657600080fd5b61103584828501614d35565b6020808252825182820181905260009190848201906040850190845b81811015614e9157835183529284019291840191600101614eee565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b60208082526016908201527f6f6e6c792061646d696e2063616e20756e706175736500000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614ff857600080fd5b81516112c48161486e565b60006020828403121561501557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161505a5761505a615032565b5060010190565b60006020828403121561507357600080fd5b81516112c481614883565b634e487b7160e01b600052600160045260246000fd5b600080600080608085870312156150aa57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000828210156150dc576150dc615032565b500390565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561511157615111615032565b500290565b6000821982111561512957615129615032565b500190565b60008261514b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b8181101561517d57858101830151858201604001528201615161565b8181111561518f576000604083870101525b50601f01601f191692909201604001939250505056fe626c6f636b206e756d6265722065786365656473203332206269747300000000a26469706673582212207f39fc0c2ab51b946d47127076c4281ff9830ea288581a9201620c084b6a2a1964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061047f5760003560e01c80636d35bf9111610257578063b21be7fd11610146578063dce15449116100c3578063e875544611610087578063e875544614610c07578063e9af029214610c10578063eabe7d9114610c23578063ede4edd014610c36578063f851a44014610c4957600080fd5b8063dce1544914610b97578063dcfbc0c714610baa578063de887e1a14610bbd578063e4028eee14610be0578063e6653f3d14610bf357600080fd5b8063c488847b1161010a578063c488847b14610afe578063ca0af04314610b26578063cc7ebdc414610b51578063d02f735114610b71578063da3d454c14610b8457600080fd5b8063b21be7fd14610a6d578063bb82aa5e14610a98578063bdcdc25814610aab578063bea6b8b814610abe578063c299823814610ade57600080fd5b806394b2294b116101d4578063a7f0e23111610198578063a7f0e231146109fa578063aa90075414610a28578063abfceffc14610a31578063ac0b0bb714610a51578063b0772d0b14610a6557600080fd5b806394b2294b14610991578063986ab8381461099a5780639d1b5a0a146109ba578063a5e30400146109d4578063a76b3fda146109e757600080fd5b806387f763031161021b57806387f763031461089e5780638c57804e146108b25780638e8f294b146108ea5780638ebf63641461093d578063929fe9a11461095057600080fd5b80636d35bf9114610834578063731f0c2b14610842578063741b2525146108655780637dc0d1d01461087857806386de666e1461088b57600080fd5b806347ef3b3b116103735780635c778605116102f05780636810dfa6116102b45780636810dfa6146107815780636a56947e146107945780636b79c38d146107a25780636bb49ac8146107fe5780636d154ea51461081157600080fd5b80635c778605146107225780635ec88c79146107355780635f5af1aa146107485780635fc7e71e1461075b578063607ef6c11461076e57600080fd5b80634fd42e17116103375780634fd42e17146106c357806351dff989146106d657806352d84d1e146106e957806355ee1fe1146106fc578063598ee1cb1461070f57600080fd5b806347ef3b3b146106435780634a584432146106595780634ada90af146106795780634e79238f146106825780634ef4c3e1146106b057600080fd5b806327efe3cb116104015780633bcf7ec1116103c55780633bcf7ec1146105ef5780633c94786f1461060257806341c728b91461061657806342cbb15c1461062a578063434caf251461063057600080fd5b806327efe3cb1461058357806328f5f502146105965780632d70db78146105b6578063317b0b77146105c9578063391957d7146105dc57600080fd5b80631ededc91116104485780631ededc911461050a57806321af45691461051f57806324008a621461054a57806324a3d6221461055d578063267822471461057057600080fd5b80627e3dd21461048457806318c882a5146104a15780631c3db2e0146104b45780631d504dc6146104c95780631d7b33d7146104dc575b600080fd5b61048c600181565b60405190151581526020015b60405180910390f35b61048c6104af366004614891565b610c5c565b6104c76104c23660046149a9565b610d9e565b005b6104c76104d73660046149f9565b610e01565b6104fc6104ea3660046149f9565b60116020526000908152604090205481565b604051908152602001610498565b6104c7610518366004614a16565b5050505050565b601754610532906001600160a01b031681565b6040516001600160a01b039091168152602001610498565b6104fc610558366004614a71565b610f7f565b600c54610532906001600160a01b031681565b600154610532906001600160a01b031681565b6104c7610591366004614ac2565b61103d565b6104fc6105a43660046149f9565b600a6020526000908152604090205481565b61048c6105c4366004614aee565b611134565b6104fc6105d7366004614b0b565b611224565b6104c76105ea3660046149f9565b6112cb565b61048c6105fd366004614891565b611395565b600c5461048c90600160a01b900460ff1681565b6104c7610624366004614b24565b50505050565b436104fc565b6104c761063e366004614ac2565b6114bf565b6104c7610651366004614b6a565b505050505050565b6104fc6106673660046149f9565b60186020526000908152604090205481565b6104fc60065481565b610695610690366004614b24565b611521565b60408051938452602084019290925290820152606001610498565b6104fc6106be366004614bd8565b611561565b6104fc6106d1366004614b0b565b611602565b6104c76106e4366004614b24565b61165f565b6105326106f7366004614b0b565b6116ae565b6104fc61070a3660046149f9565b6116d8565b6104c761071d366004614ac2565b611751565b6104c7610730366004614bd8565b505050565b6106956107433660046149f9565b611848565b6104fc6107563660046149f9565b611883565b6104fc610769366004614c19565b6118fc565b6104c761077c366004614cc9565b6119fd565b6104c761078f366004614d99565b611bdb565b6104c7610624366004614a71565b6107da6107b03660046149f9565b6012602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff909116602083015201610498565b6104fc61080c3660046149f9565b611eba565b61048c61081f3660046149f9565b600e6020526000908152604090205460ff1681565b6104c7610518366004614c19565b61048c6108503660046149f9565b600d6020526000908152604090205460ff1681565b6104c76108733660046149f9565b611f43565b600454610532906001600160a01b031681565b6104fc610899366004614ac2565b611fef565b600c5461048c90600160b01b900460ff1681565b6107da6108c03660046149f9565b6013602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b61091e6108f83660046149f9565b600b6020526000908152604090208054600182015460039092015460ff91821692911683565b6040805193151584526020840192909252151590820152606001610498565b61048c61094b366004614aee565b612091565b61048c61095e366004614e22565b6001600160a01b038082166000908152600b60209081526040808320938616835260029093019052205460ff1692915050565b6104fc60075481565b6104fc6109a83660046149f9565b60196020526000908152604090205481565b73fa372ff1547fa1a283b5112a4685f1358ce5574d610532565b6104fc6109e23660046149f9565b612178565b6104fc6109f53660046149f9565b612200565b610a106ec097ce7bc90715b34b9f100000000081565b6040516001600160e01b039091168152602001610498565b6104fc60105481565b610a44610a3f3660046149f9565b612329565b6040516104989190614e50565b600c5461048c90600160b81b900460ff1681565b610a4461239f565b6104fc610a7b366004614e22565b601460209081526000928352604080842090915290825290205481565b600254610532906001600160a01b031681565b6104fc610ab9366004614a71565b612401565b6104fc610acc3660046149f9565b601a6020526000908152604090205481565b610af1610aec366004614e9d565b61248c565b6040516104989190614ed2565b610b11610b0c366004614bd8565b612554565b60408051928352602083019190915201610498565b6104fc610b34366004614e22565b601560209081526000928352604080842090915290825290205481565b6104fc610b5f3660046149f9565b60166020526000908152604090205481565b6104fc610b7f366004614c19565b612772565b6104fc610b92366004614bd8565b612919565b610532610ba5366004614ac2565b612cec565b600354610532906001600160a01b031681565b61048c610bcb3660046149f9565b60096020526000908152604090205460ff1681565b6104fc610bee366004614ac2565b612d24565b600c5461048c90600160a81b900460ff1681565b6104fc60055481565b6104c7610c1e3660046149f9565b612eaf565b6104fc610c31366004614bd8565b612f13565b6104fc610c443660046149f9565b612f4e565b600054610532906001600160a01b031681565b6001600160a01b0382166000908152600b602052604081205460ff16610c9d5760405162461bcd60e51b8152600401610c9490614f0a565b60405180910390fd5b600c546001600160a01b0316331480610cc057506000546001600160a01b031633145b610cdc5760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b0316331480610cf757506001821515145b610d135760405162461bcd60e51b8152600401610c9490614f99565b6001600160a01b0383166000818152600e6020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a0015b60405180910390a150805b92915050565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110610dd457610dd4614fd0565b60200260200101906001600160a01b031690816001600160a01b0316815250506107308183600180611bdb565b806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190614fe6565b6001600160a01b0316336001600160a01b031614610ed35760405162461bcd60e51b815260206004820152602760248201527f6f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676560448201526620627261696e7360c81b6064820152608401610c94565b806001600160a01b031663c1e803346040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190615003565b15610f7c5760405162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b6044820152606401610c94565b50565b6001600160a01b0384166000908152600b602052604081205460ff16610fa757506009611035565b60006040518060200160405280876001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110169190615003565b9052905061102486826132b3565b61102f868583613513565b60009150505b949350505050565b611045613679565b6110915760405162461bcd60e51b815260206004820152601960248201527f6f6e6c792061646d696e2063616e206772616e7420636f6d70000000000000006044820152606401610c94565b600061109d83836136a2565b905080156110ed5760405162461bcd60e51b815260206004820152601b60248201527f696e73756666696369656e7420636f6d7020666f72206772616e7400000000006044820152606401610c94565b604080516001600160a01b0385168152602081018490527f98b2f82a3a07f223a0be64b3d0f47711c64dccd1feafb94aa28156b38cd9695c910160405180910390a1505050565b600c546000906001600160a01b031633148061115a57506000546001600160a01b031633145b6111765760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b031633148061119157506001821515145b6111ad5760405162461bcd60e51b8152600401610c9490614f99565b600c8054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906112189084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b600080546001600160a01b0316331461127f5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792061646d696e2063616e2073657420636c6f736520666163746f72006044820152606401610c94565b600580549083905560408051828152602081018590527f3b9670cf975d26958e754b57098eaa2ac914d8d2a31b83257997b9f346110fd991015b60405180910390a160005b9392505050565b6000546001600160a01b031633146113345760405162461bcd60e51b815260206004820152602660248201527f6f6e6c792061646d696e2063616e2073657420626f72726f772063617020677560448201526530b93234b0b760d11b6064820152608401610c94565b601780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0382166000908152600b602052604081205460ff166113cd5760405162461bcd60e51b8152600401610c9490614f0a565b600c546001600160a01b03163314806113f057506000546001600160a01b031633145b61140c5760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b031633148061142757506001821515145b6114435760405162461bcd60e51b8152600401610c9490614f99565b6001600160a01b0383166000818152600d6020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f71aec636243f9709bb0007ae15e9afb8150ab01716d75fd7573be5cc096e03b09060a001610d8d565b6114c7613679565b6115135760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610c94565b61151d82826137c7565b5050565b6000806000806000806115368a8a8a8a613afe565b92509250925082601181111561154e5761154e61501c565b95509093509150505b9450945094915050565b6001600160a01b0383166000908152600d602052604081205460ff16156115bb5760405162461bcd60e51b815260206004820152600e60248201526d1b5a5b9d081a5cc81c185d5cd95960921b6044820152606401610c94565b6001600160a01b0384166000908152600b602052604090205460ff166115e55760095b90506112c4565b6115ee84613e48565b6115f8848461409e565b6000949350505050565b600080546001600160a01b0316331461162157610d986001600b614242565b600680549083905560408051828152602081018590527faeba5a6c40a8ac138134bff1aaa65debf25971188a58804bad717f82f0ec131691016112b9565b8015801561166d5750600082115b156106245760405162461bcd60e51b815260206004820152601160248201527072656465656d546f6b656e73207a65726f60781b6044820152606401610c94565b600f81815481106116be57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b031633146116f757610d9860016010614242565b600480546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527fd52b2b9b7e9ee655fcb95d2e5b9e0c9f69e7ef2b8e9d2d0ea78402d576d22e2291016112b9565b611759613679565b6117a55760405162461bcd60e51b815260206004820152601d60248201527f6f6e6c792061646d696e2063616e2073657420636f6d702073706565640000006044820152606401610c94565b6117ae82611f43565b806000036117d4576001600160a01b0382166000908152601a60205260408120556117ef565b436001600160a01b0383166000908152601a60205260409020555b6001600160a01b03821660008181526019602052604090819020839055517f386537fa92edc3319af95f1f904dcf1900021e4f3f4e08169a577a09076e66b39061183c9084815260200190565b60405180910390a25050565b60008060008060008061185f876000806000613afe565b9250925092508260118111156118775761187761501c565b97919650945092505050565b600080546001600160a01b031633146118a257610d9860016013614242565b600c80546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e91016112b9565b6001600160a01b0385166000908152600b602052604081205460ff16158061193d57506001600160a01b0385166000908152600b602052604090205460ff16155b1561194c5760095b90506119f4565b6040516395dd919360e01b81526001600160a01b038481166004830152600091908816906395dd919390602401602060405180830381865afa158015611996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ba9190615003565b905060006119d86040518060200160405280600554815250836142bb565b9050808411156119ed576011925050506119f4565b6000925050505b95945050505050565b6000546001600160a01b0316331480611a2057506017546001600160a01b031633145b611a8a5760405162461bcd60e51b815260206004820152603560248201527f6f6e6c792061646d696e206f7220626f72726f772063617020677561726469616044820152746e2063616e2073657420626f72726f77206361707360581b6064820152608401610c94565b82818115801590611a9a57508082145b611ad65760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610c94565b60005b82811015611bd257848482818110611af357611af3614fd0565b9050602002013560186000898985818110611b1057611b10614fd0565b9050602002016020810190611b2591906149f9565b6001600160a01b03168152602081019190915260400160002055868682818110611b5157611b51614fd0565b9050602002016020810190611b6691906149f9565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f6868684818110611ba257611ba2614fd0565b90506020020135604051611bb891815260200190565b60405180910390a280611bca81615048565b915050611ad9565b50505050505050565b60005b8351811015610518576000848281518110611bfb57611bfb614fd0565b6020908102919091018101516001600160a01b0381166000908152600b90925260409091205490915060ff16611c6b5760405162461bcd60e51b81526020600482015260156024820152741b585c9ad95d081b5d5cdd081899481b1a5cdd1959605a1b6044820152606401610c94565b831515600103611ddb5760006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce49190615003565b90529050611cf282826132b3565b60005b8751811015611dd857611d2283898381518110611d1457611d14614fd0565b602002602001015184613513565b611d83888281518110611d3757611d37614fd0565b6020026020010151601660008b8581518110611d5557611d55614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546136a2565b601660008a8481518110611d9957611d99614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611dd090615048565b915050611cf5565b50505b821515600103611ea757611dee81613e48565b60005b8651811015611ea557611e1d82888381518110611e1057611e10614fd0565b602002602001015161409e565b611e50878281518110611e3257611e32614fd0565b6020026020010151601660008a8581518110611d5557611d55614fd0565b60166000898481518110611e6657611e66614fd0565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080611e9d90615048565b915050611df1565b505b5080611eb281615048565b915050611bde565b6001600160a01b03811660009081526009602052604081205460ff161515600114611f275760405162461bcd60e51b815260206004820152601f60248201527f41646472657373206e6f74207065726d697474656420746f20626f72726f77006044820152606401610c94565b506001600160a01b03166000908152600a602052604090205490565b6001600160a01b038116600090815260196020908152604080832054601a90925282205490914391611f769083906142d3565b9050600081118015611f885750600083115b15610624576000611f9982856142df565b6001600160a01b03861660009081526016602052604081205491925090611fc090836142eb565b6001600160a01b038716600090815260166020908152604080832093909355601a905220849055505050505050565b600080546001600160a01b03163314158061202857506001600160a01b03831660009081526009602052604090205460ff161515600114155b156120405761203960016014614242565b9050610d98565b6001600160a01b0383166000818152600a6020908152604091829020859055815192835282018490527fe3443d75173e872722db2eea82e110ccd8843f3e0424238f2cd44df9bfbf6c1a9101610d8d565b600c546000906001600160a01b03163314806120b757506000546001600160a01b031633145b6120d35760405162461bcd60e51b8152600401610c9490614f52565b6000546001600160a01b03163314806120ee57506001821515145b61210a5760405162461bcd60e51b8152600401610c9490614f99565b600c8054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906112189084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b600080546001600160a01b0316331461219757610d9860016014614242565b6001600160a01b0382166000818152600960209081526040808320805460ff19166001179055600a82528083209290925590519182527f3df9dd335cae22b62876375e06362e2fbe8ab586f724f378560e1aaa06bc00d7910160405180910390a1506000919050565b600080546001600160a01b0316331461221f57610d9860016012614242565b6001600160a01b0382166000908152600b602052604090205460ff161561224c57610d98600a6011614242565b816001600160a01b031663fe9c44ae6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561228a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ae9190615061565b506001600160a01b0382166000908152600b602052604081208054600160ff19918216811783556003830180549092169091558101919091556122f0836142f7565b6040516001600160a01b03841681527fcf583bb0c569eb967f806b11601c4cb93c10310485c67add5f8362c2f212321f906020016112b9565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083526060949383018282801561239257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612374575b5093979650505050505050565b6060600f8054806020026020016040519081016040528092919081815260200182805480156123f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116123d9575b5050505050905090565b600c54600090600160b01b900460ff16156124535760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c881a5cc81c185d5cd95960721b6044820152606401610c94565b60006124608686856143df565b9050801561246f579050611035565b61247886613e48565b612482868661409e565b61102f868561409e565b805160609060008167ffffffffffffffff8111156124ac576124ac6148ca565b6040519080825280602002602001820160405280156124d5578160200160208202803683370190505b50905060005b8281101561254c5760008582815181106124f7576124f7614fd0565b6020026020010151905061250b813361443e565b601181111561251c5761251c61501c565b83838151811061252e5761252e614fd0565b6020908102919091010152508061254481615048565b9150506124db565b509392505050565b6004805460405163fc57d4df60e01b81526001600160a01b03868116938201939093526000928392839291169063fc57d4df90602401602060405180830381865afa1580156125a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cb9190615003565b6004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935292935060009291169063fc57d4df90602401602060405180830381865afa15801561261d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126419190615003565b905081158061264e575080155b1561266257600d600093509350505061276a565b6000866001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c69190615003565b905060006126e06040518060200160405280600081525090565b60408051602080820183526000808352835180830185529081528351808301855260065481528451928301909452888252919261271c91614532565b9250612744604051806020016040528088815250604051806020016040528088815250614532565b9150612750838361457a565b905061275c818b6142bb565b600099509750505050505050505b935093915050565b600c54600090600160b81b900460ff16156127c15760405162461bcd60e51b815260206004820152600f60248201526e1cd95a5e99481a5cc81c185d5cd959608a1b6044820152606401610c94565b6001600160a01b0386166000908152600b602052604090205460ff16158061280257506001600160a01b0385166000908152600b602052604090205460ff16155b1561280e576009611945565b846001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561284c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190614fe6565b6001600160a01b0316866001600160a01b0316635fe3b5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190614fe6565b6001600160a01b0316146128f0576002611945565b6128f986613e48565b612903868461409e565b61290d868561409e565b60009695505050505050565b6001600160a01b0383166000908152600e602052604081205460ff16156129755760405162461bcd60e51b815260206004820152601060248201526f189bdc9c9bddc81a5cc81c185d5cd95960821b6044820152606401610c94565b6001600160a01b0384166000908152600b602052604090205460ff1661299c5760096115de565b6001600160a01b038085166000908152600b60209081526040808320938716835260029093019052205460ff16612a9957336001600160a01b03851614612a1d5760405162461bcd60e51b815260206004820152601560248201527439b2b73232b91036bab9ba1031329031aa37b5b2b760591b6044820152606401610c94565b6000612a29338561443e565b90506000816011811115612a3f57612a3f61501c565b14612a5e57806011811115612a5657612a5661501c565b9150506112c4565b6001600160a01b038086166000908152600b60209081526040808320938816835260029093019052205460ff16612a9757612a9761507e565b505b6004805460405163fc57d4df60e01b81526001600160a01b038781169382019390935291169063fc57d4df90602401602060405180830381865afa158015612ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b099190615003565b600003612b1757600d6115de565b6001600160a01b0384166000908152601860205260409020548015612bfc576000856001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9a9190615003565b90506000612ba882866142eb565b9050828110612bf95760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420626f72726f77206361702072656163686564000000000000006044820152606401610c94565b50505b600080612c0c8688600088613afe565b91935090915060009050826011811115612c2857612c2861501c565b14612c4957816011811115612c3f57612c3f61501c565b93505050506112c4565b8015612c56576004612c3f565b60006040518060200160405280896001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc59190615003565b90529050612cd388826132b3565b612cde888883613513565b600098975050505050505050565b60086020528160005260406000208181548110612d0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080546001600160a01b03163314612d435761203960016006614242565b6001600160a01b0383166000908152600b60205260409020805460ff16612d7857612d7060096007614242565b915050610d98565b60408051602080820183528582528251908101909252670c7d713b49da0000825290612da681835190511090565b15612dc157612db760066008614242565b9350505050610d98565b8415801590612e3d57506004805460405163fc57d4df60e01b81526001600160a01b038981169382019390935291169063fc57d4df90602401602060405180830381865afa158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190615003565b155b15612e4e57612db7600d6009614242565b60018301805490869055604080516001600160a01b0389168152602081018390529081018790527f70483e6592cd5182d45ac970e05bc62cdcc90e9d8ef2c2dbe686cf383bcd7fc59060600160405180910390a16000979650505050505050565b610f7c81600f805480602002602001604051908101604052809291908181526020018280548015612f0957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612eeb575b5050505050610d9e565b600080612f218585856143df565b90508015612f305790506112c4565b612f3985613e48565b612f43858561409e565b600095945050505050565b6040516361bfb47160e11b815233600482015260009082908290819081906001600160a01b0385169063c37f68e290602401608060405180830381865afa158015612f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc19190615094565b50925092509250826000146130265760405162461bcd60e51b815260206004820152602560248201527f657869744d61726b65743a206765744163636f756e74536e617073686f742066604482015264185a5b195960da1b6064820152608401610c94565b801561304257613038600c6002614242565b9695505050505050565b600061304f8733856143df565b9050801561306f57613064600e6003836145b4565b979650505050505050565b6001600160a01b0385166000908152600b60209081526040808320338452600281019092529091205460ff166130ad57600098975050505050505050565b3360009081526002820160209081526040808320805460ff19169055600882528083208054825181850281018501909352808352919290919083018282801561311f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613101575b5050835193945083925060009150505b8281101561318357896001600160a01b031684828151811061315357613153614fd0565b60200260200101516001600160a01b03160361317157809150613183565b8061317b81615048565b91505061312f565b508181106131935761319361507e565b336000908152600860205260409020805481906131b2906001906150ca565b815481106131c2576131c2614fd0565b9060005260206000200160009054906101000a90046001600160a01b03168183815481106131f2576131f2614fd0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080805480613230576132306150e1565b600082815260209020810160001990810180546001600160a01b03191690550190556040517fe699a64c18b07ac5b7301aa273f36a2287239eb9501d81950672794afba29a0d90613299908c9033906001600160a01b0392831681529116602082015260400190565b60405180910390a160009c9b505050505050505050505050565b6001600160a01b0382166000908152601360209081526040808320601190925282205490914383549091506000906132f9908390600160e01b900463ffffffff166142d3565b905060008111801561330b5750600083115b156134b957600061337d876001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015613353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133779190615003565b8761462c565b9050600061338b83866142df565b905060008083116133ab57604051806020016040528060008152506133b5565b6133b5828461464a565b604080516020810190915288546001600160e01b031681529091506000906133dd9083614686565b9050604051806040016040528061342d83600001516040518060400160405280601a81526020017f6e657720696e64657820657863656564732032323420626974730000000000008152506146b2565b6001600160e01b03168152602001613468886040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038c16600090815260136020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555061065192505050565b8015610651576134ec826040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b845463ffffffff91909116600160e01b026001600160e01b03909116178455505050505050565b6001600160a01b0380841660008181526013602090815260408083208151808401835281546001600160e01b0316815282518085018452958552601584528285209689168086528785529285208054875281519390955295909252909155815190929190156106515760006135888383614709565b6040516395dd919360e01b81526001600160a01b0388811660048301529192506000916135d991908a16906395dd919390602401602060405180830381865afa158015613353573d6000803e3d6000fd5b905060006135e78284614735565b6001600160a01b0389166000908152601660205260408120549192509061360e90836142eb565b6001600160a01b038a81166000818152601660209081526040918290208590558a518251888152918201529394509092918d16917f1fc3ecc087d8d2d15e23d0032af5a47059c3892d003d8e139fdcb6bb327c99a6910160405180910390a350505050505050505050565b600080546001600160a01b031633148061369d57506002546001600160a01b031633145b905090565b60008073fa372ff1547fa1a283b5112a4685f1358ce5574d6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015613704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137289190615003565b905060008411801561373a5750808411155b156137be5760405163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905283169063a9059cbb906044016020604051808303816000875af115801561378e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b29190615061565b50600092505050610d98565b50919392505050565b6001600160a01b03821660009081526011602052604090205480156138725760006040518060200160405280856001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138559190615003565b9052905061386284613e48565b61386c84826132b3565b50613a9d565b8115613a9d576001600160a01b0383166000908152600b60205260409020805460ff1615156001146138e65760405162461bcd60e51b815260206004820152601960248201527f636f6d70206d61726b6574206973206e6f74206c6973746564000000000000006044820152606401610c94565b6001600160a01b0384166000908152601260205260409020546001600160e01b031615801561393857506001600160a01b038416600090815260126020526040902054600160e01b900463ffffffff16155b156139d357604080518082019091526ec097ce7bc90715b34b9f100000000081526020810161398b435b6040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038616600090815260126020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555b6001600160a01b0384166000908152601360205260409020546001600160e01b0316158015613a2557506001600160a01b038416600090815260136020526040902054600160e01b900463ffffffff16155b15613a9b57604080518082019091526ec097ce7bc90715b34b9f1000000000815260208101613a5343613962565b63ffffffff9081169091526001600160a01b038616600090815260136020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555b505b818114610730576001600160a01b03831660008181526011602052604090819020849055517f2ab93f65628379309f36cb125e90d7c902454a545c4f8b8cb0794af75c24b80790613af19085815260200190565b60405180910390a2505050565b6000806000613b0b6147cc565b6001600160a01b038816600090815260086020908152604080832080548251818502810185019093528083528493830182828015613b7257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b54575b5050506001600160a01b038d166000908152600a6020526040812054875292935050505b8151811015613df2576000828281518110613bb357613bb3614fd0565b60209081029190910101516040516361bfb47160e11b81526001600160a01b038e811660048301529192509082169063c37f68e290602401608060405180830381865afa158015613c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2c9190615094565b60808901526060880152604087015293508315613c5857600f6000809750975097505050505050611557565b60408051602080820183526001600160a01b038481166000818152600b845285902060010154845260c08a01939093528351808301855260808a0151815260e08a015260048054855163fc57d4df60e01b815291820194909452935192169263fc57d4df92602480830193928290030181865afa158015613cdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d019190615003565b60a08601819052600003613d2457600d6000809750975097505050505050611557565b604080516020810190915260a0860151815261010086015260c085015160e0860151613d5e91613d5391614532565b866101000151614532565b610120860181905260408601518651613d7892919061475f565b855261010085015160608601516020870151613d9592919061475f565b60208601526001600160a01b03808c1690821603613ddf57613dc18561012001518b876020015161475f565b60208601819052610100860151613dd9918b9061475f565b60208601525b5080613dea81615048565b915050613b96565b50602083015183511115613e235760208301518351600091613e13916150ca565b6000955095509550505050611557565b60008084600001518560200151613e3a91906150ca565b955095509550505050611557565b6001600160a01b038116600090815260126020908152604080832060119092528220549091438354909150600090613e8e908390600160e01b900463ffffffff166142d3565b9050600081118015613ea05750600083115b15614045576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f099190615003565b90506000613f1783866142df565b90506000808311613f375760405180602001604052806000815250613f41565b613f41828461464a565b604080516020810190915288546001600160e01b03168152909150600090613f699083614686565b90506040518060400160405280613fb983600001516040518060400160405280601a81526020017f6e657720696e64657820657863656564732032323420626974730000000000008152506146b2565b6001600160e01b03168152602001613ff4886040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b63ffffffff9081169091526001600160a01b038b16600090815260126020908152604090912083519390910151909116600160e01b026001600160e01b039092169190911790555061051892505050565b801561051857614078826040518060400160405280601c81526020016000805160206151a68339815191528152506146e1565b845463ffffffff91909116600160e01b026001600160e01b039091161784555050505050565b6001600160a01b0380831660008181526012602090815260408083208151808401835281546001600160e01b031681528251808501845295855260148452828520968816808652878552928520805487528151939095529590925290915581519092919015801561410f5750815115155b15614127576ec097ce7bc90715b34b9f100000000081525b60006141338383614709565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918816906370a0823190602401602060405180830381865afa15801561417f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141a39190615003565b905060006141b18284614735565b6001600160a01b038816600090815260166020526040812054919250906141d890836142eb565b6001600160a01b038981166000818152601660209081526040918290208590558a518251888152918201529394509092918c16917f2caecd17d02f56fa897705dcc740da2d237c373f70686f4e0d9bd3bf0400ea7a910160405180910390a3505050505050505050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156142775761427761501c565b8360148111156142895761428961501c565b60408051928352602083019190915260009082015260600160405180910390a18260118111156112c4576112c461501c565b6000806142c88484614780565b9050611035816147a8565b60006112c482846150ca565b60006112c482846150f7565b60006112c48284615116565b60005b600f5481101561438c57816001600160a01b0316600f828154811061432157614321614fd0565b6000918252602090912001546001600160a01b03160361437a5760405162461bcd60e51b81526020600482015260146024820152731b585c9ad95d08185b1c9958591e48185919195960621b6044820152606401610c94565b8061438481615048565b9150506142fa565b50600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166000908152600b602052604081205460ff166144065760096115de565b6001600160a01b038085166000908152600b60209081526040808320938716835260029093019052205460ff166115f85760006115de565b6001600160a01b0382166000908152600b60205260408120805460ff16614469576009915050610d98565b6001600160a01b038316600090815260028201602052604090205460ff16151560010361449a576000915050610d98565b6001600160a01b03838116600081815260028401602090815260408083208054600160ff199091168117909155600883528184208054918201815584529282902090920180546001600160a01b031916948916948517905581519384528301919091527f3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5910160405180910390a15060009392505050565b6040805160208101909152600081526040518060200160405280670de0b6b3a7640000614567866000015186600001516142df565b614571919061512e565b90529392505050565b60408051602081019091526000815260405180602001604052806145716145ad8660000151670de0b6b3a76400006142df565b85516147c0565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08460118111156145e9576145e961501c565b8460148111156145fb576145fb61501c565b604080519283526020830191909152810184905260600160405180910390a18360118111156110355761103561501c565b60006112c461464384670de0b6b3a76400006142df565b83516147c0565b6040805160208101909152600081526040518060200160405280614571614680866ec097ce7bc90715b34b9f10000000006142df565b856147c0565b6040805160208101909152600081526040518060200160405280614571856000015185600001516142eb565b600081600160e01b84106146d95760405162461bcd60e51b8152600401610c949190615150565b509192915050565b60008164010000000084106146d95760405162461bcd60e51b8152600401610c949190615150565b6040805160208101909152600081526040518060200160405280614571856000015185600001516142d3565b60006ec097ce7bc90715b34b9f10000000006147558484600001516142df565b6112c4919061512e565b60008061476c8585614780565b90506119f461477a826147a8565b846142eb565b60408051602081019091526000815260405180602001604052806145718560000151856142df565b8051600090610d9890670de0b6b3a76400009061512e565b60006112c4828461512e565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016148186040518060200160405280600081525090565b81526020016148336040518060200160405280600081525090565b815260200161484e6040518060200160405280600081525090565b81526020016148696040518060200160405280600081525090565b905290565b6001600160a01b0381168114610f7c57600080fd5b8015158114610f7c57600080fd5b600080604083850312156148a457600080fd5b82356148af8161486e565b915060208301356148bf81614883565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614909576149096148ca565b604052919050565b600067ffffffffffffffff82111561492b5761492b6148ca565b5060051b60200190565b600082601f83011261494657600080fd5b8135602061495b61495683614911565b6148e0565b82815260059290921b8401810191818101908684111561497a57600080fd5b8286015b8481101561499e5780356149918161486e565b835291830191830161497e565b509695505050505050565b600080604083850312156149bc57600080fd5b82356149c78161486e565b9150602083013567ffffffffffffffff8111156149e357600080fd5b6149ef85828601614935565b9150509250929050565b600060208284031215614a0b57600080fd5b81356112c48161486e565b600080600080600060a08688031215614a2e57600080fd5b8535614a398161486e565b94506020860135614a498161486e565b93506040860135614a598161486e565b94979396509394606081013594506080013592915050565b60008060008060808587031215614a8757600080fd5b8435614a928161486e565b93506020850135614aa28161486e565b92506040850135614ab28161486e565b9396929550929360600135925050565b60008060408385031215614ad557600080fd5b8235614ae08161486e565b946020939093013593505050565b600060208284031215614b0057600080fd5b81356112c481614883565b600060208284031215614b1d57600080fd5b5035919050565b60008060008060808587031215614b3a57600080fd5b8435614b458161486e565b93506020850135614b558161486e565b93969395505050506040820135916060013590565b60008060008060008060c08789031215614b8357600080fd5b8635614b8e8161486e565b95506020870135614b9e8161486e565b94506040870135614bae8161486e565b93506060870135614bbe8161486e565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215614bed57600080fd5b8335614bf88161486e565b92506020840135614c088161486e565b929592945050506040919091013590565b600080600080600060a08688031215614c3157600080fd5b8535614c3c8161486e565b94506020860135614c4c8161486e565b93506040860135614c5c8161486e565b92506060860135614c6c8161486e565b949793965091946080013592915050565b60008083601f840112614c8f57600080fd5b50813567ffffffffffffffff811115614ca757600080fd5b6020830191508360208260051b8501011115614cc257600080fd5b9250929050565b60008060008060408587031215614cdf57600080fd5b843567ffffffffffffffff80821115614cf757600080fd5b614d0388838901614c7d565b90965094506020870135915080821115614d1c57600080fd5b50614d2987828801614c7d565b95989497509550505050565b600082601f830112614d4657600080fd5b81356020614d5661495683614911565b82815260059290921b84018101918181019086841115614d7557600080fd5b8286015b8481101561499e578035614d8c8161486e565b8352918301918301614d79565b60008060008060808587031215614daf57600080fd5b843567ffffffffffffffff80821115614dc757600080fd5b614dd388838901614d35565b95506020870135915080821115614de957600080fd5b50614df687828801614935565b9350506040850135614e0781614883565b91506060850135614e1781614883565b939692955090935050565b60008060408385031215614e3557600080fd5b8235614e408161486e565b915060208301356148bf8161486e565b6020808252825182820181905260009190848201906040850190845b81811015614e915783516001600160a01b031683529284019291840191600101614e6c565b50909695505050505050565b600060208284031215614eaf57600080fd5b813567ffffffffffffffff811115614ec657600080fd5b61103584828501614d35565b6020808252825182820181905260009190848201906040850190845b81811015614e9157835183529284019291840191600101614eee565b60208082526028908201527f63616e6e6f742070617573652061206d61726b65742074686174206973206e6f6040820152671d081b1a5cdd195960c21b606082015260800190565b60208082526027908201527f6f6e6c7920706175736520677561726469616e20616e642061646d696e2063616040820152666e20706175736560c81b606082015260800190565b60208082526016908201527f6f6e6c792061646d696e2063616e20756e706175736500000000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614ff857600080fd5b81516112c48161486e565b60006020828403121561501557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161505a5761505a615032565b5060010190565b60006020828403121561507357600080fd5b81516112c481614883565b634e487b7160e01b600052600160045260246000fd5b600080600080608085870312156150aa57600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000828210156150dc576150dc615032565b500390565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561511157615111615032565b500290565b6000821982111561512957615129615032565b500190565b60008261514b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208083528351808285015260005b8181101561517d57858101830151858201604001528201615161565b8181111561518f576000604083870101525b50601f01601f191692909201604001939250505056fe626c6f636b206e756d6265722065786365656473203332206269747300000000a26469706673582212207f39fc0c2ab51b946d47127076c4281ff9830ea288581a9201620c084b6a2a1964736f6c634300080d0033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_grantComp(address,uint256)": {
        "details": "Note: If there is not enough COMP, we do not perform the transfer all.",
        "params": {
          "amount": "The amount of COMP to (possibly) transfer",
          "recipient": "The address of the recipient to transfer COMP to"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setCloseFactor(uint256)": {
        "details": "Admin function to set closeFactor",
        "params": {
          "newCloseFactorMantissa": "New close factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure"
        }
      },
      "_setCollateralFactor(address,uint256)": {
        "details": "Admin function to set per-market collateralFactor",
        "params": {
          "cToken": "The market to set the factor on",
          "newCollateralFactorMantissa": "The new collateral factor, scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setCompSpeed(address,uint256)": {
        "params": {
          "cToken": "The market whose COMP speed to update",
          "compSpeed": "New COMP speed for market"
        }
      },
      "_setContributorCompSpeed(address,uint256)": {
        "params": {
          "compSpeed": "New COMP speed for contributor",
          "contributor": "The contributor whose COMP speed to update"
        }
      },
      "_setLiquidationIncentive(uint256)": {
        "details": "Admin function to set liquidationIncentive",
        "params": {
          "newLiquidationIncentiveMantissa": "New liquidationIncentive scaled by 1e18"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See ErrorReporter for details)"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_setPriceOracle(address)": {
        "details": "Admin function to set a new price oracle",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_supportMarket(address)": {
        "details": "Admin function to set isListed and add support for the market",
        "params": {
          "cToken": "The address of the market (token) to list"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "borrowAllowed(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of underlying the account would borrow",
          "borrower": "The account which would borrow the asset",
          "cToken": "The market to verify the borrow against"
        },
        "returns": {
          "_0": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "borrowVerify(address,address,uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset requested to borrow",
          "borrower": "The address borrowing the underlying",
          "cToken": "Asset whose underlying is being borrowed"
        }
      },
      "checkMembership(address,address)": {
        "params": {
          "account": "The address of the account to check",
          "cToken": "The cToken to check"
        },
        "returns": {
          "_0": "True if the account is in the asset, otherwise false."
        }
      },
      "claimComp(address)": {
        "params": {
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address,address[])": {
        "params": {
          "cTokens": "The list of markets to claim COMP in",
          "holder": "The address to claim COMP for"
        }
      },
      "claimComp(address[],address[],bool,bool)": {
        "params": {
          "borrowers": "Whether or not to claim COMP earned by borrowing",
          "cTokens": "The list of markets to claim COMP in",
          "holders": "The addresses to claim COMP for",
          "suppliers": "Whether or not to claim COMP earned by supplying"
        }
      },
      "enterMarkets(address[])": {
        "params": {
          "cTokens": "The list of addresses of the cToken markets to be enabled"
        },
        "returns": {
          "_0": "Success indicator for whether each corresponding market was entered"
        }
      },
      "exitMarket(address)": {
        "details": "Sender must not have an outstanding borrow balance in the asset,  or be providing necessary collateral for an outstanding borrow.",
        "params": {
          "cTokenAddress": "The address of the asset to be removed"
        },
        "returns": {
          "_0": "Whether or not the account successfully exited the market"
        }
      },
      "getAccountLiquidity(address)": {
        "returns": {
          "_0": "(possible error code (semi-opaque), account liquidity in excess of collateral requirements,          account shortfall below collateral requirements)"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getAssetsIn(address)": {
        "params": {
          "account": "The address of the account to pull assets for"
        },
        "returns": {
          "_0": "A dynamic list with the assets the account has entered"
        }
      },
      "getCompAddress()": {
        "returns": {
          "_0": "The address of COMP"
        }
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "params": {
          "account": "The account to determine liquidity for",
          "borrowAmount": "The amount of underlying to hypothetically borrow",
          "cTokenModify": "The market to hypothetically redeem/borrow in",
          "redeemTokens": "The number of tokens to hypothetically redeem"
        },
        "returns": {
          "_0": "(possible error code (semi-opaque), hypothetical account liquidity in excess of collateral requirements,          hypothetical account shortfall below collateral requirements)"
        }
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "repayAmount": "The amount of underlying being repaid"
        }
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral"
        }
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)",
        "params": {
          "actualRepayAmount": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens",
          "cTokenBorrowed": "The address of the borrowed cToken",
          "cTokenCollateral": "The address of the collateral cToken"
        },
        "returns": {
          "_0": "(errorCode, number of cTokenCollateral tokens to be seized in a liquidation)"
        }
      },
      "mintAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the mint against",
          "mintAmount": "The amount of underlying being supplied to the market in exchange for tokens",
          "minter": "The account which would get the minted tokens"
        },
        "returns": {
          "_0": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "mintVerify(address,address,uint256,uint256)": {
        "params": {
          "actualMintAmount": "The amount of the underlying asset being minted",
          "cToken": "Asset being minted",
          "mintTokens": "The number of tokens being minted",
          "minter": "The address minting the tokens"
        }
      },
      "redeemAllowed(address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the redeem against",
          "redeemTokens": "The number of cTokens to exchange for the underlying asset in the market",
          "redeemer": "The account which would redeem the tokens"
        },
        "returns": {
          "_0": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "params": {
          "cToken": "Asset being redeemed",
          "redeemAmount": "The amount of the underlying asset being redeemed",
          "redeemTokens": "The number of tokens being redeemed",
          "redeemer": "The address redeeming the tokens"
        }
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "params": {
          "borrower": "The account which would borrowed the asset",
          "cToken": "The market to verify the repay against",
          "payer": "The account which would repay the asset",
          "repayAmount": "The amount of the underlying asset the account would repay"
        },
        "returns": {
          "_0": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "params": {
          "actualRepayAmount": "The amount of underlying being repaid",
          "borrower": "The address of the borrower",
          "cToken": "Asset being repaid",
          "payer": "The address repaying the borrow"
        }
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "params": {
          "borrower": "The address of the borrower",
          "cTokenBorrowed": "Asset which was borrowed by the borrower",
          "cTokenCollateral": "Asset which was used as collateral and will be seized",
          "liquidator": "The address repaying the borrow and seizing the collateral",
          "seizeTokens": "The number of collateral tokens to seize"
        }
      },
      "transferAllowed(address,address,address,uint256)": {
        "params": {
          "cToken": "The market to verify the transfer against",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        },
        "returns": {
          "_0": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)"
        }
      },
      "transferVerify(address,address,address,uint256)": {
        "params": {
          "cToken": "Asset being transferred",
          "dst": "The account which receives the tokens",
          "src": "The account which sources the tokens",
          "transferTokens": "The number of cTokens to transfer"
        }
      },
      "updateContributorRewards(address)": {
        "params": {
          "contributor": "The address to calculate contributor rewards for"
        }
      }
    },
    "title": "Compound's Comptroller Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "BorrowerLimitChanged(address,uint256)": {
        "notice": "Emitted when borrower's limits are changed"
      },
      "BorrowerWhitelisted(address)": {
        "notice": "Emitted when new borrower is whitelisted"
      },
      "CompGranted(address,uint256)": {
        "notice": "Emitted when COMP is granted by admin"
      },
      "CompSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new COMP speed is calculated for a market"
      },
      "ContributorCompSpeedUpdated(address,uint256)": {
        "notice": "Emitted when a new COMP speed is set for a contributor"
      },
      "DistributedBorrowerComp(address,address,uint256,uint256)": {
        "notice": "Emitted when COMP is distributed to a borrower"
      },
      "DistributedSupplierComp(address,address,uint256,uint256)": {
        "notice": "Emitted when COMP is distributed to a supplier"
      },
      "MarketEntered(address,address)": {
        "notice": "Emitted when an account enters a market"
      },
      "MarketExited(address,address)": {
        "notice": "Emitted when an account exits a market"
      },
      "MarketListed(address)": {
        "notice": "Emitted when an admin supports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a cToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewCloseFactor(uint256,uint256)": {
        "notice": "Emitted when close factor is changed by admin"
      },
      "NewCollateralFactor(address,uint256,uint256)": {
        "notice": "Emitted when a collateral factor is changed by admin"
      },
      "NewLiquidationIncentive(uint256,uint256)": {
        "notice": "Emitted when liquidation incentive is changed by admin"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewPriceOracle(address,address)": {
        "notice": "Emitted when price oracle is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_grantComp(address,uint256)": {
        "notice": "Transfer COMP to the recipient"
      },
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setCloseFactor(uint256)": {
        "notice": "Sets the closeFactor used when liquidating borrows"
      },
      "_setCollateralFactor(address,uint256)": {
        "notice": "Sets the collateralFactor for a market"
      },
      "_setCompSpeed(address,uint256)": {
        "notice": "Set COMP speed for a single market"
      },
      "_setContributorCompSpeed(address,uint256)": {
        "notice": "Set COMP speed for a single contributor"
      },
      "_setLiquidationIncentive(uint256)": {
        "notice": "Sets liquidationIncentive"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_setPriceOracle(address)": {
        "notice": "Sets a new price oracle for the comptroller"
      },
      "_supportMarket(address)": {
        "notice": "Add the market to the markets mapping and set it as listed"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
      },
      "borrowVerify(address,address,uint256)": {
        "notice": "Validates borrow and reverts on rejection. May emit logs."
      },
      "checkMembership(address,address)": {
        "notice": "Returns whether the given account is entered in the given asset"
      },
      "claimComp(address)": {
        "notice": "Claim all the comp accrued by holder in all markets"
      },
      "claimComp(address,address[])": {
        "notice": "Claim all the comp accrued by holder in the specified markets"
      },
      "claimComp(address[],address[],bool,bool)": {
        "notice": "Claim all comp accrued by the holders"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "compAccrued(address)": {
        "notice": "The COMP accrued but not yet transferred to each user"
      },
      "compBorrowState(address)": {
        "notice": "The COMP market borrow state for each market"
      },
      "compBorrowerIndex(address,address)": {
        "notice": "The COMP borrow index for each market for each borrower as of the last time they accrued COMP"
      },
      "compContributorSpeeds(address)": {
        "notice": "The portion of COMP that each contributor receives per block"
      },
      "compInitialIndex()": {
        "notice": "The initial COMP index for a market"
      },
      "compRate()": {
        "notice": "The rate at which the flywheel distributes COMP, per block"
      },
      "compSpeeds(address)": {
        "notice": "The portion of compRate that each market currently receives"
      },
      "compSupplierIndex(address,address)": {
        "notice": "The COMP borrow index for each market for each supplier as of the last time they accrued COMP"
      },
      "compSupplyState(address)": {
        "notice": "The COMP market supply state for each market"
      },
      "comptrollerImplementation()": {
        "notice": "Active brains of Unitroller"
      },
      "enterMarkets(address[])": {
        "notice": "Add assets to be included in account liquidity calculation"
      },
      "exitMarket(address)": {
        "notice": "Removes asset from sender's account liquidity calculation"
      },
      "getAccountLiquidity(address)": {
        "notice": "Determine the current account liquidity wrt collateral requirements"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getAssetsIn(address)": {
        "notice": "Returns the assets an account has entered"
      },
      "getCompAddress()": {
        "notice": "Return the address of the COMP token"
      },
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
        "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "lastContributorBlock(address)": {
        "notice": "Last block at which a contributor's COMP rewards have been allocated"
      },
      "liquidateBorrowAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the liquidation should be allowed to occur"
      },
      "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
        "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
      },
      "liquidateCalculateSeizeTokens(address,address,uint256)": {
        "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of cTokens -> Market metadata"
      },
      "maxAssets()": {
        "notice": "Max number of assets a single account can participate in (borrow or use as collateral)"
      },
      "mintAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to mint tokens in the given market"
      },
      "mintVerify(address,address,uint256,uint256)": {
        "notice": "Validates mint and reverts on rejection. May emit logs."
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "pendingComptrollerImplementation()": {
        "notice": "Pending brains of Unitroller"
      },
      "redeemAllowed(address,address,uint256)": {
        "notice": "Checks if the account should be allowed to redeem tokens in the given market"
      },
      "redeemVerify(address,address,uint256,uint256)": {
        "notice": "Validates redeem and reverts on rejection. May emit logs."
      },
      "repayBorrowAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to repay a borrow in the given market"
      },
      "repayBorrowVerify(address,address,address,uint256,uint256)": {
        "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
      },
      "seizeAllowed(address,address,address,address,uint256)": {
        "notice": "Checks if the seizing of assets should be allowed to occur"
      },
      "seizeVerify(address,address,address,address,uint256)": {
        "notice": "Validates seize and reverts on rejection. May emit logs."
      },
      "transferAllowed(address,address,address,uint256)": {
        "notice": "Checks if the account should be allowed to transfer tokens in the given market"
      },
      "transferVerify(address,address,address,uint256)": {
        "notice": "Validates transfer and reverts on rejection. May emit logs."
      },
      "updateContributorRewards(address)": {
        "notice": "Calculate additional accrued COMP for a contributor since last accrual"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10048,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10051,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10054,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "comptrollerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10057,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "pendingComptrollerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10064,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PriceOracle)16158"
      },
      {
        "astId": 10067,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10070,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10073,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "maxAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10080,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "accountAssets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_contract(CToken)5453)dyn_storage)"
      },
      {
        "astId": 10084,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "borrowerArray",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10088,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "borrowLimit",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10108,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Market)10102_storage)"
      },
      {
        "astId": 10111,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 10113,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 10115,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 10117,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 10119,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 10123,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10127,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10140,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "allMarkets",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_contract(CToken)5453)dyn_storage"
      },
      {
        "astId": 10143,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10148,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compSpeeds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10154,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compSupplyState",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(CompMarketState)10135_storage)"
      },
      {
        "astId": 10160,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compBorrowState",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(CompMarketState)10135_storage)"
      },
      {
        "astId": 10167,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compSupplierIndex",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10174,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compBorrowerIndex",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10179,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compAccrued",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10184,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 10188,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10196,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "compContributorSpeeds",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10201,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "lastContributorBlock",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6149,
        "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
        "label": "_compAddress",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(CToken)5453)dyn_storage": {
        "base": "t_contract(CToken)5453",
        "encoding": "dynamic_array",
        "label": "contract CToken[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CToken)5453": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)16158": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(CToken)5453)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract CToken[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(CToken)5453)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(CompMarketState)10135_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV3Storage.CompMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(CompMarketState)10135_storage"
      },
      "t_mapping(t_address,t_struct(Market)10102_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)10102_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CompMarketState)10135_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV3Storage.CompMarketState",
        "members": [
          {
            "astId": 10132,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 10134,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)10102_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 10093,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10095,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10099,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 10101,
            "contract": "contracts/ComptrollerG7.sol:ComptrollerG7",
            "label": "isComped",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}