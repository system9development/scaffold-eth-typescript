/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BondRedeemerInterface extends utils.Interface {
  contractName: "BondRedeemer";
  functions: {
    "BDAMM()": FunctionFragment;
    "BondRedemption(address,uint256)": FunctionFragment;
    "CHAINLINK_DAMM()": FunctionFragment;
    "DAMM()": FunctionFragment;
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "dAMMBalance()": FunctionFragment;
    "disableToken(address)": FunctionFragment;
    "discountRates(address)": FunctionFragment;
    "getLatestDecimals(address)": FunctionFragment;
    "getLatestPrice(address)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permitToken(address,uint256,address)": FunctionFragment;
    "redeemAllowed()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokensPermitted(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BDAMM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BondRedemption",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_DAMM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAMM", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dAMMBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "discountRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracles", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPermitted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "BDAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BondRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_DAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAMM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dAMMBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPermitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "NewAdmin(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Redemption(address,uint256,uint256,uint256)": EventFragment;
    "TokenPermitted(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPermitted"): EventFragment;
}

export type NewAdminEvent = TypedEvent<[string], { newAdminAdd: string }>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedemptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    redeemer: string;
    quantityOfdAMM: BigNumber;
    bdAMMRedeemed: BigNumber;
    usdcQuantity: BigNumber;
  }
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export type TokenPermittedEvent = TypedEvent<
  [string, BigNumber, string],
  { token: string; discountRates: BigNumber; oracle: string }
>;

export type TokenPermittedEventFilter = TypedEventFilter<TokenPermittedEvent>;

export interface BondRedeemer extends BaseContract {
  contractName: "BondRedeemer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BondRedeemerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BDAMM(overrides?: CallOverrides): Promise<[string]>;

    BondRedemption(
      paymentToken: string,
      rawbdAMMToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    CHAINLINK_DAMM(overrides?: CallOverrides): Promise<[string]>;

    DAMM(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dAMMBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestDecimals(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getLatestPrice(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permitToken(
      token: string,
      discountRate: BigNumberish,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensPermitted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BDAMM(overrides?: CallOverrides): Promise<string>;

  BondRedemption(
    paymentToken: string,
    rawbdAMMToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  CHAINLINK_DAMM(overrides?: CallOverrides): Promise<string>;

  DAMM(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dAMMBalance(overrides?: CallOverrides): Promise<BigNumber>;

  disableToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLatestDecimals(
    oracleAdd: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getLatestPrice(
    oracleAdd: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  permitToken(
    token: string,
    discountRate: BigNumberish,
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAllowed(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensPermitted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BDAMM(overrides?: CallOverrides): Promise<string>;

    BondRedemption(
      paymentToken: string,
      rawbdAMMToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    CHAINLINK_DAMM(overrides?: CallOverrides): Promise<string>;

    DAMM(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    dAMMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    disableToken(token: string, overrides?: CallOverrides): Promise<boolean>;

    discountRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestDecimals(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getLatestPrice(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    permitToken(
      token: string,
      discountRate: BigNumberish,
      oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAllowed(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokensPermitted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewAdmin(address)"(newAdminAdd?: null): NewAdminEventFilter;
    NewAdmin(newAdminAdd?: null): NewAdminEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Redemption(address,uint256,uint256,uint256)"(
      redeemer?: null,
      quantityOfdAMM?: null,
      bdAMMRedeemed?: null,
      usdcQuantity?: null
    ): RedemptionEventFilter;
    Redemption(
      redeemer?: null,
      quantityOfdAMM?: null,
      bdAMMRedeemed?: null,
      usdcQuantity?: null
    ): RedemptionEventFilter;

    "TokenPermitted(address,uint256,address)"(
      token?: null,
      discountRates?: null,
      oracle?: null
    ): TokenPermittedEventFilter;
    TokenPermitted(
      token?: null,
      discountRates?: null,
      oracle?: null
    ): TokenPermittedEventFilter;
  };

  estimateGas: {
    BDAMM(overrides?: CallOverrides): Promise<BigNumber>;

    BondRedemption(
      paymentToken: string,
      rawbdAMMToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    CHAINLINK_DAMM(overrides?: CallOverrides): Promise<BigNumber>;

    DAMM(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dAMMBalance(overrides?: CallOverrides): Promise<BigNumber>;

    disableToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountRates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestDecimals(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrice(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permitToken(
      token: string,
      discountRate: BigNumberish,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensPermitted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BDAMM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BondRedemption(
      paymentToken: string,
      rawbdAMMToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    CHAINLINK_DAMM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAMM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dAMMBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestDecimals(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPrice(
      oracleAdd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitToken(
      token: string,
      discountRate: BigNumberish,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensPermitted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
